<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hazuki.cn</id>
    <title></title>
    <subtitle>葉月書架</subtitle>
    <icon>https://hazuki.cn/images/favicon.ico</icon>
    <link href="https://hazuki.cn" />
    <author>
      <name>Hazuki 叶月</name>
    </author>
    <updated>2021-12-02T05:54:40.000Z</updated>
    <category term="关键词1" />
    <category term="关键词2" />
    <entry>
        <id>https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/</id>
        <title>Shoka主题：修改切换标签时更换标题</title>
        <link rel="alternate" href="https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;Shoka 主题默认在进行标签切换时，会将标题修改为 &lt;code class=&#34;red&#34;&gt;(´Д｀)大変だ！&lt;/code&gt; ，同时修改图标，虽然挺可爱 hh，但是当标签页多了想来回切换时不方便定位。&lt;/p&gt;
&lt;p&gt;为此，对 Shoka 主题进行了小的修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切换标签时不再将标题修改为 &lt;code class=&#34;red&#34;&gt;(´Д｀)大変だ！&lt;/code&gt; ，同时修改图标也是不必要的了；&lt;/li&gt;
&lt;li&gt;保留切换回来时显示的 &lt;code class=&#34;red&#34;&gt;（●´3｀●）やれやれだぜ&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;具体实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h1&gt;
&lt;p&gt;找到 &lt;code&gt;themes/shoka/source/js/_app/global.js&lt;/code&gt; ，定位到 &lt;code&gt;visibilityListener&lt;/code&gt;  函数（130 行）。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;case &#39;hidden&#39;:&lt;/code&gt;  下的代码（见代码标亮部分）&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;visibilityListener&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;visibilitychange&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;visibilityState&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;hidden&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;[rel=&#34;icon&#34;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; statics &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;favicon&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;normal&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// document.title = LOCAL.favicon.hide;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;switch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          Loader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&#34;marked&#34;&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// clearTimeout(titleTime);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;visible&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;[rel=&#34;icon&#34;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;href&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; statics &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;favicon&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;normal&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;LOCAL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;favicon&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;CONFIG&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;switch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          Loader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hide&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        titleTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; originTitle&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;到这里就完成啦。&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;注：配置了 &lt;code&gt;jsDelivr加速&lt;/code&gt; 的话，需要刷新 jsDelivr 缓存才能看到效果。&lt;/p&gt;
&lt;/div&gt;
</content>
        <category term="Hexo博客搭建" scheme="https://hazuki.cn/categories/hexo/" />
        <category term="Shoka主题" scheme="https://hazuki.cn/categories/hexo/Theme-Shoka/" />
        <category term="Shoka主题" scheme="https://hazuki.cn/tags/Shoka%E4%B8%BB%E9%A2%98/" />
        <updated>2021-12-02T05:54:40.000Z</updated>
    </entry>
    <entry>
        <id>https://hazuki.cn/computer-science/computer-network/application-layer/</id>
        <title>第2章 应用层</title>
        <link rel="alternate" href="https://hazuki.cn/computer-science/computer-network/application-layer/"/>
        <content type="html">&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;以下为个人学习笔记和习题整理&lt;br /&gt;
课程：哈尔滨工业大学 计算机网络&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=&#34;&gt; https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong class=&#34;blue&#34;&gt;网络应用&lt;/strong&gt;与单机应用的本质不同：&lt;/p&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;网络应用需要有 &lt;code&gt;网络的基础环境&lt;/code&gt; ，一部分软件运行在自己机器上（如浏览器），另一部分软件（或数据信息）运行在互联网的某个地方（如某些服务器），两部分软件需要 &lt;code&gt;进行交互&lt;/code&gt; ，才共同构成了网络应用。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;既然网络应用是由不同的部分构成的，那么它就存在一个 &lt;code&gt;结构&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;网络应用的体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用的体系结构&#34;&gt;#&lt;/a&gt; 网络应用的体系结构&lt;/h1&gt;
&lt;p&gt;现代网络应用中，有两种主流的体系结构。&lt;/p&gt;
&lt;h2 id=&#34;客户机服务器结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户机服务器结构&#34;&gt;#&lt;/a&gt; 客户机 / 服务器结构&lt;/h2&gt;
&lt;p&gt;&lt;strong class=&#34;red&#34;&gt;主从式架构&lt;/strong&gt;（英语：&lt;em&gt;Client–server model&lt;/em&gt;）也称 &lt;code class=&#34;blue&#34;&gt;客户端/服务器架构&lt;/code&gt; 、 &lt;code class=&#34;pink&#34;&gt;C/S架构&lt;/code&gt; ，是一种网络架构，它把客户端（Client，通常是一个采用图形用户界面的程序），与服务器（Server）区分开来。每一个客户端软件的实例都可以向一个服务器或应用程序服务器发出请求。有很多不同类型的服务器，例如文件服务器、游戏服务器等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器 (server)
&lt;ol&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;7 * 24小时&lt;/code&gt; 提供服务&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;永久性&lt;/code&gt; 访问地址 / 域名&lt;/li&gt;
&lt;li&gt;利用大量服务器实现可扩展性（&lt;span class=&#34;pink&#34;&gt;数据中心&lt;/span&gt;，能够处理大量的并发请求）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;客户端 (client)
&lt;ol&gt;
&lt;li&gt;与服务器通信，使用服务器提供的服务&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;间歇性&lt;/code&gt; 接入网络&lt;/li&gt;
&lt;li&gt;可能使用 &lt;code class=&#34;aqua&#34;&gt;动态IP地址&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不会与其他 “客户机” 直接通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;主从式架构通过不同的途径应用于很多不同类型的应用程序，最常见就是目前在因特网上用的 &lt;code&gt;网页&lt;/code&gt; 。例如，当你在维基百科阅读文章时，你的电脑和网页浏览器就被当做一个 &lt;code&gt;客户端&lt;/code&gt; ，同时，组成维基百科的电脑、数据库和应用程序就被当做 &lt;code&gt;服务器&lt;/code&gt; 。当你的网页浏览器向维基百科请求一个指定的文章时，维基百科服务器从维基百科的数据库中找出所有该文章需要的信息，结合成一个网页，再发送回你的浏览器。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;点对点结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#点对点结构&#34;&gt;#&lt;/a&gt; 点对点结构&lt;/h2&gt;
&lt;p&gt;&lt;strong class=&#34;blue&#34;&gt;对等式网络&lt;/strong&gt;（英语：&lt;em&gt;peer-to-peer&lt;/em&gt;， 简称  &lt;code class=&#34;aqua&#34;&gt;P2P&lt;/code&gt; ），又称 &lt;code class=&#34;orange&#34;&gt;点对点技术&lt;/code&gt; ，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P2P 架构的特点
&lt;ol&gt;
&lt;li&gt;没有永远在线的服务器&lt;/li&gt;
&lt;li&gt;任意端系统 / 节点之间可以 “直接” 通讯&lt;/li&gt;
&lt;li&gt;节点间歇性接入网络&lt;/li&gt;
&lt;li&gt;节点可能改变 IP 地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;P2P 节点能遍布整个互联网，也给包括开发者在内的任何人、组织或政府带来监控难题。P2P 在 &lt;code&gt;网络隐私要求高&lt;/code&gt; 和 &lt;code&gt;文件共享&lt;/code&gt; 领域中，得到了广泛的应用。使用一般型 P2P 技术的网络系统有比特币、Gnutella 或自由网等。另外，P2P 技术也被使用在类似 VoIP 等实时媒体业务的数据通信中。有些网络（如  &lt;code&gt;Napster&lt;/code&gt; 、OpenNAP、IRC @find）使用 &lt;code&gt;客户端-服务器结构&lt;/code&gt; 实现包括搜索的一些功能，而使用 &lt;code&gt;P2P结构&lt;/code&gt; 来实现另外一些功能。这种网络设计模型不同于客户端 - 服务器模型，在客户端 - 服务器模型中通信通常来往于一个中央服务器。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;混合结构hybrid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#混合结构hybrid&#34;&gt;#&lt;/a&gt; 混合结构（Hybrid）&lt;/h2&gt;
&lt;p&gt;将两种结构混合在一起使用，利用两者的优点同时规避两者的缺点。如  &lt;code&gt;Napster&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_0.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;网络应用进程通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用进程通信&#34;&gt;#&lt;/a&gt; 网络应用进程通信&lt;/h1&gt;
&lt;h2 id=&#34;进程间通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间通信&#34;&gt;#&lt;/a&gt; 进程间通信&lt;/h2&gt;
&lt;p&gt;进程间通信是网络应用的基础，而 &lt;code&gt;进程&lt;/code&gt; 是主机上运行的 &lt;code&gt;程序&lt;/code&gt; ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行在 &lt;code class=&#34;blue&#34;&gt;同一主机上&lt;/code&gt; 的进程之间通过由操作系统提供的 &lt;code class=&#34;aqua&#34;&gt;进程间通信机制&lt;/code&gt; 进行通信；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行在 &lt;code class=&#34;red&#34;&gt;不同主机上&lt;/code&gt; 的进程之间通过 &lt;code class=&#34;orange&#34;&gt;消息交换（报文交换）&lt;/code&gt; 进行通信。&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;note danger no-icon&#34;&gt;
&lt;p&gt;在&lt;span class=&#34;red&#34;&gt;任一特定的情景&lt;/span&gt;下，互相通信的一对进程总是可以被分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户机进程 (&lt;em&gt;client process&lt;/em&gt;)： &lt;code class=&#34;red&#34;&gt;发起通信&lt;/code&gt; 的进程；&lt;/li&gt;
&lt;li&gt;服务器进程 (&lt;em&gt;server process&lt;/em&gt;)： &lt;code class=&#34;aqua&#34;&gt;等待通信请求&lt;/code&gt; 的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;采用 &lt;code&gt;P2P架构&lt;/code&gt; 的应用也需要通过 “消息交换”，同样存在客户机进程与服务器进程之分。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息交换的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息交换的实现&#34;&gt;#&lt;/a&gt; 消息交换的实现&lt;/h2&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;网络应用的信息交换实际上是 &lt;code&gt;进程间的消息交换&lt;/code&gt; （通过 socket 套接口），需要实现对 &lt;code&gt;进程的寻址&lt;/code&gt; （IP 地址 + 端口号），消息的具体交换遵循的是 &lt;code&gt;应用层协议&lt;/code&gt; （如 HTTP、SMTP）。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Socket 套接字：进程间通信利用 &lt;code&gt;socket&lt;/code&gt;  发送 / 接受信息实现&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以类比于寄信，socket 套接字接口是 &lt;code class=&#34;aqua&#34;&gt;“门”&lt;/code&gt; ，而硬件基础设施、网络协议栈（传输层及以下）等是 “门外” 的 &lt;code class=&#34;orange&#34;&gt;传输基础设施&lt;/code&gt; ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方将消息送到门外邮箱&lt;/li&gt;
&lt;li&gt;发送方依赖（门外的）传输基础设施将消息传到接收方所在主机，并送到接收方的门外&lt;/li&gt;
&lt;li&gt;接收方从门外获取消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_1.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;purple&#34;&gt;操作系统&lt;/code&gt; 向进程提供 API（应用编程接口，即套接字 socket）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序员能控制&lt;span class=&#34;blue&#34;&gt; socket 应用层端&lt;/span&gt; 的所有细节，但对于&lt;span class=&#34;orange&#34;&gt; socket 传输层端&lt;/span&gt; 只有很少的控制，其支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;传输层协议&lt;/code&gt; 的选择（TCP 或 UDP）&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可能有的几个 &lt;code class=&#34;pink&#34;&gt;传输层参数&lt;/code&gt; 的设置（如最大缓冲区、最大  &lt;code&gt;segment&lt;/code&gt;  长度）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程寻址：实现不同主机上的进程间通信，每个进程必须拥有 &lt;code class=&#34;aqua&#34;&gt;标识符&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络层上的 &lt;code&gt;IP地址&lt;/code&gt; ，能唯一标识 Internet 上的一台主机；&lt;/li&gt;
&lt;li&gt;操作系统为主机上每个需要通信的进程分配了一个 &lt;code&gt;端口号（Port number）&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，进程的标识符由  &lt;code&gt;IP 地址 + 端口号&lt;/code&gt; 组成，能唯一标识一个 “网络上的进程”。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_2.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;使用特定知名协议的应用，有其约定的端口号，不能随便使用（其他 0~65536 可用来做自己的网络应用）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP Server&lt;/code&gt; ：80（Web 应用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mail Server&lt;/code&gt; ：25&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层协议：网络应用需遵循应用层协议，完成消息的具体交换。&lt;br /&gt;
网络应用可根据所使用的协议分为两类，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;公开协议&lt;/code&gt; ：由 &lt;code&gt;RFC(Request For Comments)&lt;/code&gt;  定义，公开的标准、规范，允许互操作。如  &lt;code&gt;HTTP&lt;/code&gt; , &lt;code&gt;SMTP&lt;/code&gt;  等&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;pink&#34;&gt;私有协议&lt;/code&gt; ：多数 P2P 文件共享应用&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;应用层协议的内容：（协议三要素）
&lt;ul&gt;
&lt;li&gt;消息的 &lt;code class=&#34;aqua&#34;&gt;类型（type）&lt;/code&gt; ：如请求消息 / 响应消息？&lt;/li&gt;
&lt;li&gt;消息的 &lt;code class=&#34;pink&#34;&gt;语法（syntax）&lt;/code&gt; ：消息中有哪些字段（fields）？每个字段如何描述？&lt;/li&gt;
&lt;li&gt;字段的 &lt;code class=&#34;blue&#34;&gt;语义（semantics）&lt;/code&gt; ：字段中信息的含义。&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;规则（rules）&lt;/code&gt; ：进程何时发送 / 响应消息，进程如何发送 / 响应消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;传输层所提供的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层所提供的服务&#34;&gt;#&lt;/a&gt; 传输层所提供的服务&lt;/h1&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;消息交换不是应用层自己做的， &lt;code&gt;传输层&lt;/code&gt; 及之下的各层共同完成传输服务。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;网络应用对传输服务的需求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用对传输服务的需求&#34;&gt;#&lt;/a&gt; 网络应用对传输服务的需求&lt;/h2&gt;
&lt;p&gt;传输层可提供的服务大致地可分为三类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;可靠数据传输(reliable data transfer)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;某些网络应用能够容忍一定的数据丢失。
&lt;ul&gt;
&lt;li&gt;网络电话，网络视频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;某些网络应用要求 100% 可靠的数据传输。
&lt;ul&gt;
&lt;li&gt;文件传输，telnet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;时间(timing)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;有些应用只有在延迟足够低时才 “有效”。
&lt;ul&gt;
&lt;li&gt;网络电话，网络游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;吞吐量(throughput)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;某些应用只有在带宽达到最低要求时才 “有效”。如网络视频&lt;/li&gt;
&lt;li&gt;某些应用能够适应任何带宽 ——  &lt;code&gt;弹性应用（elastic）&lt;/code&gt; 。如 email，为异步应用，没有太多时间上的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;internet-提供的传输服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#internet-提供的传输服务&#34;&gt;#&lt;/a&gt; Internet 提供的传输服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP 服务
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;面向连接&lt;/code&gt; ：客户机 / 服务器进程间需要建立连接（全双工）&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;可靠传输&lt;/code&gt; ：能够把底层的不可靠转变为可靠。&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;流量控制&lt;/code&gt; ：发送方不会发送速度过快，超过接收方的处理能力&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;拥塞控制&lt;/code&gt; ：当网络负载过重时能够限制发送方的发送速度（对整个网络起作用）&lt;/li&gt;
&lt;li&gt;不提供时间 / 延迟保障&lt;/li&gt;
&lt;li&gt;不提供最小带宽保障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP 服务
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;无连接&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;不可靠的数据传输&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不提供：可靠性保障、流量控制、拥塞控制、延迟保障、带宽保障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;UDP 这么多功能都不提供，为什么使用？&lt;/p&gt;
&lt;p&gt;答：UDP 服务做了任何一个传输层服务都要做的基本的事，除此之外不做任何事。它提供了最大的 “自由”，即网络层基本的服务穿透过来了，留给 “应用程序” 发挥的空间，即掌控数据传输的能力。（后面会学到的 &lt;code&gt;QUIC&lt;/code&gt;  协议便是基于 UDP 的）&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;web-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-应用&#34;&gt;#&lt;/a&gt; Web 应用&lt;/h1&gt;
&lt;h2 id=&#34;万维网world-wide-web&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#万维网world-wide-web&#34;&gt;#&lt;/a&gt; 万维网（World Wide Web）&lt;/h2&gt;
&lt;p&gt;最基本的构成要素是 &lt;code class=&#34;aqua&#34;&gt;网页(Web Page)&lt;/code&gt; ，所有的网页之间&lt;span class=&#34;pink&#34;&gt;互相链接&lt;/span&gt;。网页包含多个 &lt;code class=&#34;orange&#34;&gt;对象(objects)&lt;/code&gt; ，其构成为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;对象&lt;/code&gt; ：HTML 文件、JPEG 图片、视频文件、动态脚本等，丰富多彩；&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;purple&#34;&gt;基本HTML文件&lt;/code&gt; ：包含对其他对象 &lt;code&gt;引用&lt;/code&gt; 的链接，是每个网页都有的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;对象的寻址通过 &lt;code&gt;URL(Uniform Resoure Locator, 统一资源定位器)&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本格式： &lt;code&gt;Scheme://host:port/path&lt;/code&gt; ， &lt;code&gt;Scheme&lt;/code&gt;  为协议，省略时默认为  &lt;code&gt;http://&lt;/code&gt; ，host 为主机 (域名 / IP 地址)，port 为端口号，path 为路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL 提供了一种机制，使得万维网上所有的资源都有了 &lt;code&gt;唯一的标识符&lt;/code&gt; ，由此它们之间可以互相链接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;http-协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-协议&#34;&gt;#&lt;/a&gt; HTTP 协议&lt;/h2&gt;
&lt;p&gt;万维网应用所遵循的协议，称为 &lt;code class=&#34;blue&#34;&gt;超文本传输协议(HyperText Transfer Protocol)&lt;/code&gt; 。协议采用的是 &lt;code class=&#34;purple&#34;&gt;客户机/服务器架构&lt;/code&gt; ，其&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;blue&#34;&gt;客户端&lt;/span&gt;： &lt;code class=&#34;aqua&#34;&gt;浏览器(Browser)&lt;/code&gt; ，请求、接收、展示 Web 对象；&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;red&#34;&gt;服务器&lt;/span&gt;： &lt;code class=&#34;pink&#34;&gt;Web Server&lt;/code&gt; ，响应客户的请求，发送对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-使用的传输层协议tcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-使用的传输层协议tcp&#34;&gt;#&lt;/a&gt; HTTP 使用的传输层协议：TCP&lt;/h3&gt;
&lt;p&gt;浏览器 (HTTP 客户端) 与服务器 (HTTP 服务器) 的通信过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器在 &lt;code class=&#34;red&#34;&gt;80 端口&lt;/code&gt; 等待客户的请求&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;浏览器发起&lt;/code&gt; 到服务器的 TCP 连接&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;pink&#34;&gt;服务器接受&lt;/code&gt; 来自浏览器的 TCP 连接&lt;/li&gt;
&lt;li&gt;浏览器与 Web 服务器&lt;span class=&#34;blue&#34;&gt;交换 HTTP 消息&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;red&#34;&gt;关闭 TCP 连接&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;HTTP 应用协议是一个 &lt;code&gt;无状态协议&lt;/code&gt; ：服务器不维护任何有关客户端过去所发请求的信息。&lt;/p&gt;
&lt;p&gt;有状态的协议更复杂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需维护状态（历史信息）；&lt;/li&gt;
&lt;li&gt;如果 client 或 server 失效，会产生状态的不一致，解决这种不一致代价高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id=&#34;http-连接的两种类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-连接的两种类型&#34;&gt;#&lt;/a&gt; HTTP 连接的两种类型&lt;/h3&gt;
&lt;p&gt;对 TCP 的两种使用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;非持久性连接(Nonpersistent HTTP)&lt;/code&gt; ：每个 TCP 连接 &lt;code class=&#34;blue&#34;&gt;最多允许传输一个对象&lt;/code&gt; ，HTTP 1.0 版本使用非持久性连接。&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;持久性连接(Persistent HTTP)&lt;/code&gt; ：每个 TCP 连接 &lt;code class=&#34;orange&#34;&gt;允许传输多个对象&lt;/code&gt; ，HTTP 1.1 版本默认使用持久性连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;非持久性连接过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非持久性连接过程&#34;&gt;#&lt;/a&gt; 非持久性连接过程&lt;/h4&gt;
&lt;p&gt;假定用户在浏览器中输入 URL  &lt;code class=&#34;pink&#34;&gt;http://www.someschool.edu/someDepartment/home.index&lt;/code&gt; ， &lt;code class=&#34;orange&#34;&gt;home.index&lt;/code&gt;  包含文本和  &lt;code&gt;10&lt;/code&gt;  个 指向 jpeg 图片的链接。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_3.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;响应时间分析与建模&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应时间分析与建模&#34;&gt;#&lt;/a&gt; 响应时间分析与建模&lt;/h4&gt;
&lt;p&gt;定义 &lt;code&gt;往返时间 RTT (Round Trip Time)&lt;/code&gt;  为从客户端发送一个 &lt;code class=&#34;aqua&#34;&gt;很小的数据包&lt;/code&gt; 到服务器并返回所经历的时间（包括分组的传输时延、排队时延和处理时延）。则从浏览器输入 URL 回车（发送请求）到最后得到文件的 &lt;code class=&#34;purple&#34;&gt;响应时间 (Response time)&lt;/code&gt;  包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起、建立  &lt;code class=&#34;aqua&#34;&gt;TCP 连接&lt;/code&gt; ：1 个 RTT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;发送 HTTP 请求消息&lt;/code&gt; 到 HTTP 响应消息的 &lt;code&gt;前几个字节到达&lt;/code&gt; ：1 个 RTT&lt;/li&gt;
&lt;li&gt;响应消息中所含的文件 / 对象传输时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是，总的响应时间为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mtext&gt;total &lt;/mtext&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mtext&gt; 文件发送时间 &lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;t_{\text {total }}=2 \times R T T+\text { 文件发送时间 }
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76508em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.33610799999999996em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord text mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;total &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord text&#34;&gt;&lt;span class=&#34;mord&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;文件发送时间&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;非持久性连接的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非持久性连接的问题&#34;&gt;#&lt;/a&gt; 非持久性连接的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;red&#34;&gt;每个对象&lt;/span&gt;需要 &lt;code&gt;2个RTT&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;理论上，该问题总共需要 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;22&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2 + 10 \times 2  = 22&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个 RTT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;aqua&#34;&gt;操作系统&lt;/span&gt;需要为每个 TCP 连接 &lt;code class=&#34;blue&#34;&gt;开销资源&lt;/code&gt; （overhead）&lt;/li&gt;
&lt;li&gt;浏览器会打开多个 &lt;code class=&#34;orange&#34;&gt;并行&lt;/code&gt; 的 TCP 连接以获取网页所需对象，但这会给服务器带来巨大的负担。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;TCP 连接是 &lt;code&gt;宝贵的资源&lt;/code&gt; ，建立 TCP 连接是有代价的。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;持久性连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#持久性连接&#34;&gt;#&lt;/a&gt; 持久性连接&lt;/h3&gt;
&lt;p&gt;发送响应后，服务器&lt;span class=&#34;red&#34;&gt;保持 TCP 连接&lt;/span&gt;的打开，后续的 HTTP 消息可以通过这个连接发送。&lt;/p&gt;
&lt;p&gt;按照是否采用 &lt;code class=&#34;blue&#34;&gt;流水机制（pipelining）&lt;/code&gt; ，持久性连接可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;orange&#34;&gt;无流水机制&lt;/code&gt; 的持久性连接：客户端只有&lt;span class=&#34;purple&#34;&gt;收到前一个响应后&lt;/span&gt;才发送新的请求， &lt;code class=&#34;red&#34;&gt;每个被引用的对象&lt;/code&gt; 耗时 1 个 RTT。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理论上，该问题总共需要 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2 + 10 \times 1  = 12&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个 RTT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;aqua&#34;&gt;带有流水机制&lt;/code&gt; 的持久性连接：客户端&lt;span class=&#34;blue&#34;&gt;只要遇到一个引用对象&lt;/span&gt;就尽快发出请求，HTTP 1.1 的默认选项。&lt;/p&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;理想情况下，收到所有的引用对象只需耗时约  &lt;code&gt;1个RTT&lt;/code&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;理论上，该问题总共需要 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2 + 1  = 3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个 RTT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http-的消息格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的消息格式&#34;&gt;#&lt;/a&gt; HTTP 的消息格式&lt;/h2&gt;
&lt;p&gt;HTTP 协议有两类消息： &lt;code class=&#34;aqua&#34;&gt;请求消息&lt;/code&gt; 和 &lt;code class=&#34;pink&#34;&gt;响应消息&lt;/code&gt; ，均采用  &lt;code&gt;ASCII&lt;/code&gt;  码编写，供人类直接阅读。&lt;/p&gt;
&lt;h3 id=&#34;请求消息-request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求消息-request&#34;&gt;#&lt;/a&gt; 请求消息 (request)&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_4.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;aqua&#34;&gt;Request line&lt;/code&gt;  请求行：各版本的  &lt;code&gt;method&lt;/code&gt;  方法，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/1.0： &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;POST&lt;/code&gt; 、 &lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTP/1.1：除上述三种外，增加了  &lt;code&gt;PUT&lt;/code&gt;  和  &lt;code&gt;DELETE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; ：请求服务器不要将所请求的对象放入响应消息中；（用作测试）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt; ：将消息体中的文件上传到 URL 字段所指定的路径；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; ：删除 URL 字段所指定的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;blue&#34;&gt;Header lines&lt;/code&gt;  头部行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_5.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;red&#34;&gt;Entity body&lt;/code&gt;  消息体&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;上传输入的方法：从客户端（cilent）到服务器（server）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST 方法：在请求消息的 &lt;code&gt;消息体 (entity body) &lt;/code&gt; 中上传客户端的输入。&lt;/li&gt;
&lt;li&gt;URL 方法：使用 GET 方法，输入信息通过 request line 的  &lt;code&gt;URL 字段&lt;/code&gt; 上传，适用于信息较少的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;响应消息-response&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应消息-response&#34;&gt;#&lt;/a&gt; 响应消息 (response)&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_6.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;aqua&#34;&gt;Status line&lt;/code&gt;  状态行： &lt;code&gt;status code&lt;/code&gt;  响应状态代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;purple&#34;&gt;Header lines&lt;/code&gt;  头部行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_8.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cookie-技术客户端状态信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie-技术客户端状态信息&#34;&gt;#&lt;/a&gt; Cookie 技术：客户端状态信息&lt;/h2&gt;
&lt;p&gt;HTTP 是无状态协议，但很多应用需要服务器掌握客户端的状态（会话状态，如网上购物）。&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;Cookie 是某些网站为了 &lt;code&gt;辨别用户身份&lt;/code&gt; 、进行 &lt;code&gt;session 跟踪&lt;/code&gt; ，而存储在用户本地终端上的数据（通常经过加密）。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Cookie 的组件（架设在 HTTP 上）
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HTTP 响应消息的 cookie 头部行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 请求消息的 cookie 头部行&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;可见，HTTP 消息的头部行是 &lt;code&gt;可扩展的&lt;/code&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存在客户端主机上的 &lt;span class=&#34;aqua&#34;&gt;cookie 文件&lt;/span&gt;，由浏览器管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web 服务器端的&lt;span class=&#34;purple&#34;&gt;后台数据库&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Cookie 的原理（通信过程）&lt;br /&gt;
服务器端将在客户端初次访问时为其创建 cookie ID（存放在后台数据库），并在返回的响应中增加 Set-cookie 头部行。之后客户端的每次请求中，都带有 cookie 的头部行，服务器收到含有 cookie 头部行的请求，将执行 cookie-specific 即用户特定的动作，以根据客户的状态提供相应的信息。cookie 存储在用户本地终端上，所以一段时间后再次和服务器通信时，服务器仍能读取该客户端的状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_9.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Cookie 的作用：身份认证，保留购物车、推荐等用户会话状态信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web-缓存代理服务器技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-缓存代理服务器技术&#34;&gt;#&lt;/a&gt; Web 缓存 / 代理服务器技术&lt;/h2&gt;
&lt;p&gt;在&lt;span class=&#34;red&#34;&gt;不访问服务器&lt;/span&gt;的前提下满足客户端的 HTTP 请求。&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;为什么要发明这种技术？（性能角度，而 cookie 是从功能角度）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩短客户请求的响应时间&lt;/li&gt;
&lt;li&gt;减少机构 / 组织的流量&lt;/li&gt;
&lt;li&gt;在大范围内（Internet）实现有效的内容分发&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户端使用代理服务器的过程：&lt;br /&gt;
&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_10.png&#34; alt=&#34;Untitled&#34; width=&#34;400px&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户设定浏览器通过 &lt;code class=&#34;aqua&#34;&gt;缓存（代理服务器）&lt;/code&gt; 进行 Web 访问&lt;/li&gt;
&lt;li&gt;浏览器向代理服务器发送 &lt;code class=&#34;red&#34;&gt;所有的HTTP请求&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;如果所请求对象在缓存中（称为 &lt;code class=&#34;blue&#34;&gt;缓存命中&lt;/code&gt; ），缓存返回对象&lt;/li&gt;
&lt;li&gt;否则，缓存服务器向 &lt;code class=&#34;orange&#34;&gt;原始服务器&lt;/code&gt; 发送 HTTP 请求，获取对象，然后返回给客户端并&lt;span class=&#34;red&#34;&gt;保存该对象&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;代理服务器（缓存）既充当 &lt;code&gt;客户端&lt;/code&gt; ，也充当 &lt;code&gt;服务器&lt;/code&gt; 。一般由组织或 ISP（Internet 服务提供商）架设。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能分析&lt;br /&gt;
&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_11.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;代理服务器，也是计算机领域中广泛使用的 &lt;code class=&#34;auqa&#34;&gt;缓存技术&lt;/code&gt; （具有普遍性的设计思想）的一种实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决同步问题（存放在代理服务器的对象副本可能是陈旧的）&lt;/p&gt;
&lt;p&gt;HTTP 协议中的 &lt;code class=&#34;aqua&#34;&gt;条件GET (conditional GET)&lt;/code&gt;  方法：如果缓存有最新的版本，则不需要发送请求对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;blue&#34;&gt;代理服务器&lt;/span&gt;：在 HTTP 请求消息中声明 &lt;code class=&#34;orange&#34;&gt;所持有版本&lt;/code&gt; 的日期。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;If-modified-since: &amp;lt;date&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;purple&#34;&gt;原始服务器&lt;/span&gt;：如果缓存的版本是最新的，则响应消息中 &lt;code class=&#34;red&#34;&gt;不包含对象&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP/1.0 304 Not Modified&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;email-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#email-应用&#34;&gt;#&lt;/a&gt; Email 应用&lt;/h1&gt;
&lt;h2 id=&#34;email-应用的构成组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#email-应用的构成组件&#34;&gt;#&lt;/a&gt; Email 应用的构成组件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;aqua&#34;&gt;邮件客户端 (user agent)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读、写 Email 消息（网络应用，也有  &lt;code&gt;Web 形式&lt;/code&gt; 的客户端，如 QQ-Mail）&lt;/li&gt;
&lt;li&gt;与服务器交互，收、发 Email 消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blue&#34;&gt;邮件服务器 (Mail server)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;orange&#34;&gt;邮箱&lt;/code&gt; ：存储发给该用户的 Email&lt;/p&gt;
&lt;p&gt;不在线仍然可以发邮件，存储在邮件服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;purple&#34;&gt;消息队列(message queue)&lt;/code&gt; ：存储等待发送的 Email&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;采用 Mail Server ，而不是客户端之间直接发送 Email 的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邮件客户端（手机 / 电脑）不能保证 7 * 24 小时在线&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;Email 应用是典型的  &lt;code&gt;“异步” 应用&lt;/code&gt; ，即 &lt;code&gt;发送方发送&lt;/code&gt; 和 &lt;code&gt;接收方接受&lt;/code&gt; 并不需要同时。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;SMTP 协议 (Simple Mail Transfer Protocol)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;邮件服务器&lt;/code&gt; 之间传递消息所使用的协议&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;blue&#34;&gt;客户端&lt;/span&gt;：发送消息的服务器&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;red&#34;&gt;服务器&lt;/span&gt;：接收消息的服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;smtp-协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#smtp-协议&#34;&gt;#&lt;/a&gt; SMTP 协议&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;TCP&lt;/code&gt;  进行 Email 消息的可靠传输（端口 25）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;传输过程的三个阶段：&lt;span class=&#34;blue&#34;&gt;握手&lt;/span&gt; → &lt;span class=&#34;orange&#34;&gt;消息的传输&lt;/span&gt; → &lt;span class=&#34;aqua&#34;&gt;关闭&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;命令 / 响应&lt;/span&gt;交互模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;aqua&#34;&gt;命令（command）&lt;/code&gt; ：ASCII 文本&lt;/p&gt;
&lt;p&gt;由于历史原因，Email 消息只能包含 7 位  &lt;code&gt;ASCII码&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;Email 是非常古老的应用，在设计之初并没有多媒体，只有文本。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;pink&#34;&gt;响应(response)&lt;/code&gt; ：状态代码和语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器与客户端交互过程示例：&lt;br /&gt;
&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_12.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SMTP 协议的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;持久性连接&lt;/code&gt; （TCP 协议）&lt;/li&gt;
&lt;li&gt;要求消息必须由 7 位  &lt;code&gt;ASCII 码&lt;/code&gt; 构成&lt;/li&gt;
&lt;li&gt;SMTP 服务器利用  &lt;code&gt;CRLF.CRLF&lt;/code&gt;  确定消息的结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STMP 与 HTTP 对比：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都使用 &lt;code class=&#34;orange&#34;&gt;命令/ 响应&lt;/code&gt; 交互模式 ，命令和状态代码都是 ASCII 码&lt;/li&gt;
&lt;li&gt;HTTP 协议： &lt;code class=&#34;blue&#34;&gt;拉式（pull）&lt;/code&gt; ，把网页 “拉” 回本地；每个对象封装在独立的响应消息中。&lt;/li&gt;
&lt;li&gt;SMTP 协议： &lt;code class=&#34;aqua&#34;&gt;推式（push）&lt;/code&gt; ，发出 Email 邮件信息；多个对象在由多个部分构成的消息中发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;email-的消息格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#email-的消息格式&#34;&gt;#&lt;/a&gt; Email 的消息格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SMTP 协议：Email 消息的传输 / 交换协议（RFC 822：文本消息格式标准）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;头部行(header)&lt;/code&gt; ：&lt;span class=&#34;blue&#34;&gt;To&lt;/span&gt;、&lt;span class=&#34;orange&#34;&gt;From&lt;/span&gt;、&lt;span class=&#34;aqua&#34;&gt;Subject（邮件主题）&lt;/span&gt;，与 SMTP 命令不同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;消息体(body)&lt;/code&gt; ：消息本身，只能是 ASCII 字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIME 协议：&lt;span class=&#34;pink&#34;&gt;多媒体邮件扩展&lt;/span&gt;（RFC 2045, 2056）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过在邮件头部 &lt;code class=&#34;aqua&#34;&gt;增加额外的行&lt;/code&gt; 以声明 MIME 的内容类型&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_13.png&#34; alt=&#34;Untitled&#34; width=&#34;500px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;回顾 MIME 协议以及 cookie 的实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过在消息的 &lt;code&gt;头部行&lt;/code&gt; 中，增加新的行实现对应用的 &lt;code&gt;拓展&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;计算机领域中， &lt;code&gt;编码解码&lt;/code&gt; 应用也在网络中被普遍使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;邮件访问协议从服务器获取邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#邮件访问协议从服务器获取邮件&#34;&gt;#&lt;/a&gt; 邮件访问协议：从服务器获取邮件&lt;/h2&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;一个应用可以使用 &lt;code&gt;不止一个协议&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邮件客户端向邮件服务器 &lt;code&gt;发送邮件&lt;/code&gt; ：使用 SMPT&lt;/li&gt;
&lt;li&gt;邮件客户端从邮件服务器 &lt;code&gt;接收邮件&lt;/code&gt; ：使用 “邮件访问协议”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;POP 协议（无状态协议）： &lt;code class=&#34;aqua&#34;&gt;邮局协议（Post Office Protocol）&lt;/code&gt; ，是 TCP/IP 协议族中的一员。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主要用于支持使用客户端远程管理在服务器上的电子邮件。（认证 / 授权和下载，&lt;span class=&#34;red&#34;&gt;认证过程&lt;/span&gt; → &lt;span class=&#34;blue&#34;&gt;事务阶段&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_14.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POP 支持 &lt;code&gt;离线邮件处理&lt;/code&gt; ，其具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。&lt;/p&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这种离线访问模式是一种 &lt;code&gt;存储转发&lt;/code&gt; 服务，将邮件从邮件服务器端送到个人终端机器上，一般是 PC 机或 Mac。&lt;/p&gt;
&lt;p&gt;一旦邮件下载到 PC 机或 Mac 上，邮件服务器上的邮件将会 &lt;code&gt;被删除&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但目前的  &lt;code&gt;POP3&lt;/code&gt;  邮件服务器大都可以  &lt;code&gt;“只下载邮件，服务器端并不删除”&lt;/code&gt; ，也就是改进的 POP3 协议。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“下载并删除” 模式：用户如果换了客户端软件，无法重读该邮件&lt;/li&gt;
&lt;li&gt;“下载并保持” 模式：不同客户端都可以保留消息的拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最新版本为  &lt;code&gt;POP3&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IMAP 协议（有状态协议）： &lt;code class=&#34;pink&#34;&gt;因特网信息访问协议&lt;/code&gt; （&lt;em&gt;Internet Mail Access Protocol&lt;/em&gt;），是一个应用层协议，用来从 &lt;code class=&#34;aqua&#34;&gt;本地邮件客户端&lt;/code&gt; （如 Microsoft Outlook、Foxmail）访问远程服务器上的邮件。&lt;/p&gt;
&lt;p&gt;相较于 POP3，更多功能、更加复杂、能够操纵服务器上存储的消息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有消息统一保存在一个地方：服务器&lt;/li&gt;
&lt;li&gt;允许用户利用文件夹组织消息&lt;/li&gt;
&lt;li&gt;IMAP 支持跨会话（Session）的用户状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 协议：浏览器本身也是一种邮件客户端，基于 Web 的 email 应用如 163、QQ Mail 等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;dns-服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-服务&#34;&gt;#&lt;/a&gt; DNS 服务&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;&lt;strong class=&#34;blue&#34;&gt;域名系统&lt;/strong&gt;（英语：&lt;em&gt;Domain Name System&lt;/em&gt;，缩写： &lt;code&gt;DNS&lt;/code&gt; ）是互联网的一项服务，它作为将 &lt;code class=&#34;blue&#34;&gt;域名&lt;/code&gt; 和  &lt;code class=&#34;red&#34;&gt;IP 地址&lt;/code&gt; 相互映射的一个 &lt;code class=&#34;aqua&#34;&gt;分布式数据库&lt;/code&gt; ，能够使人更方便地访问互联网。（IP 地址本身是数字，不易于人类使用，而域名相对来说可读性更好）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 域名解析系统，是由&lt;span class=&#34;pink&#34;&gt;多层命名服务器&lt;/span&gt;构成的 &lt;code class=&#34;red&#34;&gt;分布式数据库&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DNS 本身也是 &lt;code class=&#34;blue&#34;&gt;应用层协议&lt;/code&gt; ，由应用层上的软件负责完成名字的解析，
&lt;ul&gt;
&lt;li&gt;Internet 的核心功能，用应用层协议实现&lt;/li&gt;
&lt;li&gt;网络边界复杂，分布式而不使用集中式的原因：&lt;br /&gt;
集中式存在单点失败问题、流量问题、距离问题和维护性问题，不可伸缩，不适合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS 提供的服务：
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;blue&#34;&gt;域名&lt;/span&gt;向 &lt;span class=&#34;red&#34;&gt;IP 地址&lt;/span&gt;的翻译&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;aqua&#34;&gt;别名服务&lt;/span&gt;：主机别名、邮件服务器别名&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;purple&#34;&gt;负载均衡&lt;/span&gt;：Web 服务器，提供多个映射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分布式层次式数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式层次式数据库&#34;&gt;#&lt;/a&gt; 分布式层次式数据库&lt;/h2&gt;
&lt;p&gt;客户端想要查询  &lt;code&gt;www.amazon.com&lt;/code&gt;  的 IP 地址：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_15.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端查询 &lt;code class=&#34;aqua&#34;&gt;根服务器&lt;/code&gt; ，找到 com 域名解析服务器&lt;/li&gt;
&lt;li&gt;客户端查询  &lt;code class=&#34;red&#34;&gt;com 域名解析服务器&lt;/code&gt; ，找到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FtYXpvbi5jb20=&#34;&gt;amazon.com&lt;/span&gt; 域名解析服务器&lt;/li&gt;
&lt;li&gt;客户端查询  &lt;code class=&#34;purple&#34;&gt;amazon.com 域名解析服务器&lt;/code&gt; ，获得 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5hbWF6b24uY29t&#34;&gt;www.amazon.com&lt;/span&gt; 的 IP 地址&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;orange&#34;&gt;根域名服务器 (Root DNS servers)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;本地域名解析服务器&lt;/code&gt; 无法解析域名时，访问 &lt;code class=&#34;red&#34;&gt;根域名服务器&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;根域名服务器如果不知道映射，则访问权威域名服务器获得映射，再向本地域名服务器返回映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_16.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;aqua&#34;&gt;顶级域名服务器 TLD (&lt;em&gt;Top-Level Domain&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
 负责  &lt;code&gt;com&lt;/code&gt; 、 &lt;code&gt;org&lt;/code&gt; 、 &lt;code&gt;net&lt;/code&gt; 、 &lt;code&gt;edu&lt;/code&gt;  等顶级域名和  &lt;code&gt;cn, uk, fr&lt;/code&gt;  等国家顶级域名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Network Solutions&lt;/code&gt;  维护 com 顶级域名服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Educause&lt;/code&gt;  维护 edu 顶级域名服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;pink&#34;&gt;权威 (Authoritative) 域名服务器&lt;/span&gt;：组织的域名解析服务器，提供组织内部服务器 (本地化，自治) 的解析服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组织自己负责维护，或委托&lt;/li&gt;
&lt;li&gt;服务提供商负责维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blue&#34;&gt;本地域名解析服务器&lt;/span&gt;（ &lt;code&gt;不严格属于&lt;/code&gt; 层级体系）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由 ISP 提供，每个 ISP 都有一个本地域名服务器，又称默认域名解析服务器&lt;/li&gt;
&lt;li&gt;当主机进行 DNS 查询时，查询被发送到本地域名服务器，作为代理将查询转发给 (层级式) 域名解析服务器系统，或利用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns-查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-查询&#34;&gt;#&lt;/a&gt; DNS 查询&lt;/h2&gt;
&lt;p&gt;存在两种查询方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;blue&#34;&gt;迭代查询&lt;/span&gt;：被查询服务器返回域名解析服务器的名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;red&#34;&gt;递归查询&lt;/span&gt;：将域名解析的任务交给所联系的服务器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_18.png&#34; alt=&#34;Untitled&#34; height=&#34;400px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;dns-记录缓存和更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-记录缓存和更新&#34;&gt;#&lt;/a&gt; DNS 记录缓存和更新&lt;/h2&gt;
&lt;p&gt;只要域名解析服务器获得 &lt;code class=&#34;aqua&#34;&gt;域名-IP 映射&lt;/code&gt; ，即 &lt;code class=&#34;red&#34;&gt;缓存&lt;/code&gt; 这一映射&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一段时间过后，缓存条目失效（删除）&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;本地域名服务器&lt;/code&gt; 一般会缓存顶级域名服务器的映射，因此根域名服务器 &lt;code class=&#34;orange&#34;&gt;不经常被访问&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns-记录和消息格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-记录和消息格式&#34;&gt;#&lt;/a&gt; DNS 记录和消息格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[资源记录 (RR, &lt;em&gt;resource records&lt;/em&gt;)]： &lt;code class=&#34;aqua&#34;&gt;RR format: (name, value, type, ttl)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不同的类型对  &lt;code&gt;name&lt;/code&gt;  和  &lt;code&gt;value&lt;/code&gt;  的解释不同：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;最基本的主机到 IP 地址的映射&lt;/td&gt;
&lt;td&gt;主机域名&lt;/td&gt;
&lt;td&gt;IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NS&lt;/td&gt;
&lt;td&gt;权威域名解析服务器&lt;/td&gt;
&lt;td&gt;域（如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2VkdS5jbg==&#34;&gt;edu.cn&lt;/span&gt;）&lt;/td&gt;
&lt;td&gt;该域权威域名解析服务器的主机域名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CNAME&lt;/td&gt;
&lt;td&gt;实现别名服务&lt;/td&gt;
&lt;td&gt;某一真实域名的别名&lt;/td&gt;
&lt;td&gt;Value：真实域名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MX&lt;/td&gt;
&lt;td&gt;邮件服务器&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;与 name 相对应的邮件服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 协议： &lt;code class=&#34;blue&#34;&gt;查询/回复&lt;/code&gt; 模式，查询（query）和回复（reply）的 &lt;code class=&#34;orange&#34;&gt;消息格式相同&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;消息头部
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Identification&lt;/code&gt; ：16 位查询编号，回复使用相同的编号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flags&lt;/code&gt; ：查询或回复、期望递归、递归可用、权威回答&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_19.png&#34; alt=&#34;Untitled&#34; width=&#34;600px&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;p2p-应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p-应用&#34;&gt;#&lt;/a&gt; P2P 应用&lt;/h1&gt;
&lt;h2 id=&#34;文件分发场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件分发场景&#34;&gt;#&lt;/a&gt; 文件分发场景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;C/S 架构&lt;/code&gt;  v.s.  &lt;code&gt;P2P 架构&lt;/code&gt; ：从一个服务器向 N 个节点分发一个文件需要多长时间？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_21.png&#34; alt=&#34;Untitled&#34; width=&#34;500px&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;aqua&#34;&gt;C/S 架构&lt;/code&gt; ：服务器 &lt;code&gt;串行地&lt;/code&gt; 发送 N 个副本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成文件分发所需的时间：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;max&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;{&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;/mrow&gt;&lt;msub&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;min&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo fence=&#34;true&#34;&gt;}&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_{c s}=\max \left\{\frac{N F}{u_{s}}, \frac{F}{d_{\min }}\right\}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.80002em;vertical-align:-0.65002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size2&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.872331em;&#34;&gt;&lt;span style=&#34;top:-2.655em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.16454285714285719em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.44509999999999994em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.872331em;&#34;&gt;&lt;span style=&#34;top:-2.655em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3340428571428572em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mop mtight&#34;&gt;&lt;span class=&#34;mtight&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.44509999999999994em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size2&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;pink&#34;&gt;P2P 架构&lt;/code&gt; ：服务器必须发送一个副本。而&lt;span class=&#34;aqua&#34;&gt;拥有该文件的一部分&lt;/span&gt;的结点可以 &lt;code&gt;共同协助&lt;/code&gt; 将文件上传到 Internet 上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成文件分发所需的时间：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;P&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;P&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;max&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;{&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mfrac&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;min&lt;/mi&gt;&lt;mo&gt;⁡&lt;/mo&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;F&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msubsup&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;/msubsup&gt;&lt;msub&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo fence=&#34;true&#34;&gt;}&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;D_{\mathrm{P} 2 \mathrm{P}}=\max \left\{\frac{F}{u_{s}}, \frac{F}{d_{\min }}, \frac{N F}{u_{s}+\sum_{i=1}^{N} u_{i}}\right\}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathrm mtight&#34;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathrm mtight&#34;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.804672em;vertical-align:-0.654672em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size2&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.872331em;&#34;&gt;&lt;span style=&#34;top:-2.655em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.16454285714285719em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.44509999999999994em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.872331em;&#34;&gt;&lt;span style=&#34;top:-2.655em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3340428571428572em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mop mtight&#34;&gt;&lt;span class=&#34;mtight&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.44509999999999994em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.872331em;&#34;&gt;&lt;span style=&#34;top:-2.570335em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.16454285714285719em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mop mtight&#34;&gt;&lt;span class=&#34;mop op-symbol small-op mtight&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;∑&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8852357142857143em;&#34;&gt;&lt;span style=&#34;top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8971428571428572em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32143857142857146em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace mtight&#34; style=&#34;margin-right:0.19516666666666668em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3280857142857143em;&#34;&gt;&lt;span style=&#34;top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.5em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size3 size1 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.143em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.13889em;&#34;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.654672em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size2&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;随着网络中连接的结点数 N 的增大， &lt;code&gt;C/S 架构&lt;/code&gt; 所需的时间线性增长，而  &lt;code&gt;P2P 架构&lt;/code&gt; 则越往后越 “平”，存在上界。&lt;/p&gt;
&lt;p&gt;可见， &lt;code&gt;文件分发场景&lt;/code&gt; 适合使用  &lt;code&gt;P2P 架构&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_22.png&#34; alt=&#34;Untitled&#34; width=&#34;500px&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;索引技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引技术&#34;&gt;#&lt;/a&gt; 索引技术&lt;/h2&gt;
&lt;p&gt;P2P 系统的索引，即 &lt;code&gt;信息&lt;/code&gt; 到 &lt;code&gt;节点位置(IP地址+端口号)&lt;/code&gt;  的映射。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;blue&#34;&gt;集中式索引&lt;/code&gt; ：内容和文件传输是分布式的，但是内容定位是高度集中式的（由一台中央目录服务器负责索引）。&lt;/p&gt;
&lt;p&gt;存在的问题：单点失效问题、性能瓶颈、版权问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;orange&#34;&gt;洪泛式查询（Query flooding）&lt;/code&gt; ：完全分布式架构，每个节点对它共享的文件进行索引，且只对它共享的文件进行索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;覆盖网络 (overlay network): Graph&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点 X 与 Y 之间如果有 TCP 连接，那么构成一个边（虚拟链路）&lt;/li&gt;
&lt;li&gt;所有的活动节点和边构成覆盖网络。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查询消息通过已有的 TCP 连接发送，节点转发查询消息。&lt;/p&gt;
&lt;p&gt;如果查询命中，则利用反向路径发回查询节点，最后请求查询的主机和命中主机建立 TCP 连接。&lt;/p&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;像洪水一般在网络中 “泛滥”，会给网络带来负担。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;red&#34;&gt;层次式覆盖网络&lt;/code&gt; ：介于集中式索引和洪泛查询之间的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点或者是一个 &lt;code class=&#34;blue&#34;&gt;超级节点&lt;/code&gt; ，或者被分配一个超级节点（普通结点），超级节点负责跟踪子节点的内容（提供索引）
&lt;ol&gt;
&lt;li&gt;节点和超级节点间维持 TCP 连接（分层式）&lt;/li&gt;
&lt;li&gt;某些超级节点对之间维持 TCP 连接（洪泛式、分布式）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;P2P 网络应用的通信过程的实质：C/S 进程之间的通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P2P 应用程序结构：部分实现 server/cilent 功能：多线程，多进程等&lt;/li&gt;
&lt;li&gt;P2P 网络应用是否适合基于 DNS 实现 peer 寻址？&lt;br /&gt;
 不适合。动态 IP 地址影响时刻更新 DNS，需要 DNS 处理能力很强。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id=&#34;socket-编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket-编程&#34;&gt;#&lt;/a&gt; socket 编程&lt;/h1&gt;
&lt;p&gt;socket 是一种 &lt;code class=&#34;purple&#34;&gt;操作系统&lt;/code&gt; 提供的 &lt;code class=&#34;aqua&#34;&gt;进程间通信机制&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在操作系统中，通常会为 &lt;code class=&#34;blue&#34;&gt;应用程序&lt;/code&gt; 提供一组 &lt;code class=&#34;red&#34;&gt;应用程序接口（API）&lt;/code&gt; ，称为套接字接口（英语：socket API）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最初设计：socket API 来源于 Unix-Berkley 的项目，是面向 TCP/IP 协议栈的接口（当前可以面向多个协议栈）。&lt;/li&gt;
&lt;li&gt;目前：事实上的工业标准，绝大多数 OS 均支持，是 Internet 网络应用最典型的 API 接口。&lt;/li&gt;
&lt;li&gt;通信模型：客户机 / 服务器模型（C/S），是应用进程间通信的抽象机制。&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;socket 一词的来历：就像一个 &lt;code&gt;“插座”&lt;/code&gt; ，两者之间一插就可以通信。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用编程接口-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用编程接口-api&#34;&gt;#&lt;/a&gt; 应用编程接口 API&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;blue&#34;&gt;应用进程&lt;/span&gt;的控制权和&lt;span class=&#34;pink&#34;&gt;操作系统&lt;/span&gt;的控制权进行转换的一个 &lt;code class=&#34;aqua&#34;&gt;系统调用&lt;/code&gt; 接口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应用进程将 &lt;code class=&#34;red&#34;&gt;控制权&lt;/code&gt; 交给操作系统（系统调用），操作系统执行相应的过程，并将结果返回给应用进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/assets/computer-science/computer-network/application-layer/Untitled_25.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三种典型的-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种典型的-api&#34;&gt;#&lt;/a&gt; 三种典型的 API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Berkeley  &lt;code&gt;UNIX 操作系统&lt;/code&gt; 定义的一种 API，称为套接字接口（socket interface），简称套接字（socket）。&lt;/p&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;最具有代表性，应用最广泛的标准的伯克利套接字。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微软在 socket 的基础上扩展形成的一个稍有不同的 API，称为  &lt;code&gt;WINSOCK&lt;/code&gt; （Windows Socket Interface）。&lt;/p&gt;
&lt;div class=&#34;note success&#34;&gt;
&lt;p&gt;&lt;code class=&#34;orange&#34;&gt;Unix / Linux&lt;/code&gt;  使用的是标准的伯克利套接字，而  &lt;code class=&#34;blue&#34;&gt;windows&lt;/code&gt;  使用的是  &lt;code class=&#34;purple&#34;&gt;WINSOCK&lt;/code&gt; ，两者之间有很大部分重叠。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AT&amp;amp;T&lt;/code&gt;  为其  &lt;code&gt;UNIX V&lt;/code&gt;  定义了一种 API，简写为  &lt;code&gt;TLI&lt;/code&gt; （Transport Layer Interface）传输层接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用进程通信的寻址问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用进程通信的寻址问题&#34;&gt;#&lt;/a&gt; 应用进程通信的寻址问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;blue&#34;&gt;标识通信端点&lt;/span&gt;（对外）
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;IP 地址 + 端口号&lt;/code&gt; （又称 “端点地址”）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;red&#34;&gt;操作系统&lt;/span&gt;如何管理套接字（对内）
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;aqua&#34;&gt;套接字描述符 (socket descriptor)&lt;/span&gt;：小整数&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;pink&#34;&gt;socket 抽象&lt;/span&gt;：当应用进程 &lt;code class=&#34;blue&#34;&gt;创建套接字&lt;/code&gt; 时，操作系统分配一个 &lt;code class=&#34;red&#34;&gt;数据结构&lt;/code&gt; 存储该套接字相关信息，并返回套接字描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机科学" scheme="https://hazuki.cn/categories/computer-science/" />
        <category term="计算机网络" scheme="https://hazuki.cn/categories/computer-science/computer-network/" />
        <category term="计算机网络" scheme="https://hazuki.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <category term="应用层" scheme="https://hazuki.cn/tags/%E5%BA%94%E7%94%A8%E5%B1%82/" />
        <updated>2021-11-30T15:50:57.000Z</updated>
    </entry>
</feed>
