<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>葉月書架</subtitle>
        <icon>https://hazuki.cn/images/favicon.ico</icon>
        <link>https://hazuki.cn</link>
        <author>
          <name>Hazuki 叶月</name>
        </author>
        <description>计算机基础 &amp; 编程笔记</description>
        <language>zh-CN</language>
        <pubDate>Tue, 30 Nov 2021 23:50:57 +0800</pubDate>
        <lastBuildDate>Tue, 30 Nov 2021 23:50:57 +0800</lastBuildDate>
        <category term="关键词1" />
        <category term="关键词2" />
        <item>
            <guid isPermalink="true">https://hazuki.cn/computer-science/computer-network/application-layer/</guid>
            <title>第2章 应用层</title>
            <link>https://hazuki.cn/computer-science/computer-network/application-layer/</link>
            <category term="计算机科学" scheme="https://hazuki.cn/categories/computer-science/" />
            <category term="计算机网络" scheme="https://hazuki.cn/categories/computer-science/computer-network/" />
            <category term="计算机网络" scheme="https://hazuki.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
            <category term="应用层" scheme="https://hazuki.cn/tags/%E5%BA%94%E7%94%A8%E5%B1%82/" />
            <pubDate>Tue, 30 Nov 2021 23:50:57 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;以下为个人学习笔记和习题整理&lt;br /&gt;
课程：哈尔滨工业大学 计算机网络&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=&#34;&gt; https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;网络应用&lt;/strong&gt;与单机应用的本质不同：&lt;/p&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;网络应用需要有 &lt;code&gt;网络的基础环境&lt;/code&gt; ，一部分软件运行在自己机器上（如浏览器），另一部分软件（或数据信息）运行在互联网的某个地方（如某些服务器），两部分软件需要 &lt;code&gt;进行交互&lt;/code&gt; ，才共同构成了网络应用。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;既然网络应用是由不同的部分构成的，那么它就存在一个 &lt;code&gt;结构&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;网络应用的体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用的体系结构&#34;&gt;#&lt;/a&gt; 网络应用的体系结构&lt;/h1&gt;
&lt;p&gt;现代网络应用中，有两种主流的体系结构。&lt;/p&gt;
&lt;h2 id=&#34;客户机服务器结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户机服务器结构&#34;&gt;#&lt;/a&gt; 客户机 / 服务器结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;主从式架构&lt;/strong&gt;（英语：&lt;em&gt;Client–server model&lt;/em&gt;）也称 &lt;code&gt;客户端/服务器架构&lt;/code&gt; 、 &lt;code&gt;C/S架构&lt;/code&gt; ，是一种网络架构，它把客户端（Client，通常是一个采用图形用户界面的程序），与服务器（Server）区分开来。每一个客户端软件的实例都可以向一个服务器或应用程序服务器发出请求。有很多不同类型的服务器，例如文件服务器、游戏服务器等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器
&lt;ol&gt;
&lt;li&gt;7 * 24 小时提供服务&lt;/li&gt;
&lt;li&gt;永久性访问地址 / 域名&lt;/li&gt;
&lt;li&gt;利用大量服务器实现可扩展性（数据中心，能够处理大量的并发请求）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;客户机
&lt;ol&gt;
&lt;li&gt;与服务器通信，使用服务器提供的服务&lt;/li&gt;
&lt;li&gt;间歇性接入网络&lt;/li&gt;
&lt;li&gt;可能使用动态 IP 地址&lt;/li&gt;
&lt;li&gt;不会与其他 “客户机” 直接通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;主从式架构通过不同的途径应用于很多不同类型的应用程序，最常见就是目前在因特网上用的 &lt;code&gt;网页&lt;/code&gt; 。例如，当你在维基百科阅读文章时，你的电脑和网页浏览器就被当做一个 &lt;code&gt;客户端&lt;/code&gt; ，同时，组成维基百科的电脑、数据库和应用程序就被当做 &lt;code&gt;服务器&lt;/code&gt; 。当你的网页浏览器向维基百科请求一个指定的文章时，维基百科服务器从维基百科的数据库中找出所有该文章需要的信息，结合成一个网页，再发送回你的浏览器。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;点对点结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#点对点结构&#34;&gt;#&lt;/a&gt; 点对点结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;对等式网络&lt;/strong&gt;（英语：&lt;em&gt;peer-to-peer&lt;/em&gt;， 简称  &lt;code&gt;P2P&lt;/code&gt; ），又称 &lt;code&gt;点对点技术&lt;/code&gt; ，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P2P 架构的特点：
&lt;ol&gt;
&lt;li&gt;没有永远在线的服务器&lt;/li&gt;
&lt;li&gt;任意端系统 / 节点之间可以 “直接” 通讯&lt;/li&gt;
&lt;li&gt;节点间歇性接入网络&lt;/li&gt;
&lt;li&gt;节点可能改变 IP 地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;P2P 节点能遍布整个互联网，也给包括开发者在内的任何人、组织或政府带来监控难题。P2P 在 &lt;code&gt;网络隐私要求高&lt;/code&gt; 和 &lt;code&gt;文件共享&lt;/code&gt; 领域中，得到了广泛的应用。使用一般型 P2P 技术的网络系统有比特币、Gnutella 或自由网等。另外，P2P 技术也被使用在类似 VoIP 等实时媒体业务的数据通信中。有些网络（如  &lt;code&gt;Napster&lt;/code&gt; 、OpenNAP、IRC @find）使用 &lt;code&gt;客户端-服务器结构&lt;/code&gt; 实现包括搜索的一些功能，而使用 &lt;code&gt;P2P结构&lt;/code&gt; 来实现另外一些功能。这种网络设计模型不同于客户端 - 服务器模型，在客户端 - 服务器模型中通信通常来往于一个中央服务器。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;混合结构hybrid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#混合结构hybrid&#34;&gt;#&lt;/a&gt; 混合结构（Hybrid）&lt;/h2&gt;
&lt;p&gt;将两种结构混合在一起使用，利用两者的优点同时规避两者的缺点。如  &lt;code&gt;Napster&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd12ac9ca-f19f-467d-8e22-650618d0ef02%2FUntitled.png?table=block&amp;amp;id=17d9133e-3e8a-49a3-8e4f-ef9fc32153d6&amp;amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;amp;width=1440&amp;amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;amp;cache=v2&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;网络应用进程通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用进程通信&#34;&gt;#&lt;/a&gt; 网络应用进程通信&lt;/h1&gt;
&lt;h2 id=&#34;进程间通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间通信&#34;&gt;#&lt;/a&gt; 进程间通信&lt;/h2&gt;
&lt;p&gt;进程间通信是网络应用的基础，而 &lt;code&gt;进程&lt;/code&gt; 是主机上运行的 &lt;code&gt;程序&lt;/code&gt; ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;运行在 &lt;code class=&#34;blue&#34;&gt;同一主机上&lt;/code&gt; 的进程之间通过由操作系统提供的 &lt;code class=&#34;aqua&#34;&gt;进程间通信机制&lt;/code&gt; 进行通信；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行在 &lt;code class=&#34;red&#34;&gt;不同主机上&lt;/code&gt; 的进程之间通过 &lt;code class=&#34;orange&#34;&gt;消息交换（报文交换）&lt;/code&gt; 进行通信。&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;note danger no-icon&#34;&gt;
&lt;p&gt;在&lt;span class=&#34;red&#34;&gt;任一特定的情景&lt;/span&gt;下，互相通信的一对进程总是可以被分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户机进程 (&lt;em&gt;client process&lt;/em&gt;)： &lt;code class=&#34;red&#34;&gt;发起通信&lt;/code&gt; 的进程；&lt;/li&gt;
&lt;li&gt;服务器进程 (&lt;em&gt;server process&lt;/em&gt;)： &lt;code class=&#34;aqua&#34;&gt;等待通信请求&lt;/code&gt; 的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;采用 &lt;code&gt;P2P架构&lt;/code&gt; 的应用也需要通过 “消息交换”，同样存在客户机进程与服务器进程之分。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息交换的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息交换的实现&#34;&gt;#&lt;/a&gt; 消息交换的实现&lt;/h2&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;网络应用的信息交换实际上是进程间的 &lt;code&gt;消息交换&lt;/code&gt; （通过 socket 套接口），需要实现对 &lt;code&gt;进程的寻址&lt;/code&gt; （IP 地址 + 端口号），消息的具体交换遵循的是 &lt;code&gt;应用层协议&lt;/code&gt; （如 HTTP、SMTP）。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Socket 套接字：进程间通信利用 &lt;code&gt;socket&lt;/code&gt;  发送 / 接受信息实现&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以类比于寄信，socket 套接字接口是 &lt;code class=&#34;aqua&#34;&gt;“门”&lt;/code&gt; ，而硬件基础设施、网络协议栈（传输层及以下）等是 “门外” 的 &lt;code class=&#34;orange&#34;&gt;传输基础设施&lt;/code&gt; ，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送方将消息送到门外邮箱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发送方依赖（门外的）传输基础设施将消息传到接收方所在主机，并送到接收方的门外&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收方从门外获取消息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5af64bd1-4630-4034-8126-bbfdb9a8ac60%2FUntitled.png?table=block&amp;amp;id=9e2187a7-2cf5-43a5-90da-f8b5e335848e&amp;amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;amp;width=1150&amp;amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;amp;cache=v2&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&#34;purple&#34;&gt;操作系统&lt;/code&gt; 向进程提供 API（应用编程接口，即套接字 socket）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序员能控制&lt;span class=&#34;blue&#34;&gt; socket 应用层端&lt;/span&gt; 的所有细节，但对于&lt;span class=&#34;orange&#34;&gt; socket 传输层端&lt;/span&gt; 只有很少的控制，其支持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;传输层协议&lt;/code&gt; 的选择（TCP 或 UDP）&lt;span class=&#34;red&#34;&gt;（★）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;可能有的几个 &lt;code class=&#34;pink&#34;&gt;传输层参数&lt;/code&gt; 的设置（如最大缓冲区、最大 segment 长度）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程寻址：实现&lt;span class=&#34;blue&#34;&gt;不同主机&lt;/span&gt;上的进程间通信，每个进程必须拥有 &lt;code class=&#34;aqua&#34;&gt;标识符&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络层上的 &lt;code&gt;IP地址&lt;/code&gt; ，能唯一标识 Internet 上的一台主机；&lt;/li&gt;
&lt;li&gt;操作系统为主机上每个需要通信的进程分配了一个 &lt;code&gt;端口号（Port number）&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，进程的标识符由  &lt;code&gt;IP 地址 + 端口号&lt;/code&gt; 组成，能唯一标识一个 “网络上的进程”。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc4ab4162-49e9-4cf5-8dc6-f3cf7599be90%2FUntitled.png?table=block&amp;amp;id=093fc772-9952-42ea-a41b-27a38f001399&amp;amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;amp;width=2000&amp;amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;amp;cache=v2&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;note success no-icon&#34;&gt;
&lt;p&gt;使用特定知名协议的应用，有其约定的端口号，不能随便使用（其他 0~65536 可用来做自己的网络应用）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP Server&lt;/code&gt; ：80（Web 应用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mail Server&lt;/code&gt; ：25&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层协议：网络应用需遵循应用层协议，完成消息的具体交换。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;公开协议&lt;/code&gt; ：由 RFC (Request For Comments) 定义，公开的标准、规范，允许互操作。如 HTTP, SMTP, ……&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;pink&#34;&gt;私有协议&lt;/code&gt; ：多数 P2P 文件共享应用
&lt;ul&gt;
&lt;li&gt;应用层协议的内容：（协议三要素）
&lt;ul&gt;
&lt;li&gt;消息的 &lt;code class=&#34;aqua&#34;&gt;类型（type）&lt;/code&gt; ：请求消息、响应消息&lt;/li&gt;
&lt;li&gt;消息的 &lt;code class=&#34;pink&#34;&gt;语法（syntax）&lt;/code&gt; / 格式：消息中有哪些字段（field）？每个字段如何描述？&lt;/li&gt;
&lt;li&gt;字段的 &lt;code class=&#34;blue&#34;&gt;语义（semantics）&lt;/code&gt; ：字段中信息的含义&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;规则（rules）&lt;/code&gt; ：进程何时发送 / 响应消息，进程如何发送 / 响应消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;网络应用需求与传输层服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用需求与传输层服务&#34;&gt;#&lt;/a&gt; 网络应用需求与传输层服务&lt;/h1&gt;
&lt;div class=&#34;note info no-icon&#34;&gt;
&lt;p&gt;消息交换不是应用层自己做的，传输层及之下的各层共同完成传输服务。&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;网络应用对传输服务的需求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;数据丢失(data loss)&lt;/code&gt;  /  &lt;code&gt;可靠性(reliability)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;某些网络应用能够容忍一定的数据丢失。
&lt;ul&gt;
&lt;li&gt;网络电话，网络视频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;某些网络应用要求 100% 可靠的数据传输。
&lt;ul&gt;
&lt;li&gt;文件传输，telnet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;延迟(delay)&lt;/code&gt; / &lt;code&gt;时间(timing)&lt;/code&gt; / &lt;code&gt;时间敏感(time sensitive)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;有些应用只有在延迟足够低时才 “有效”。
&lt;ul&gt;
&lt;li&gt;网络电话，网络游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;带宽(bandwidth)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;某些应用只有在带宽达到最低要求时才 “有效”。如网络视频&lt;/li&gt;
&lt;li&gt;某些应用能够适应任何带宽 —— 弹性应用（elastic）。如 email，为异步应用，没有太多时间上的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Internet&lt;/code&gt;  提供的传输服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 服务
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;面向连接&lt;/code&gt; ：客户机 / 服务器进程间需要建立连接（全双工）&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;可靠传输&lt;/code&gt; ：能够把底层的不可靠转变为可靠。&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;aqua&#34;&gt;流量控制&lt;/code&gt; ：发送方不会发送速度过快，超过接收方的处理能力&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;orange&#34;&gt;拥塞控制&lt;/code&gt; ：当网络负载过重时能够限制发送方的发送速度（对整个网络起作用）&lt;/li&gt;
&lt;li&gt;不提供时间 / 延迟保障&lt;/li&gt;
&lt;li&gt;不提供最小带宽保障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP 服务
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;red&#34;&gt;无连接&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;blue&#34;&gt;不可靠的数据传输&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不提供：可靠性保障、流量控制、拥塞控制、延迟保障、带宽保障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary no-icon&#34;&gt;
&lt;p&gt;UDP 这么多功能都不提供，为什么使用？&lt;/p&gt;
&lt;p&gt;答：UDP 服务做了任何一个传输层服务都要做的基本的事，除此之外不做任何事。它提供了最大的 “自由”，即网络层基本的服务穿透过来了，留给 “应用程序” 发挥的空间，即掌控数据传输的能力。（后面会学到的 &lt;code&gt;QUIC&lt;/code&gt;  协议便是基于 UDP 的）&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
