{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "葉月書架",
    "icon": "https://hazuki.cn/images/favicon.ico",
    "description": "计算机基础 & 编程笔记",
    "home_page_url": "https://hazuki.cn",
    "items": [
        {
            "id": "https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/",
            "url": "https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/",
            "title": "Shoka主题：修改切换标签时更换标题",
            "date_published": "2021-12-02T05:54:40.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>Shoka 主题默认在进行标签切换时，会将标题修改为 <code class=\"red\">(´Д｀)大変だ！</code> ，同时修改图标，虽然挺可爱 hh，但是当标签页多了想来回切换时不方便定位。</p>\n<p>为此，对 Shoka 主题进行了小的修改：</p>\n<ol>\n<li>切换标签时不再将标题修改为 <code class=\"red\">(´Д｀)大変だ！</code> ，同时修改图标也是不必要的了；</li>\n<li>保留切换回来时显示的 <code class=\"red\">（●´3｀●）やれやれだぜ</code> 。</li>\n</ol>\n<h1 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h1>\n<p>找到 <code>themes/shoka/source/js/_app/global.js</code> ，定位到 <code>visibilityListener</code>  函数（130 行）。</p>\n<p>修改 <code>case 'hidden':</code>  下的代码（见代码标亮部分）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">visibilityListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">'hidden'</span><span class=\"token operator\">:</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[rel=\"icon\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> statics <span class=\"token operator\">+</span> <span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// document.title = LOCAL.favicon.hide;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          Loader<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>titleTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">'visible'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[rel=\"icon\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> statics <span class=\"token operator\">+</span> <span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token constant\">LOCAL</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          Loader<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        titleTime <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> originTitle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里就完成啦。</p>\n<div class=\"note success no-icon\">\n<p>注：如果配置了 <code>jsDelivr加速</code> 的话需要刷新 jsDelivr 缓存才能看到效果。</p>\n</div>\n",
            "tags": [
                "Hexo博客搭建",
                "Shoka主题",
                "Shoka主题"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/computer-network/application-layer/",
            "url": "https://hazuki.cn/computer-science/computer-network/application-layer/",
            "title": "第2章 应用层",
            "date_published": "2021-11-30T15:50:57.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n课程：哈尔滨工业大学 计算机网络<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=\"> https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web</span></p>\n</div>\n<hr />\n<p><strong>网络应用</strong>与单机应用的本质不同：</p>\n<div class=\"note primary\">\n<p>网络应用需要有 <code>网络的基础环境</code> ，一部分软件运行在自己机器上（如浏览器），另一部分软件（或数据信息）运行在互联网的某个地方（如某些服务器），两部分软件需要 <code>进行交互</code> ，才共同构成了网络应用。</p>\n</div>\n<p>既然网络应用是由不同的部分构成的，那么它就存在一个 <code>结构</code> 。</p>\n<h1 id=\"网络应用的体系结构\"><a class=\"anchor\" href=\"#网络应用的体系结构\">#</a> 网络应用的体系结构</h1>\n<p>现代网络应用中，有两种主流的体系结构。</p>\n<h2 id=\"客户机服务器结构\"><a class=\"anchor\" href=\"#客户机服务器结构\">#</a> 客户机 / 服务器结构</h2>\n<p><strong>主从式架构</strong>（英语：<em>Client–server model</em>）也称 <code>客户端/服务器架构</code> 、 <code>C/S架构</code> ，是一种网络架构，它把客户端（Client，通常是一个采用图形用户界面的程序），与服务器（Server）区分开来。每一个客户端软件的实例都可以向一个服务器或应用程序服务器发出请求。有很多不同类型的服务器，例如文件服务器、游戏服务器等。</p>\n<ul>\n<li>服务器\n<ol>\n<li>7 * 24 小时提供服务</li>\n<li>永久性访问地址 / 域名</li>\n<li>利用大量服务器实现可扩展性（数据中心，能够处理大量的并发请求）</li>\n</ol>\n</li>\n<li>客户机\n<ol>\n<li>与服务器通信，使用服务器提供的服务</li>\n<li>间歇性接入网络</li>\n<li>可能使用动态 IP 地址</li>\n<li>不会与其他 “客户机” 直接通信</li>\n</ol>\n</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>主从式架构通过不同的途径应用于很多不同类型的应用程序，最常见就是目前在因特网上用的 <code>网页</code> 。例如，当你在维基百科阅读文章时，你的电脑和网页浏览器就被当做一个 <code>客户端</code> ，同时，组成维基百科的电脑、数据库和应用程序就被当做 <code>服务器</code> 。当你的网页浏览器向维基百科请求一个指定的文章时，维基百科服务器从维基百科的数据库中找出所有该文章需要的信息，结合成一个网页，再发送回你的浏览器。</p>\n</div>\n<h2 id=\"点对点结构\"><a class=\"anchor\" href=\"#点对点结构\">#</a> 点对点结构</h2>\n<p><strong>对等式网络</strong>（英语：<em>peer-to-peer</em>， 简称  <code>P2P</code> ），又称 <code>点对点技术</code> ，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。</p>\n<ul>\n<li>P2P 架构的特点：\n<ol>\n<li>没有永远在线的服务器</li>\n<li>任意端系统 / 节点之间可以 “直接” 通讯</li>\n<li>节点间歇性接入网络</li>\n<li>节点可能改变 IP 地址</li>\n</ol>\n</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>P2P 节点能遍布整个互联网，也给包括开发者在内的任何人、组织或政府带来监控难题。P2P 在 <code>网络隐私要求高</code> 和 <code>文件共享</code> 领域中，得到了广泛的应用。使用一般型 P2P 技术的网络系统有比特币、Gnutella 或自由网等。另外，P2P 技术也被使用在类似 VoIP 等实时媒体业务的数据通信中。有些网络（如  <code>Napster</code> 、OpenNAP、IRC @find）使用 <code>客户端-服务器结构</code> 实现包括搜索的一些功能，而使用 <code>P2P结构</code> 来实现另外一些功能。这种网络设计模型不同于客户端 - 服务器模型，在客户端 - 服务器模型中通信通常来往于一个中央服务器。</p>\n</div>\n<h2 id=\"混合结构hybrid\"><a class=\"anchor\" href=\"#混合结构hybrid\">#</a> 混合结构（Hybrid）</h2>\n<p>将两种结构混合在一起使用，利用两者的优点同时规避两者的缺点。如  <code>Napster</code> 。</p>\n<p><img data-src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd12ac9ca-f19f-467d-8e22-650618d0ef02%2FUntitled.png?table=block&amp;id=17d9133e-3e8a-49a3-8e4f-ef9fc32153d6&amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;width=1440&amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;cache=v2\" alt=\"Untitled\" /></p>\n<h1 id=\"网络应用进程通信\"><a class=\"anchor\" href=\"#网络应用进程通信\">#</a> 网络应用进程通信</h1>\n<h2 id=\"进程间通信\"><a class=\"anchor\" href=\"#进程间通信\">#</a> 进程间通信</h2>\n<p>进程间通信是网络应用的基础，而 <code>进程</code> 是主机上运行的 <code>程序</code> ，</p>\n<ul>\n<li>\n<p>运行在 <code class=\"blue\">同一主机上</code> 的进程之间通过由操作系统提供的 <code class=\"aqua\">进程间通信机制</code> 进行通信；</p>\n</li>\n<li>\n<p>运行在 <code class=\"red\">不同主机上</code> 的进程之间通过 <code class=\"orange\">消息交换（报文交换）</code> 进行通信。<span class=\"red\">（★）</span></p>\n<div class=\"note danger no-icon\">\n<p>在<span class=\"red\">任一特定的情景</span>下，互相通信的一对进程总是可以被分为</p>\n<ul>\n<li>客户机进程 (<em>client process</em>)： <code class=\"red\">发起通信</code> 的进程；</li>\n<li>服务器进程 (<em>server process</em>)： <code class=\"aqua\">等待通信请求</code> 的进程。</li>\n</ul>\n</div>\n<div class=\"note success no-icon\">\n<p>采用 <code>P2P架构</code> 的应用也需要通过 “消息交换”，同样存在客户机进程与服务器进程之分。</p>\n</div>\n</li>\n</ul>\n<h2 id=\"消息交换的实现\"><a class=\"anchor\" href=\"#消息交换的实现\">#</a> 消息交换的实现</h2>\n<div class=\"note primary no-icon\">\n<p>网络应用的信息交换实际上是进程间的 <code>消息交换</code> （通过 socket 套接口），需要实现对 <code>进程的寻址</code> （IP 地址 + 端口号），消息的具体交换遵循的是 <code>应用层协议</code> （如 HTTP、SMTP）。</p>\n</div>\n<ol>\n<li>\n<p>Socket 套接字：进程间通信利用 <code>socket</code>  发送 / 接受信息实现<span class=\"red\">（★）</span>。</p>\n<ol>\n<li>\n<p>可以类比于寄信，socket 套接字接口是 <code class=\"aqua\">“门”</code> ，而硬件基础设施、网络协议栈（传输层及以下）等是 “门外” 的 <code class=\"orange\">传输基础设施</code> ，</p>\n<ul>\n<li>\n<p>发送方将消息送到门外邮箱</p>\n</li>\n<li>\n<p>发送方依赖（门外的）传输基础设施将消息传到接收方所在主机，并送到接收方的门外</p>\n</li>\n<li>\n<p>接收方从门外获取消息</p>\n<p><img data-src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5af64bd1-4630-4034-8126-bbfdb9a8ac60%2FUntitled.png?table=block&amp;id=9e2187a7-2cf5-43a5-90da-f8b5e335848e&amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;width=1150&amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;cache=v2\" alt=\"Untitled\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"purple\">操作系统</code> 向进程提供 API（应用编程接口，即套接字 socket）</p>\n</li>\n<li>\n<p>应用程序员能控制<span class=\"blue\"> socket 应用层端</span> 的所有细节，但对于<span class=\"orange\"> socket 传输层端</span> 只有很少的控制，其支持</p>\n<ul>\n<li><code class=\"aqua\">传输层协议</code> 的选择（TCP 或 UDP）<span class=\"red\">（★）</span></li>\n<li>可能有的几个 <code class=\"pink\">传输层参数</code> 的设置（如最大缓冲区、最大 segment 长度）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>进程寻址：实现<span class=\"blue\">不同主机</span>上的进程间通信，每个进程必须拥有 <code class=\"aqua\">标识符</code> 。</p>\n<ul>\n<li>网络层上的 <code>IP地址</code> ，能唯一标识 Internet 上的一台主机；</li>\n<li>操作系统为主机上每个需要通信的进程分配了一个 <code>端口号（Port number）</code> 。</li>\n</ul>\n<p>因此，进程的标识符由  <code>IP 地址 + 端口号</code> 组成，能唯一标识一个 “网络上的进程”。</p>\n<p><img data-src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc4ab4162-49e9-4cf5-8dc6-f3cf7599be90%2FUntitled.png?table=block&amp;id=093fc772-9952-42ea-a41b-27a38f001399&amp;spaceId=3874eeca-3112-40d4-a188-71ae755e5501&amp;width=2000&amp;userId=2aec5b66-cedd-4945-b21f-199ea348e031&amp;cache=v2\" alt=\"Untitled\" /></p>\n<div class=\"note success no-icon\">\n<p>使用特定知名协议的应用，有其约定的端口号，不能随便使用（其他 0~65536 可用来做自己的网络应用）。</p>\n<ul>\n<li><code>HTTP Server</code> ：80（Web 应用）</li>\n<li><code>Mail Server</code> ：25</li>\n</ul>\n</div>\n</li>\n<li>\n<p>应用层协议：网络应用需遵循应用层协议，完成消息的具体交换。</p>\n<ul>\n<li><code class=\"aqua\">公开协议</code> ：由 RFC (Request For Comments) 定义，公开的标准、规范，允许互操作。如 HTTP, SMTP, ……</li>\n<li><code class=\"pink\">私有协议</code> ：多数 P2P 文件共享应用\n<ul>\n<li>应用层协议的内容：（协议三要素）\n<ul>\n<li>消息的 <code class=\"aqua\">类型（type）</code> ：请求消息、响应消息</li>\n<li>消息的 <code class=\"pink\">语法（syntax）</code> / 格式：消息中有哪些字段（field）？每个字段如何描述？</li>\n<li>字段的 <code class=\"blue\">语义（semantics）</code> ：字段中信息的含义</li>\n<li><code class=\"orange\">规则（rules）</code> ：进程何时发送 / 响应消息，进程如何发送 / 响应消息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"网络应用需求与传输层服务\"><a class=\"anchor\" href=\"#网络应用需求与传输层服务\">#</a> 网络应用需求与传输层服务</h1>\n<div class=\"note info no-icon\">\n<p>消息交换不是应用层自己做的，传输层及之下的各层共同完成传输服务。</p>\n</div>\n<ol>\n<li>\n<p>网络应用对传输服务的需求</p>\n<ol>\n<li><code>数据丢失(data loss)</code>  /  <code>可靠性(reliability)</code>\n<ul>\n<li>某些网络应用能够容忍一定的数据丢失。\n<ul>\n<li>网络电话，网络视频</li>\n</ul>\n</li>\n<li>某些网络应用要求 100% 可靠的数据传输。\n<ul>\n<li>文件传输，telnet</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>延迟(delay)</code> / <code>时间(timing)</code> / <code>时间敏感(time sensitive)</code>\n<ul>\n<li>有些应用只有在延迟足够低时才 “有效”。\n<ul>\n<li>网络电话，网络游戏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>带宽(bandwidth)</code>\n<ul>\n<li>某些应用只有在带宽达到最低要求时才 “有效”。如网络视频</li>\n<li>某些应用能够适应任何带宽 —— 弹性应用（elastic）。如 email，为异步应用，没有太多时间上的要求。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><code>Internet</code>  提供的传输服务</p>\n<ul>\n<li>TCP 服务\n<ul>\n<li><code class=\"red\">面向连接</code> ：客户机 / 服务器进程间需要建立连接（全双工）</li>\n<li><code class=\"blue\">可靠传输</code> ：能够把底层的不可靠转变为可靠。</li>\n<li><code class=\"aqua\">流量控制</code> ：发送方不会发送速度过快，超过接收方的处理能力</li>\n<li><code class=\"orange\">拥塞控制</code> ：当网络负载过重时能够限制发送方的发送速度（对整个网络起作用）</li>\n<li>不提供时间 / 延迟保障</li>\n<li>不提供最小带宽保障</li>\n</ul>\n</li>\n<li>UDP 服务\n<ul>\n<li><code class=\"red\">无连接</code></li>\n<li><code class=\"blue\">不可靠的数据传输</code></li>\n<li>不提供：可靠性保障、流量控制、拥塞控制、延迟保障、带宽保障</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>UDP 这么多功能都不提供，为什么使用？</p>\n<p>答：UDP 服务做了任何一个传输层服务都要做的基本的事，除此之外不做任何事。它提供了最大的 “自由”，即网络层基本的服务穿透过来了，留给 “应用程序” 发挥的空间，即掌控数据传输的能力。（后面会学到的 <code>QUIC</code>  协议便是基于 UDP 的）</p>\n</div>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络",
                "应用层"
            ]
        }
    ]
}