{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "葉月書架",
    "icon": "https://hazuki.cn/images/favicon.ico",
    "description": "计算机基础 & 编程笔记",
    "home_page_url": "https://hazuki.cn",
    "items": [
        {
            "id": "https://hazuki.cn/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/",
            "url": "https://hazuki.cn/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/",
            "title": "Chapter 1 Computer Abstractions and Technology",
            "date_published": "2021-12-29T09:55:29.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n书籍：计算机组成与设计：软 / 硬件接口 (Computer Organization And Design: The Hardware/Software Interface)、计算机系统基础（第 2 版 袁春风）<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFhNHkxajd4aw==\">https://www.bilibili.com/video/BV1qa4y1j7xk</span></p>\n</div>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<div class=\"note primary no-icon\">\n<p>The  <code class=\"blue\">most beautiful thing</code>  we can experience is the  <code class=\"pink\">mysterious</code> . It is the  <code class=\"aqua\">source</code>  of all true art and science. —— Albert Einstein, <em>What I Believe</em>, 1930</p>\n<ul>\n<li>我们能体验的最美好的事情是<span class=\"pink\">神秘</span>。它是一切真正的艺术和科学的<span class=\"aqua\">源泉</span>。 —— 阿尔伯特・爱因斯坦，《我的信仰》，1930</li>\n</ul>\n</div>\n<h2 id=\"关于本书\"><a class=\"anchor\" href=\"#关于本书\">#</a> 关于本书</h2>\n<p>我们认为，在 <code class=\"blue\">计算机科学和工程</code>  (computer science and engineering) 中的学习应该反映该领域 <code class=\"red\">当前的状态</code> ，并介绍形成、塑造计算的那些原理。我们还认为，计算机各专业的读者都需要理解决定 <code class=\"aqua\">计算机系统</code> 的 <code class=\"orange\">能力 (capabilities)</code> 、 <code class=\"purple\">性能 (performance)</code> 、 <code class=\"aqua\">能耗(energy)</code>  以及最终的成功的 <code class=\"red\">组织范式 (organizational paradigms)</code> 。</p>\n<details class=\"success\"><summary>Wikipedia: Paradigm</summary><div>\n<p>In science and philosophy, a paradigm (/ˈpærədaɪm/) is a distinct set of  <code class=\"red\">concepts</code>  or  <code class=\"blue\">thought patterns</code> , including theories, research methods, postulates, and standards for what constitutes legitimate contributions to a field.</p>\n<ul>\n<li>在科学和哲学中，范式是一套独特的 <code class=\"red\">概念</code> 或 <code class=\"blue\">思维模式</code> ，包括理论、研究方法、假设和对某一领域作出合理贡献的标准。</li>\n</ul>\n</div></details>\n<ul>\n<li>\n<p>现代计算机技术要求每一个计算机专业的专业人员都要同时了解 <code class=\"blue\">硬件</code> 和 <code class=\"pink\">软件</code> 。不同层次的硬件和软件之间的 <code class=\"aqua\">交互</code> 也为理解计算的基本原理提供了一个框架。无论你的主要兴趣是硬件还是软件，计算机科学还是电气工程， <code class=\"purple\">计算机组成和设计</code> 的中心思想都是相同的。因此，本书的重点是展示硬件和软件之间的关系，并着重介绍当今计算机中的基础概念。</p>\n<div class=\"note info no-icon\">\n<p>最近从 <code class=\"blue\">单处理器 (uniprocessor)</code>  到 <code class=\"red\">多核微处理器 (multicore microprocessors)</code>  的转变证实了这个观点的正确性，这是第一版以来给出的。虽然程序员可以忽略这些建议，而依靠计算机架构师、编译器作者和芯片工程师来让他们的程序运行得更快或更节能，而不修改程序，但<span class=\"red\">那个时代已经结束了</span>。为了使程序运行得更快，它们必须成为 <code class=\"pink\">并行的 (parallel)</code> 。虽然许多研究人员的目标是让程序员可以不考虑他们正在编程的硬件的底层并行特性，但要实现这一愿景还需要很多年。我们的观点是，至少在接下来的十年里，如果想让程序在 <code class=\"purple\">并行计算机</code> 上高效运行，大多数程序员将不得不理解 <code class=\"aqua\">硬件/软件接口</code> 。</p>\n</div>\n</li>\n</ul>\n<p>这本书的受众包括那些：在 <code class=\"blue\">汇编语言 (assembly language)</code>  或 <code class=\"red\">逻辑设计 (logic design)</code>  方面缺乏经验、需要理解基本的 <code class=\"aqua\">计算机组成</code> 的人，以及具有汇编语言和 / 或逻辑设计背景，想要学习 <code class=\"purple\">如何设计一个计算机</code> 或 <code class=\"aqua\">理解系统如何工作</code> 以及为什么它这样运行的读者。</p>\n<div class=\"note success no-icon\">\n<p>欢迎阅读这本书！我们很高兴有这个机会来传达 <code class=\"blue\">计算机系统 (computer systems)</code>  世界的激动人心之处。这不是一个枯燥沉闷、进步缓慢、新思想因忽视而萎缩的领域。不是！计算机是令人难以置信的充满活力的<span class=\"red\">信息技术产业 (information technology industry)</span> 的产物，信息技术产业的各个方面几乎占美国国民生产总值的 10%，而美国的经济在一定程度上依赖于 <code class=\"aqua\">摩尔定律 (Moore’s Law)</code>  所承诺的信息技术的快速进步。这是一个非同寻常的行业，它以惊人的速度拥抱创新。</p>\n</div>\n<h2 id=\"计算应用的分类及其特性\"><a class=\"anchor\" href=\"#计算应用的分类及其特性\">#</a> 计算应用的分类及其特性</h2>\n<div class=\"note primary\">\n<p>从 <code class=\"aqua\">智能家电</code> 到 <code class=\"pink\">手机</code> 再到最大的 <code>超级计算机</code> ，它们虽然都使用一组 <code class=\"blue\">通用的硬件技术</code> （见章节 1.4 和 1.5），但这些不同的应用有不同的 <code class=\"red\">设计需求</code> ，并以不同的方式使用核心硬件技术。</p>\n</div>\n<p>广义地说，计算机用于三类不同的应用：</p>\n<ol>\n<li>\n<p><strong class=\"blue\">个人电脑 (Personal computers, PCs)</strong>：可能是最广为人知的计算形式，本书的读者可能已经广泛使用。</p>\n<ul>\n<li>个人电脑强调以低成本向 <code class=\"red\">单个用户</code> 提供良好的性能，通常运行 <code class=\"aqua\">第三方软件</code> 。</li>\n<li>这类计算推动了许多计算技术的发展，而这些技术只有大约 35 年的历史！</li>\n</ul>\n</li>\n<li>\n<p><strong class=\"red\">服务器 (Servers)</strong>：曾经大得多的计算机的现代形式，通常只能 <code class=\"blue\">通过网络访问</code> 。</p>\n<ul>\n<li>\n<p>服务器是面向 <code class=\"red\">承载大型工作负载</code> 的。这些负载可以是由 <code class=\"pink\">单个复杂的应用</code> 组成的，通常是科学或工程应用，也可以是处理 <code class=\"aqua\">许多小型工作</code> 的，例如在构建一个大型的 web 服务器时发生的工作。</p>\n<div class=\"note success no-icon\">\n<p>这些应用通常基于 <code class=\"aqua\">来自其他来源的软件</code> （如数据库或模拟系统），但通常会针对特定功能进行修改或定制。</p>\n</div>\n</li>\n<li>\n<p>服务器采用与桌面计算机 <code class=\"red\">相同的基本技术</code> ，但提供更大的计算、存储和输入 / 输出能力。</p>\n</li>\n<li>\n<p>一般来说，服务器也更重视 <code class=\"blue\">可靠性</code> ，因为崩溃的代价通常比单用户 PC 更高。</p>\n</li>\n</ul>\n<div class=\"note info no-icon\">\n<p><span class=\"red\">服务器</span> 在 <span class=\"blue\">成本和能力</span> 上的差异最大：</p>\n<ul>\n<li>在低端，一台服务器可能比一台 <code class=\"aqua\">没有屏幕或键盘的桌面计算机</code> 多一点，价格为 1000 美元。这些低端服务器通常用于文件存储、小型商业应用或简单的 web 服务（见章节 6.10）。</li>\n<li>另一个极端是 <code class=\"pink\">超级计算机</code> ，目前由数万个处理器和许多 TB 的内存组成，成本高达数千万到数亿美元。超级计算机通常用于高端的 <code class=\"blue\">科学和工程计算</code> ，如天气预报、石油勘探、蛋白质结构测定和其他大规模问题。尽管这类超级计算机代表了 <code class=\"red\">计算能力的顶峰</code> ，但它们只占服务器和整个计算机市场收入的相对较小的一部分。</li>\n</ul>\n</div>\n<details class=\"primary\"><summary>Terminology: terabyte</summary><div>\n<p><strong class=\"blue\">terabyte (TB)</strong>: Originally 1,099,511,627,776 ( <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>40</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{40}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> ) bytes, although  <code class=\"aqua\">communications</code>  and  <code>secondary storage systems</code>  developers started using the term to mean 1,000,000,000,000 ( <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> ) bytes.</p>\n<ul>\n<li>\n<p>To reduce confusion, we now use the term  <code class=\"blue\">tebibyte (TiB)</code>  for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>40</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{40}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes, defining  <code class=\"pink\">terabyte (TB)</code>  to mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> bytes.</p>\n</li>\n<li>\n<p>Figure 1.1 shows the full range of  <code class=\"pink\">decimal</code>  and  <code class=\"aqua\">binary</code>  values and names.</p>\n<p><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_0.png\" alt=\"Untitled_0\" width=\"700px\" /></p>\n</li>\n</ul>\n</div></details>\n</li>\n<li>\n<p><strong class=\"aqua\">嵌入式计算机 (Embedded computers)</strong>：计算机中规模最大、 <code class=\"blue\">应用和性能</code> 范围最广的一类。嵌入式计算机包括汽车中的微处理器、电视机中的计算机，以及控制现代飞机或货船的处理器网络 (networks of processors)。</p>\n<ul>\n<li>\n<p>嵌入式计算系统的设计目的是运行一个或一组相关的应用程序，这些应用程序通常 <code class=\"red\">与硬件集成</code> 并作为单个系统交付给用户。因此，尽管有大量的嵌入式计算机，大多数用户从来没有真正看到他们正在使用计算机！</p>\n<div class=\"note info no-icon\">\n<p><code class=\"aqua\">Embedded computer</code> : A computer  <code class=\"blue\">inside another device</code>  used for running  <code class=\"red\">one predetermined application</code>  or  <code class=\"aqua\">collection of software</code> .</p>\n<ul>\n<li>嵌入式计算机：一个存在于另一个设备中的计算机，用于运行一个预先定义的应用程序，或一组软件。</li>\n</ul>\n</div>\n</li>\n<li>\n<p>嵌入式应用通常有独特的应用需求，这些需求结合了 <code class=\"blue\">最低性能</code> 和 <code class=\"aqua\">严格的成本或功耗限制</code> 。例如，考虑一个音乐播放器：处理器只需要尽可能快地处理其 <code class=\"red\">有限的功能</code> ，除此之外，最大限度地 <code class=\"grey\">降低成本和功耗</code> 是最重要的目标。</p>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>尽管价格低廉，嵌入式计算机 <code>对故障的容忍度</code> 往往较低，因为其结果可能从令人沮丧到破坏性不等。</p>\n<ul>\n<li>在 <code class=\"purple\">面向消费者</code> 的嵌入式应用中，例如数字家电，可靠性主要是通过 <code class=\"red\">简单设计 (simplicity)</code>  实现的，重点是尽可能完美地完成 <code class=\"blue\">一个功能</code> 。</li>\n<li>在 <code class=\"aqua\">大型嵌入式系统</code> 中，经常使用来自 <code>服务器领域</code> 的冗余技术。</li>\n</ul>\n</div>\n<p>虽然这本书的重点是通用计算机，大多数概念可直接或者稍微修改之后用于嵌入式计算机。</p>\n<details class=\"info\"><summary>Elaboration: processor cores</summary><div>\n<p>Many  <code class=\"blue\">embedded processors</code>  are designed using  <code class=\"pink\">processor cores</code> , a version of a processor written in a  <code class=\"red\">hardware description language</code> , such as Verilog or VHDL (see Chapter 4). The core allows a designer to integrate other  <code class=\"aqua\">application-specific hardware</code>  with the processor core for fabrication on a single chip.</p>\n<ul>\n<li>许多 <code class=\"blue\">嵌入式处理器</code> 都是使用 <code class=\"pink\">处理器核</code> 设计的，处理器内核是用 <code class=\"red\">硬件描述语言</code> 编写的处理器版本（如 Verilog 或 VHDL，见第 4 章）。处理器核允许设计者将其他 <code class=\"aqua\">特定于应用程序的硬件</code> 集成到处理器核中，以便在单个芯片上制造。</li>\n</ul>\n</div></details>\n</li>\n</ol>\n<h2 id=\"欢迎来到后pc时代\"><a class=\"anchor\" href=\"#欢迎来到后pc时代\">#</a> 欢迎来到后 PC 时代</h2>\n<div class=\"note info\">\n<p>技术的持续进步带来了 <code class=\"blue\">计算机硬件</code> 的 <code class=\"red\">代际变化</code> ，撼动了整个信息技术产业。自上一版以来，我们经历了如此重大的变化，就像 30 年前开始转向个人电脑一样。</p>\n</div>\n<ol>\n<li>\n<p>代替 <span class=\"blue\">PC</span> 的是 <strong class=\"blue\">个人移动设备 (PMD, personal mobile device)</strong>。PMD 由电池供电，通过无线方式连接到互联网，通常需要花费数百美元，并且像个人电脑一样，用户可以下载 <code class=\"red\">软件 (“apps”)</code>  来运行它们。</p>\n<ul>\n<li>与个人电脑不同的是，它们不再有键盘和鼠标，而更有可能依赖于触摸屏，甚至语音输入。</li>\n<li>今天的 PMD 是 <code class=\"blue\">智能手机</code> 或 <code class=\"aqua\">平板电脑</code> ，但明天它可能包括电子眼镜。</li>\n</ul>\n</li>\n<li>\n<p>取代传统 <span class=\"red\">服务器</span> 的是 <strong class=\"red\">云计算 (Cloud Computing)</strong>，它依赖于大型 <code class=\"blue\">数据中心</code> ，这些数据中心现在被称为 <code class=\"red\">仓储规模计算机</code>  (WSCs, Warehouse Scale Computers)。</p>\n<ul>\n<li>像 Amazon 和谷歌这样的公司构建了包含 10 万台服务器的 WSC，然后让一些公司可以 <code class=\"aqua\">租用</code> 其中的一部分，这样他们就可以向 PMD 提供 <code class=\"pink\">软件服务</code> ，而不必自己构建 WSC。</li>\n<li>事实上，通过云部署的 <code class=\"blue\">软件即服务 (SaaS, Software as a Service)</code>  正在彻底改变软件行业，就像 PMD 和 WSC 正在彻底改变硬件行业一样。今天的软件开发人员通常会让他们的应用程序的一部分 <code class=\"aqua\">运行在 PMD 上</code> ，另一部分 <code class=\"red\">运行在云上</code> 。</li>\n</ul>\n<div class=\"note primary\">\n<p>软件即服务 (SaaS)：通过互联网 <code>以服务的形式</code> 提供 <code class=\"red\">软件</code> 和 <code class=\"blue\">数据</code> ，通常是通过运行在本地客户端设备上的 <code class=\"purple\">浏览器</code> 等小的程序，而不是在该设备上运行所有的二进制代码（一部分在服务器端执行）。例如网络搜索和社交网络。</p>\n</div>\n</li>\n</ol>\n<h2 id=\"你能从本书学到什么\"><a class=\"anchor\" href=\"#你能从本书学到什么\">#</a> 你能从本书学到什么</h2>\n<div class=\"note info no-icon\">\n<p>成功的程序员总是关心其程序的 <code class=\"blue\">性能 (performance)</code> ，因为让用户 <code class=\"red\">快速得到结果</code> 对软件成功与否至关重要。</p>\n<ul>\n<li>\n<p>在 20 世纪 60 年代和 70 年代，计算机性能的一个主要限制是计算机 <code class=\"pink\">内存的大小</code> 。因此，程序员通常遵循一个简单的信条： <code class=\"purple\">最小化内存空间</code> 以使程序更快。</p>\n</li>\n<li>\n<p>在过去的十年里， <code class=\"pink\">计算机设计</code> 和 <code class=\"blue\">存储器技术</code> 的进步 <code class=\"aqua\">大大降低了</code> 少占内存容量在大多数应用中的重要性，除了嵌入式计算系统。</p>\n</li>\n</ul>\n</div>\n<ul>\n<li>\n<p>对性能感兴趣的程序员现在需要理解已经 <span class=\"red\">取代</span> 20 世纪 60 年代 <span class=\"grey\">简单内存模型</span> 的事物： <code class=\"red\">处理器的并行特性</code> 和 <code class=\"blue\">内存的层次特性</code> 。</p>\n</li>\n<li>\n<p>此外，当今的程序员需要考虑运行在 PMD 或云上的程序的 <code class=\"aqua\">能耗效率 (energy efficiency)</code> ，这就要求他们了解自己 <code class=\"purple\">代码之下</code> 的许多细节（见 1.7 节）。</p>\n</li>\n</ul>\n<p>因此，程序员为了构建 <code class=\"blue\">具有竞争力</code> 的软件版本，必须增加他们的 <code class=\"pink\">计算机组成</code> 认识。</p>\n<details class=\"info\"><summary>Understanding Program Performance</summary><div>\n<p>The <span class=\"red\">performance</span> of a <span class=\"blue\">program</span> depends on a combination of</p>\n<ul>\n<li>the  <code class=\"pink\">effectiveness of the algorithms</code>  used in the program,</li>\n<li>the  <code class=\"aqua\">software systems</code>  used to create and translate the program into  <code class=\"orange\">machine instructions</code> , and</li>\n<li>the  <code class=\"blue\">effectiveness of the computer</code>  in executing those instructions, which may include  <code class=\"purple\">input/output (I/O) operations</code> .</li>\n</ul>\n<p>This table summarizes how the <span class=\"blue\">hardware</span> and <span class=\"pink\">software</span> affect performance.</p>\n<table>\n<thead>\n<tr>\n<th>Hardware or software component</th>\n<th>How this component affects performance</th>\n<th>Where is this topic covered?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"red\">Algorithm</span></td>\n<td>Determines both the number of  <code class=\"blue\">source-level statements</code>  and the number of  <code class=\"purple\">I/O operations</code>  executed</td>\n<td>Other books!</td>\n</tr>\n<tr>\n<td><span class=\"aqua\">Programming language, compiler, and architecture</span></td>\n<td>Determines the number of  <code class=\"orange\">computer instructions</code>  for each source-level statement</td>\n<td>Chapters 2 and 3</td>\n</tr>\n<tr>\n<td><span class=\"blue\">Processor and memory system</span></td>\n<td>Determines  <code class=\"blue\">how fast instructions</code>  can be executed</td>\n<td>Chapters 4, 5, and 6</td>\n</tr>\n<tr>\n<td><span class=\"purple\">I/O system (hardware and operating system)</span></td>\n<td>Determines  <code class=\"purple\">how fast I/O operations</code>  may be executed</td>\n<td>Chapters 4, 5, and 6</td>\n</tr>\n</tbody>\n</table>\n</div></details>\n<h1 id=\"计算机体系结构中的八个伟大思想\"><a class=\"anchor\" href=\"#计算机体系结构中的八个伟大思想\">#</a> 计算机体系结构中的八个伟大思想</h1>\n<div class=\"note primary\">\n<p>现在我们介绍 <code class=\"blue\">计算机架构师 (computer architects)</code>  在过去 60 年的计算机设计中提出的 8 个 <code class=\"red\">伟大思想 (great ideas)</code> 。这些思想是如此强大，以至于在首台应用它们的计算机出现之后的很长时间里，新的架构师们通过 <code class=\"aqua\">模仿他们的前辈</code> 来表达钦佩之情。这些伟大思想将是我们将在本章和后续章节中穿插的主题。为了指出它们的影响，在本节中，我们将介绍代表伟大思想的图标和突出显示的术语，并使用它们来指出这本书中近 100 个以使用这些伟大思想为特色的章节。</p>\n</div>\n<table>\n<thead>\n<tr>\n<th>Great idea</th>\n<th>Description of the Great idea</th>\n<th>Description of the icon</th>\n<th>icon</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"blue\">面向摩尔定律设计（Design for Moore’s Law）</span></td>\n<td>计算机设计者面临的一个永恒的问题就是主要由 <code class=\"blue\">摩尔定律 (Moore’s Law)</code>  所驱动的<span class=\"purple\">快速变化</span>。摩尔定律指出，<span class=\"red\">单芯片上的集成度</span>每 18-24 个月翻一番。摩尔定律源于 Intel 创始人之一 Gordon Moore 在 1965 年对集成电路集成度的增长做出的预测。由于<span class=\"aqua\">计算机设计</span>可能需要<span class=\"orange\">数年时间</span>，因此在项目结束时，单芯片的集成度相对于设计开始时很容易翻一番甚至翻两番。就像双向飞碟射击者一样，计算机架构师们必须预测其<span class=\"red\">设计完成时的工艺水平</span>，而不是设计开始时的。</td>\n<td>我们使用 “向上和向右” 的<span class=\"blue\">摩尔定律图</span>来代表<span class=\"red\">面向快速变化</span>的设计。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_2.png\" alt=\"Untitled_2\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"red\">使用抽象简化设计（Use Abstraction to Simplify Design）</span></td>\n<td>计算机架构师和程序员都必须发明技术来<span class=\"blue\">提高自己的工作效率</span>，否则根据摩尔定律，设计时间会像资源增长一样急剧延长。硬件和软件的主要生产力技术是使用 <code class=\"red\">抽象</code> 来表示<span class=\"aqua\">不同层次的设计</span>；<span class=\"pink\">隐藏较低层次的细节</span>，以便在较高层次上提供更简单的模型。</td>\n<td>我们将使用<span class=\"pink\">抽象绘画</span>图标来表示第二个伟大的想法。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_3.png\" alt=\"Untitled_3\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"aqua\">使得常见情况快速处理（Make the Common Case Fast）</span></td>\n<td>使得 <code class=\"blue\">常见情况</code> 快速处理比<span class=\"purple\">优化罕见情况</span>更能提高性能。具有讽刺意味的是，常见的情况通常比罕见的情况更简单，因此通常更容易增强。这个常识性建议意味着你<span class=\"red\">知道常见的情况是什么</span>，这只有通过仔细的<span class=\"blue\">实验和测量</span>才能实现（见第 1.6 节）。</td>\n<td>我们用<span class=\"red\">一辆跑车</span>作为使得常见情况快速处理的图标，因为最常见的旅行有一到两个乘客，当然，制造一辆快速的跑车比一辆快速的小型货车更容易！</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_4.png\" alt=\"Untitled_4\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"pink\">通过并行提高性能（Performance via Parallelism）</span></td>\n<td>自从计算机出现以来，计算机架构师们已经提供了通过<span class=\"blue\">并行执行操作 (performing operations in parallel)</span> 来获得更高性能的设计。在这本书中，我们会看到许多并行的例子。</td>\n<td>我们使用一架飞机的<span class=\"orange\">多个喷气发动机</span>作为 <code class=\"red\">并行性能</code> 的图标。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_5.png\" alt=\"Untitled_5\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"blue\">通过流水线提高性能（Performance via Pipelining）</span></td>\n<td>在计算机体系结构中，有一种<span class=\"red\">特殊的并行模式</span>如此流行，以至于它值得拥有自己的名字： <code class=\"blue\">流水线 (pipelining)</code> 。例如许多西部片中，一些坏人在制造火灾，在消防车出现之前会有一个 “救火队列” 负责灭火：村民们<span class=\"aqua\">组成一个人链</span>来携带水源至火场，因为他们可以更快地<span class=\"orange\">沿着链上移动水桶</span>，而不是每个人都在来回奔跑。</td>\n<td>我们的流水线图标是一个<span class=\"blue\">管道序列</span>，每个部分代表流水线的一个阶段。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_6.png\" alt=\"Untitled_6\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"red\">通过预测提高性能（Performance via Prediction）</span></td>\n<td>正如谚语<span class=\"pink\"> “求人准许不如求人原谅”</span> 所说，最后一个伟大的想法是 <code class=\"blue\">预测</code> ：在某些情况下，假设<span class=\"aqua\">从错误预测中恢复的机制</span>代价并不太高，并且你的<span class=\"purple\">预测相对准确</span>，那么<span class=\"red\">猜测并开始工作</span>比<span class=\"grey\">等到确定之后再进行工作</span>要快得多。</td>\n<td>我们用<span class=\"red\">算命师的水晶球</span>作为我们预测的图标。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_7.png\" alt=\"Untitled_7\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"aqua\">存储器的层次结构（Hierarchy of Memories）</span></td>\n<td>程序员希望内存快、大、便宜，因为内存速度通常<span class=\"red\">决定性能</span>，容量限制了<span class=\"blue\">可以解决的问题的大小</span>，而内存的成本通常是计算机成本的主要部分。架构师发现，他们可以通过 <code class=\"red\">存储器的层次结构</code> 来解决这些冲突的需求，在层次结构的顶部使用最快、最小和每比特价格最昂贵的存储器，而在底层使用最慢、最大和每比特价格最便宜的存储器。正如我们将在第 5 章中看到的，<span class=\"blue\">高速缓存 (caches)</span> 给程序员一种<span class=\"orange\">错觉</span>，即<span class=\"pink\">主存</span>几乎和层次结构顶部的存储器一样快，并和层次结构底部的存储器一样大，一样便宜。</td>\n<td>我们使用一个<span class=\"orange\">分层的三角形</span>图标来表示存储器的层次结构。形状表示着速度，成本和大小：越接近顶部的，是更快和每比特价格更昂贵的存储器；底部越宽，存储器越大。</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_8.png\" alt=\"Untitled_8\" width=\"200px\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><span class=\"grey\">通过冗余提高可靠性（Dependability via Redundancy）</span></td>\n<td>计算机不仅需要速度快，还需要工作可靠。由于任何物理设备都可能发生故障，因此我们通过 <code class=\"red\">包含冗余组件</code> 来确保系统的<span class=\"blue\">可靠性</span>，这些冗余组件可以在故障发生时<span class=\"orange\">替代失效部件</span>，并可以<span class=\"aqua\">帮助检测故障</span>。</td>\n<td>我们使用<span class=\"aqua\">牵引车</span>作为我们的图标，因为它的后轴两侧各有两个轮胎，即使一个轮胎坏了，卡车也可以继续行驶。（据推测，卡车司机会立即前往维修厂修理漏气的轮胎，从而恢复冗余！）</td>\n<td><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_9.png\" alt=\"Untitled_9\" width=\"200px\" /></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"程序之下below-your-program\"><a class=\"anchor\" href=\"#程序之下below-your-program\">#</a> 程序之下（Below Your Program）</h1>\n<div class=\"note primary\">\n<p>一个典型的 <code class=\"blue\">应用程序</code> （如字处理程序、大型数据库系统）可以由 <code class=\"aqua\">数百万行代码</code> 构成，并依赖于实现复杂功能的 <code class=\"red\">软件库 (software libraries)</code>  来支持应用程序。</p>\n<ul>\n<li>正如我们将看到的，计算机中的 <code class=\"orange\">硬件</code> 只能执行极其简单的 <code class=\"blue\">低级指令 (low-level instructions)</code> 。</li>\n<li>从 <code class=\"pink\">复杂的应用程序</code> 到 <code class=\"blue\">简单的指令</code> ，需要调用 <code class=\"red\">几个层次的软件</code> 来将这些 <code class=\"aqua\">高级操作 (high-level operations)</code> ， <code class=\"blue\">解释 (interpret)</code>  或 <code class=\"red\">翻译 (translate)</code>  为简单的计算机指令。而这是 <code class=\"aqua\">伟大思想</code> 中的 <code class=\"red\">抽象</code> 的一个的例子。</li>\n</ul>\n</div>\n<ol>\n<li>\n<p>如图所示，这些 <code class=\"red\">软件层</code> 主要以 <code class=\"aqua\">分层的方式</code> 组织，其中 <code class=\"blue\">应用程序 (applications)</code>  位于最外层的环，而各种 <code class=\"red\">系统软件 (systems software)</code>  则位于硬件和应用软件之间。</p>\n<p><img data-src=\"/assets/computer-science/computer-organization/Chapter1-Computer-Abstractions-and-Technology/Untitled_10.png\" alt=\"Untitled_10\" width=\"600px\" /></p>\n<div class=\"note info no-icon\">\n<p><span class=\"red\">systems software</span>: Software that provides services that are  <code class=\"blue\">commonly useful</code> , including  <code class=\"purple\">operating systems</code> ,  <code class=\"red\">compilers</code> ,  <code class=\"orange\">loaders</code> , and  <code class=\"aqua\">assemblers</code></p>\n<ul>\n<li>系统软件：提供 <code class=\"blue\">常用服务</code> 的软件，包括 <code class=\"purple\">操作系统</code> 、 <code class=\"red\">编译器</code> 、 <code class=\"orange\">加载器</code> 和 <code class=\"aqua\">汇编器</code> 。</li>\n</ul>\n</div>\n</li>\n<li>\n<p>有许多类型的 <code class=\"red\">系统软件</code> ，但其中有两种类型的系统软件是当今每个 <code class=\"blue\">计算机系统的中心</code> ： <code class=\"purple\">操作系统</code> 和 <code class=\"red\">编译器</code> 。</p>\n<ol>\n<li>\n<p><span class=\"purple\">操作系统 (operating system)</span>：是 <code class=\"blue\">用户程序</code> 和 <code class=\"orange\">硬件</code> 之间的接口，提供各种 <code class=\"aqua\">服务</code> 和 <code class=\"grey\">监控功能 (supervisory functions)</code> 。其中最重要的功能是：</p>\n<ul>\n<li>处理基本的<span class=\"aqua\">输入和输出操作</span></li>\n<li><span class=\"red\">分配存储和内存</span></li>\n<li>在同时使用计算机的<span class=\"blue\">多个应用程序</span>之间提供受保护的<span class=\"pink\">计算机共享资源</span>。</li>\n</ul>\n<p>当前我们使用的操作系统的例子有 Linux、iOS 和 Windows。</p>\n<div class=\"note primary no-icon\">\n<p><span class=\"purple\">operating system</span>:  <code class=\"blue\">Supervising program</code>  that  <code class=\"red\">manages the resources</code>  of a computer for the benefit of the programs that run on that computer.</p>\n<ul>\n<li>操作系统：为使计算机上运行的程序受益而管理 <code class=\"red\">计算机资源</code> 的 <code class=\"blue\">监督程序</code> 。</li>\n</ul>\n</div>\n</li>\n<li>\n<p><span class=\"red\">编译器 (compiler)</span>：执行另一个重要的功能：将用 <code class=\"aqua\">高级语言</code> （如 C、C++、Java 或 Visual Basic）编写的程序，翻译成硬件可以执行的 <code class=\"blue\">指令</code> 。</p>\n<ul>\n<li>由于 <code class=\"red\">现代编程语言</code> 的复杂性和 <code class=\"blue\">硬件所执行的指令</code> 的简单性，从高级语言程序到硬件指令的转换是复杂的。</li>\n<li>我们在这里简要概述这个过程，然后在第二章和附录 A 中进行更深入的讨论。</li>\n</ul>\n<div class=\"note success no-icon\">\n<p><span class=\"red\">compiler</span>: A program that translates  <code class=\"aqua\">high-level language statements</code>  into  <code class=\"purple\">assembly language statements</code> .</p>\n<ul>\n<li>编译器：把 <code class=\"aqua\">高级语言语句</code> 翻译成 <code class=\"purple\">汇编语言语句</code> 的程序。</li>\n</ul>\n</div>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"从高级语言到硬件语言\"><a class=\"anchor\" href=\"#从高级语言到硬件语言\">#</a> 从高级语言到硬件语言</h2>\n<h1 id=\"外壳之下under-the-covers\"><a class=\"anchor\" href=\"#外壳之下under-the-covers\">#</a> 外壳之下（Under the Covers）</h1>\n",
            "tags": [
                "计算机科学",
                "计算机组成原理",
                "计算机组成原理"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/operating-system/Chapter1-Introduction/",
            "url": "https://hazuki.cn/computer-science/operating-system/Chapter1-Introduction/",
            "title": "Chapter 1 Introduction",
            "date_published": "2021-12-20T12:41:01.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n书籍：操作系统概念 (Opertating System Concepts)、操作系统导论 (OSTEP)<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhONDExOTdLbw==\">https://www.bilibili.com/video/BV1HN41197Ko</span></p>\n</div>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<div class=\"note primary no-icon\">\n<p>An operating system is  <code>software</code>  that  <code class=\"blue\">manages a computer’s hardware</code> . It also  <code class=\"red\">provides a basis</code>  for  <code class=\"aqua\">application programs</code>  and acts as an  <code class=\"pink\">intermediary</code>  between the computer user and the computer hardware. An amazing aspect of operating systems is how they vary in accomplishing these tasks in a wide variety of computing environments.</p>\n<ul>\n<li>操作系统是 <code class=\"blue\">管理计算机硬件</code> 的 <code>软件</code> 。</li>\n<li>它还为 <code class=\"aqua\">应用程序</code> 提供 <code class=\"red\">基础</code> ，并在 <code>计算机用户</code> 和 <code>计算机硬件</code> 之间充当 <code class=\"pink\">中介</code> 。</li>\n<li>操作系统的一个令人惊异的方面是，它们在 <code class=\"aqua\">各种各样的计算环境</code> 中如何完成这些任务。</li>\n</ul>\n</div>\n<p>为了探索 <code class=\"purple\">操作系统</code> 在现代计算环境中的角色，首先理解 <code class=\"blue\">计算机硬件</code> 的组织和架构是很重要的。这包括 CPU、内存、I/O 设备以及存储。操作系统的一个基本职责是将这些 <code class=\"red\">资源分配</code> 给程序。</p>\n<p>因为操作系统庞大而复杂，所以必须 <code class=\"aqua\">一块一块地(piece by piece)</code>  创建它。每个部分都应该是系统中 <code class=\"pink\">明确描述(well-delineated)</code>  的一部分，具有仔细定义的 <code class=\"grey\">输入</code> 、 <code class=\"grey\">输出</code> 和 <code class=\"red\">功能</code> 。</p>\n<ul>\n<li>在这一章中，我们提供了一个当代 <code class=\"blue\">计算机系统</code> 的主要组成部分以及 <code class=\"aqua\">操作系统所提供的功能</code> 的一般概述。此外，我们还讨论了几个主题，以帮助为本文的其余部分打下基础：\n<ol>\n<li>操作系统中使用的 <code class=\"pink\">数据结构</code></li>\n<li><code class=\"red\">计算环境 (computing environments)</code></li>\n<li>以及 <code class=\"aqua\">开源</code> 和免费的操作系统</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"操作系统的功能\"><a class=\"anchor\" href=\"#操作系统的功能\">#</a> 操作系统的功能</h2>\n<p>我们从 <code class=\"red\">操作系统</code> 在整个 <code class=\"blue\">计算机系统</code> 中的角色开始讨论。</p>\n<p>计算机系统可以大致分为四个部分: <code class=\"aqua\">硬件</code> 、 <code class=\"red\">操作系统</code> 、 <code class=\"blue\">应用程序</code> 和 <code class=\"grey\">用户</code> ，如图所示。</p>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_0.png\" alt=\"Untitled_0\" width=\"600px\" /></p>\n<ul>\n<li><code class=\"aqua\">硬件</code> ：CPU、内存和 I/O 设备等，为系统提供 <code class=\"aqua\">基本的计算资源</code> 。</li>\n<li><code class=\"blue\">应用程序</code> ：如文字处理程序、电子表格程序、编译器和网页浏览器，定义了这些 <code class=\"red\">资源</code> 用来解决用户的计算问题的 <code class=\"blue\">方式</code> 。</li>\n<li><code class=\"red\">操作系统</code> ： <code class=\"pink\">控制硬件</code> ，并为不同的用户 <code class=\"purple\">协调</code> 各种应用程序对硬件的使用。</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>We can also view a computer system as consisting of  <code>hardware</code> ,  <code>software</code> , and  <code>data</code> . The operating system provides the  <code class=\"red\">means</code>  for  <code class=\"blue\">proper use</code>  of these resources in the operation of the computer system. An operating system is similar to a government. Like a government, it performs no useful function by itself. It simply  <code class=\"aqua\">provides an environment</code>  within which other programs can do useful work.</p>\n<ul>\n<li>我们也可以把计算机系统看作是由 <code>硬件</code> 、 <code>软件</code> 和 <code>数据</code> 组成的。操作系统提供了在计算机系统的运行中 <code class=\"blue\">正确使用</code> 这些资源的 <code class=\"red\">方法</code> 。操作系统类似于政府。就像政府一样，它自己不能发挥任何有用的功能。它只是 <code class=\"aqua\">提供了一个环境</code> ，其他程序可以在其中完成有用的工作。</li>\n</ul>\n</div>\n<h2 id=\"操作系统的定义\"><a class=\"anchor\" href=\"#操作系统的定义\">#</a> 操作系统的定义</h2>\n<p>一般来说，我们 <code class=\"blue\">没有</code> 一个关于操作系统的完全准确的定义。</p>\n<p>操作系统之所以存在，是因为它们 <code class=\"pink\">提供了一种合理的方法</code> 来解决 <code class=\"aqua\">创建可用的计算系统</code> 的问题。</p>\n<ul>\n<li><code class=\"aqua\">计算机系统</code> 的根本目的是，执行程序并使解决用户问题变得更容易。 <code class=\"orange\">计算机硬件</code> 就是为了这个目标而构建的。</li>\n<li>由于单独的裸硬件不是特别容易使用，所以开发了 <code class=\"blue\">应用程序</code> 。</li>\n<li>这些程序需要某些 <code class=\"red\">共同的操作</code> ，例如控制 I/O 设备。这些控制和分配资源的共同的功能被整合到一个软件模块中： <code class=\"purple\">操作系统</code> 。</li>\n</ul>\n<h2 id=\"操作系统的组成部分\"><a class=\"anchor\" href=\"#操作系统的组成部分\">#</a> 操作系统的组成部分</h2>\n<p>此外，对于究竟什么属于 <code class=\"aqua\">操作系统的一部分</code> ，我们 <code class=\"blue\">没有</code> 一个普遍接受的定义。</p>\n<ol>\n<li>\n<p>一个简单的观点是，操作系统包括当你订购 “操作系统” 时，销售商所提供的所有东西。然而，操作系统所包含的特性在不同的系统之间差别很大：有些系统占用的空间不足 1MB，甚至缺乏全屏编辑器；而另一些系统则需要数 GB 的空间，并且完全基于图形窗口系统。</p>\n</li>\n<li>\n<p>本书所采用的定义：</p>\n<div class=\"note primary no-icon\">\n<p>A more common definition, and the one that we usually follow, is that  <code>the operating system</code>  is  <code class=\"blue\">the one program running at all times</code>  on the computer—usually called the  <code class=\"red\">kernel</code> .</p>\n<ul>\n<li>一个比较公认的定义，也是我们通常遵循的定义是， <code>操作系统</code> 是在计算机上 <code class=\"blue\">始终运行的程序</code>  —— 通常称为 <code class=\"red\">内核</code> 。</li>\n</ul>\n</div>\n<div class=\"note info no-icon\">\n<p>除了内核之外，还有另外两种类型的程序：</p>\n<ul>\n<li><code class=\"pink\">系统程序</code> ：与操作系统相关联，但不是内核的必要组成部分；</li>\n<li><code class=\"blue\">应用程序</code> ：包括所有与系统操作无关的程序。</li>\n</ul>\n</div>\n</li>\n<li>\n<p>然而，现在如果我们着眼于如今的 <code class=\"blue\">移动设备</code> 的操作系统，我们会再次看到，构成操作系统的功能的数量正在增加。移动设备的操作系统通常不仅包括一个核心的内核，还包括一个 <code class=\"red\">中间件 (middleware)</code> ，它是为 <code class=\"aqua\">应用程序开发人员</code> 提供额外服务的一组 <code class=\"orange\">软件框架</code> 。</p>\n</li>\n</ol>\n<div class=\"note success no-icon\">\n<p>总之，就我们的目的而言，操作系统包括始终运行的 <code class=\"red\">内核</code> 、简化应用程序开发并提供功能的 <code class=\"blue\">中间件框架</code> ，以及在系统运行时帮助管理系统的 <code class=\"purple\">系统程序</code> 。</p>\n</div>\n<p>本文的大部分内容都与通用操作系统的内核有关，但为了全面解释操作系统的设计和操作，还会根据需要讨论其他组件。</p>\n<h1 id=\"计算机系统的组成\"><a class=\"anchor\" href=\"#计算机系统的组成\">#</a> 计算机系统的组成</h1>\n<p>现代通用计算机系统由一个或多个 <code class=\"aqua\">CPU</code>  和多个 <code class=\"blue\">设备控制器 (device controllers)</code>  组成，通过 <code class=\"red\">公用总线 (common bus)</code>  相连。</p>\n<p>该总线提供了组件和 <code class=\"pink\">共享内存 (shared memory)</code>  之间的访问，如图所示。</p>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_1.png\" alt=\"Untitled_1\" width=\"600px\" /></p>\n<div class=\"note primary no-icon\">\n<p>每个 <code class=\"blue\">设备控制器</code> 负责 <code class=\"red\">一类特定的设备</code>  (例如，磁盘驱动器、音频设备或图形显示)。根据控制器的不同，一个控制器可以连接多个设备。例如，一个系统 USB 接口可以连接到一个 USB 集线器 (USB hub) 上，该集线器可以连接多个设备。</p>\n</div>\n<ol>\n<li>\n<p>设备控制器维护一些 <code class=\"aqua\">本地缓冲区存储器</code> 和一组 <code class=\"purple\">专用寄存器</code> 。设备控制器负责在其控制的 <code class=\"red\">外围设备</code> 与其 <code class=\"aqua\">本地缓冲区存储器</code> 之间移动数据。</p>\n</li>\n<li>\n<p>通常，操作系统为每个设备控制器都有一个 <code class=\"blue\">设备驱动程序 (device driver)</code> ，它属于操作系统的一部分。这个设备驱动程序理解设备控制器，并为操作系统的其余部分提供 <code class=\"orange\">设备的统一接口(uniform interface)</code> 。CPU 和设备控制器可以 <code class=\"red\">并行执行</code> ，竞争 <code class=\"aqua\">内存周期 (memory cycles)</code> <span class=\"red\">(★)</span>。为了确保对共享内存的有序访问，需要 <code class=\"grey\">内存控制器</code> 来同步对内存的访问。</p>\n</li>\n</ol>\n<p>在下面的小节中，我们将描述这样一个系统如何运行的一些基础，重点关注系统的三个关键方面。我们从 <code class=\"red\">中断</code> 开始，它向 CPU 发出需要注意的事件的警报。然后讨论 <code class=\"aqua\">存储结构</code> 和 <code class=\"blue\">I/O 结构</code> 。</p>\n<h2 id=\"中断interrupts\"><a class=\"anchor\" href=\"#中断interrupts\">#</a> 中断 (Interrupts)</h2>\n<p>让我们考虑一个典型的计算机操作：一个执行 <code class=\"aqua\">I/O 操作</code> 的程序。</p>\n<ol>\n<li>\n<p>为了启动 I/O 操作， <code class=\"blue\">设备驱动程序</code> 加载 <code class=\"red\">设备控制器</code> 中相应的寄存器。</p>\n</li>\n<li>\n<p><code class=\"red\">设备控制器</code> 进而检查这些寄存器的内容，以决定采取什么操作 (例如 “从键盘读取一个字符”)。控制器开始将数据从设备传输到本地缓冲区。</p>\n<div class=\"note primary no-icon\">\n<p>一旦数据传输完成， <code class=\"red\">设备控制器</code> <span class=\"aqua\">通知</span> <code class=\"blue\">设备驱动程序</code> 它已经完成了它的操作。</p>\n</div>\n</li>\n<li>\n<p>然后， <code class=\"blue\">设备驱动程序</code> 将控制权交给 <code class=\"purple\">操作系统</code> 的其他部分，如果操作是读操作，可能返回数据或指向数据的指针。对于其他操作，设备驱动程序返回 <code class=\"aqua\">状态信息</code> ，如 “写操作成功完成” 或 “设备繁忙”。</p>\n</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>但是 <code class=\"red\">设备控制器</code> <span class=\"aqua\">如何通知</span> <code class=\"blue\">设备驱动程序</code> 它已经完成了它的操作呢？这是通过一个 <code class=\"pink\">中断</code> 完成的。</p>\n</div>\n<h3 id=\"概览\"><a class=\"anchor\" href=\"#概览\">#</a> 概览</h3>\n<ol>\n<li>\n<p>硬件可以在 <code class=\"aqua\">任何时候</code> 通过向 CPU <code class=\"red\">发送信号</code> 来触发中断，通常是通过 <code class=\"blue\">系统总线</code> 的方式。(计算机系统中可能有许多总线，但系统总线是 <code>主要部件</code> 之间的主要通信路径。)</p>\n<div class=\"note primary no-icon\">\n<p>中断也用于许多其他目的，并且是 <code>操作系统</code> 和 <code class=\"blue\">硬件</code> 之间如何交互的关键部分。</p>\n</div>\n</li>\n<li>\n<p>当 CPU 被中断时，它 <code class=\"purple\">停止正在做的事情</code> ，并立即将执行跳转到一个 <code class=\"red\">固定的位置</code> 。固定位置通常包含该中断的 <code class=\"pink\">服务例程 (service routine)</code>  所在的 <code class=\"blue\">起始地址</code> 。该中断服务例程进而开始执行。完成后，CPU 恢复被中断的计算。该操作的时间线，如图所示，IO 设备与 CPU 并行执行。</p>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_2.png\" alt=\"Untitled_2\" width=\"800px\" /></p>\n</li>\n<li>\n<p>中断是 <code class=\"blue\">计算机体系结构 (computer architecture)</code>  的重要组成部分。每种计算机设计都有自己的中断机制，但有几个功能是通用的。</p>\n<ol>\n<li>\n<p>中断必须将 <code class=\"red\">控制转移</code> 到适当的 <code class=\"purple\">中断服务例程 (interrupt service routine)</code> 。</p>\n<p>管理这种转移的直接方法是调用一个 <code class=\"grey\">通用例程 (generic routine)</code>  来检查中断信息，这个例程进而会调用特定于中断的 <code class=\"red\">处理程序(handler)</code> 。</p>\n<div class=\"note info no-icon\">\n<p>但是，中断必须 <code class=\"aqua\">快速处理</code> ，因为它们发生得 <code class=\"pink\">非常频繁</code> 。一个指向若干个 <code class=\"purple\">中断例程 (interrupt routines)</code>  的 <code class=\"blue\">指针表</code> 可以代替通用例程来提供必要的速度。</p>\n<ul>\n<li>由此，中断例程通过这张表间接调用，而不需要中间例程。</li>\n</ul>\n</div>\n<p>通常，指针表存储在 <code class=\"aqua\">低内存 (low memory)</code>  中 (前 100 左右的位置)。这些位置保存着各种设备的 <code class=\"blue\">中断服务例程的地址</code> 。</p>\n<div class=\"note success no-icon\">\n<p>这个地址数组，或者称为 <code class=\"pink\">中断向量 (interrupt vector)</code> ，由一个 <code class=\"orange\">唯一的数字</code> 作为索引，这个数字携带于 <code class=\"red\">中断请求</code> 中，用来提供 <code class=\"aqua\">触发中断的设备</code> 的中断服务例程的地址。</p>\n</div>\n<p>Windows 和 UNIX 等不同的操作系统都以这种方式调度中断。</p>\n</li>\n<li>\n<p>中断体系结构还必须保存任何被中断的计算的 <code class=\"blue\">状态信息</code> ，以便在为中断执行服务之后恢复这些信息。</p>\n<div class=\"note primary no-icon\">\n<p>如果中断例程需要修改 <code>处理器状态</code>  (例如，通过修改寄存器的值)，它必须显式地保存当前状态，然后在返回之前恢复该状态。</p>\n<ul>\n<li>在中断被服务后，保存的 <code class=\"aqua\">返回地址</code> 被加载到 <code class=\"red\">程序计数器 (program counter)</code>  中，中断的计算就像中断没有发生过一样恢复执行。</li>\n</ul>\n</div>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"中断的实现\"><a class=\"anchor\" href=\"#中断的实现\">#</a> 中断的实现</h3>\n<h4 id=\"基本的中断机制\"><a class=\"anchor\" href=\"#基本的中断机制\">#</a> 基本的中断机制</h4>\n<p>CPU 硬件有一条叫做 <code class=\"blue\">中断请求线 (interrupt-request line)</code>  的线，CPU 在 <code class=\"red\">执行每条指令后</code> 都会感知到这条线。</p>\n<ol>\n<li>\n<p>当 CPU 检测到一个控制器在中断请求线上 <code class=\"orange\">断言 (assert)</code>  了一个信号时，它读取 <code class=\"purple\">中断号 (interrupt number)</code> ，并使用该中断号作为中断向量的索引跳转到 <code class=\"aqua\">中断处理程序例程 (interrupt–handler routine)</code> ，然后在与该索引关联的地址处开始执行。</p>\n</li>\n<li>\n<p>中断处理程序 <code>保存</code> 它在运行过程中将要改变的任何 <code>状态</code> ，确定中断的原因，执行必要的处理，执行状态恢复，并执行 <code class=\"blue\">return_from_interrupt</code>  指令，使 CPU 返回到中断之前的执行状态。</p>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_3.png\" alt=\"Untitled_3\" width=\"700px\" /></p>\n<div class=\"note primary no-icon\">\n<p>我们说 <code>设备控制器</code> 通过在中断请求线上断言一个信号来 <code class=\"orange\">引发 (raises)</code>  中断，CPU <code class=\"aqua\">捕获 (catches)</code>  这个中断并将其 <code class=\"pink\">调度 (dispatches)</code>  给 <code>中断处理程序 (interrupt handler)</code> ，而中断处理程序通过服务设备来 <code class=\"blue\">清除 (clears)</code>  这个中断。图 1.4 总结了中断驱动的 I/O 循环。</p>\n</div>\n</li>\n</ol>\n<h4 id=\"现代操作系统的中断机制\"><a class=\"anchor\" href=\"#现代操作系统的中断机制\">#</a> 现代操作系统的中断机制</h4>\n<p>刚才描述的基本中断机制使 CPU 能够响应 <code class=\"aqua\">异步事件 (asynchronous event)</code> ，比如当设备控制器 <code class=\"blue\">准备就绪 (ready for service)</code>  时。</p>\n<ul>\n<li>\n<p>然而，在现代操作系统中，我们需要更复杂的中断处理特性：</p>\n<ol>\n<li>我们需要在关键处理期间 <code class=\"red\">延迟中断处理</code> 的能力。</li>\n<li>我们需要一种 <code class=\"blue\">高效的方法</code> 来为设备调度合适的中断处理程序。</li>\n<li>我们需要 <code class=\"pink\">多级中断 (multilevel interrupts)</code> ，以便操作系统能够区分 <code class=\"orange\">高优先级</code> 和 <code class=\"aqua\">低优先级</code> 的中断，并能够以适当的 <code class=\"red\">紧急程度</code> 进行响应。</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>在现代计算机硬件中，这三个特性是由 <code class=\"purple\">CPU</code>  和 <code class=\"blue\">中断控制器硬件 (interrupt-controller hardware)</code>  提供的。</p>\n</div>\n</li>\n</ul>\n<ol>\n<li>\n<p>大多数 CPU 都有 <code class=\"red\">两条</code> 中断请求线：</p>\n<ul>\n<li>一条中断线是 <code class=\"blue\">不可屏蔽中断 (nonmaskable interrupt)</code> ，它是为 <code class=\"red\">不可恢复的内存错误</code> 等事件保留的。</li>\n<li>第二条中断线是 <code class=\"purple\">可屏蔽的 (maskable)</code> ，CPU 可以在执行不能被中断的关键指令序列之前 <code class=\"aqua\">关闭 (turned off)</code>  它。<div class=\"note warning no-icon\">\n<p><code>可屏蔽中断</code> 被 <code class=\"red\">设备控制器</code> 用来请求服务。</p>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p>回想一下， <code class=\"aqua\">向量化 (vectored)</code>  的中断机制的目的是减少 <code class=\"blue\">单个的中断处理程序</code> 去搜索所有可能的中断源以确定哪个中断源需要服务的需要。（亦即，不使用通用例程，而使用中断向量直接索引中断处理程序。）</p>\n<div class=\"note primary no-icon\">\n<p>然而，实际上，计算机拥有的设备 (从而， <code class=\"red\">中断处理程序</code> ) 比它们在中断向量中的 <code>地址元素 (address elements)</code>  要多。</p>\n</div>\n<p>解决这个问题的一种常见方法是使用 <code class=\"blue\">中断链接 (interrupt chaining)</code> ，其中 <code class=\"purple\">中断向量</code> 中的每个元素都指向一个中断处理程序的 <code class=\"red\">列表 (list)</code>  的头。当一个中断被引发时，相应列表上的处理程序将被 <code class=\"aqua\">逐个调用</code> ，直到找到一个可以服务该请求的处理程序为止。</p>\n<div class=\"note info no-icon\">\n<p>这种结构是一个 <code class=\"pink\">巨大的中断表</code> 的开销和 <code class=\"blue\">单个的中断处理程序</code> 调度中断 (逐个顺序查找) 的低效率之间的 <code class=\"red\">折衷</code> 。</p>\n<ul>\n<li>亦即，中断表的开销增加了 (列表索引 + 中断处理程序地址本身)，而查找中断处理程序的效率提高了，典型的空间换时间。</li>\n</ul>\n</div>\n<details class=\"info\"><summary>Intel 处理器的中断向量设计</summary><div>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_4.png\" alt=\"Untitled_4\" width=\"600px\" /></p>\n<ul>\n<li>从 0 到 31 的事件是 <code class=\"blue\">不可屏蔽</code> 的，用于发出各种 <code class=\"red\">错误条件</code> 的信号。</li>\n<li>从 32 到 255 的事件是 <code class=\"aqua\">可屏蔽</code> 的，用于 <code class=\"grey\">设备产生的中断</code> 等目的。</li>\n</ul>\n</div></details>\n</li>\n<li>\n<p>中断机制还实现了一个 <code class=\"purple\">中断优先级级别 (interrupt priority levels)</code>  的系统。</p>\n<div class=\"note primary no-icon\">\n<p>这些级别使 CPU 可以 <code class=\"orange\">延迟</code> 对 <code class=\"aqua\">低优先级中断</code> 的处理，而不用屏蔽所有的中断，并使 <code class=\"blue\">高优先级中断</code> 可以 <code class=\"red\">抢占</code> 低优先级中断的执行。</p>\n</div>\n</li>\n</ol>\n<p>总之，中断在整个现代操作系统中都被使用，以处理 <code class=\"pink\">异步事件</code> 。（至于其他目的，我们将在本文中讨论）</p>\n<ul>\n<li><code class=\"blue\">设备控制器</code> 和 <code class=\"red\">硬件故障 (hardware faults)</code>  会引发中断。</li>\n<li>为了使 <code class=\"aqua\">最紧急的工作</code> 先完成，现代计算机采用了 <code class=\"aqua\">中断优先级</code> 系统。</li>\n<li>由于中断在对时间敏感的处理中被大量使用，因此需要 <code class=\"grey\">高效的中断处理</code> 来获得良好的系统性能。</li>\n</ul>\n<h2 id=\"存储结构\"><a class=\"anchor\" href=\"#存储结构\">#</a> 存储结构</h2>\n<details class=\"info\"><summary>Wikipedia: Computer memory</summary><div>\n<p>In computing, <span class=\"blue\"><strong>memory</strong></span> is a device or system that is used to  <code class=\"pink\">store information for immediate use</code>  in a computer or related computer hardware and digital electronic devices. The term <em>memory</em> is often synonymous with the term  <code class=\"blue\">primary storage</code>  or  <code class=\"red\">main memory</code> . An archaic synonym for memory is <strong>store</strong>.</p>\n<ul>\n<li>\n<p>Computer  <code class=\"blue\">memory</code>  operates at a high speed compared to  <code class=\"grey\">storage</code>  that is slower but offers higher capacities. If needed, contents of the computer memory can be transferred to storage; a common way of doing this is through a memory management technique called  <code class=\"pink\">virtual memory</code> .</p>\n</li>\n<li>\n<p>Modern memory is implemented as  <code class=\"orange\">semiconductor memory</code> , where data is stored within  <code class=\"pink\">memory cells</code>  built from MOS transistors and other components on an integrated circuit. There are two main kinds of semiconductor memory, <strong>volatile</strong> and <strong>non-volatile</strong>.</p>\n<ul>\n<li>Examples of <span class=\"blue\"><strong>non-volatile memory</strong></span> are  <code class=\"aqua\">flash memory</code>  and ROM, PROM, EPROM and EEPROM memory.</li>\n<li>Examples of <span class=\"red\"><strong>volatile memory</strong></span> are  <code class=\"pink\">dynamic random-access memory (DRAM)</code>  used for primary storage, and  <code class=\"blue\">static random-access memory (SRAM)</code>  used for CPU cache.</li>\n</ul>\n</li>\n<li>\n<p>Most semiconductor memory is organized into  <code class=\"red\">memory cells</code>  each storing one bit (0 or 1). Flash memory organization includes both one bit per memory cell and multi-level cell capable of storing multiple bits per cell. The memory cells are grouped into  <code class=\"blue\">words</code>  of fixed word length, for example, 1, 2, 4, 8, 16, 32, 64 or 128 bits. Each word can be accessed by  <code class=\"aqua\">a binary address of N bits</code> , making it possible to store <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span> words in the memory.</p>\n</li>\n</ul>\n</div></details>\n<h3 id=\"主存\"><a class=\"anchor\" href=\"#主存\">#</a> 主存</h3>\n<p>CPU 只能从 <code class=\"red\">内存 (memory)</code>  中加载 <code class=\"blue\">指令 (instructions)</code> ，所以任何 <code class=\"aqua\">程序 (programs)</code>  必须先加载到内存中才能运行。</p>\n<ol>\n<li>\n<p>通用计算机的大部分程序都是运行在 <code class=\"aqua\">可重写的存储器 (rewritable memory)</code> ，称为 <code class=\"pink\">主存储器 (main memory)</code>  中的。</p>\n<div class=\"note info no-icon\">\n<p>主存也称为 <code class=\"blue\">随机存取存储器 (random-access memory, RAM)</code> ，通常采用 <code class=\"orange\">半导体技术</code> 实现，称为 <code class=\"purple\">动态随机存取存储器 (DRAM)</code> 。</p>\n</div>\n<details class=\"primary\"><summary>维基百科：动态随机存取存储器</summary><div>\n<p>动态随机存取存储器（Dynamic Random Access Memory，DRAM）是一种 <code class=\"aqua\">半导体存储器</code> ，主要的作用原理是利用 <code class=\"orange\">电容内存储电荷的多寡</code> 来代表一个二进制比特（bit）是 1 还是 0。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别资料，而导致资料毁损。因此对于 DRAM 来说， <code class=\"red\">周期性地充电</code> 是一个不可避免的条件。由于这种 <code class=\"blue\">需要定时刷新</code> 的特性，因此被称为 <code class=\"red\">“动态”</code>  存储器。相对来说，静态存储器（SRAM）只要存入资料后，纵使不刷新也不会丢失记忆。</p>\n<ul>\n<li>\n<p>与 SRAM 相比，DRAM 的优势在于结构简单 —— 每一个比特的资料都只需一个电容跟一个晶体管来处理，相比之下在 SRAM 上一个比特通常需要六个晶体管。正因这缘故，DRAM 拥有非常高的密度，单位体积的容量较高因此 <code class=\"aqua\">成本较低</code> 。但相反的，DRAM 也有 <code class=\"grey\">访问速度较慢</code> ，耗电量较大的缺点。</p>\n</li>\n<li>\n<p>与大部分的随机存取存储器（RAM）一样，由于存在 DRAM 中的资料会在电力切断以后很快消失，因此它属于一种易失性存储器设备。</p>\n</li>\n</ul>\n</div></details>\n</li>\n<li>\n<p>计算机也使用 <code class=\"green\">其他形式的存储器</code> 。例如，计算机上电后运行的第一个程序是 <code class=\"blue\">引导程序 (bootstrap program)</code> ，它运行后会加载 <code class=\"purple\">操作系统</code> 。</p>\n<ol>\n<li>\n<p>由于 RAM 是易失性的，当电源关闭或其他情况下将丢失它的内容，因此我们不能信任它来保存引导程序。</p>\n</li>\n<li>\n<p>取而代之的，计算机使用 <code class=\"red\">电可擦可编程只读存储器 (EEPROM)</code>  以及其他形式的 <code class=\"aqua\">固件 (firmware)</code> ，这种不经常被写入的、非易失性的存储，来保存引导程序。</p>\n<div class=\"note success no-icon\">\n<p>EEPROM 存储的内容可以被更改，但 <code class=\"blue\">不能频繁更改</code> 。此外，它的速度较慢，因此它包含的大部分是 <code class=\"red\">不经常使用的</code> 静态程序和数据。</p>\n<ul>\n<li>例如，iPhone 使用 EEPROM 来存储设备的序列号和硬件信息。</li>\n</ul>\n</div>\n</li>\n</ol>\n<p>所有形式的内存都提供一个 <code class=\"red\">字节数组 (an array of bytes)</code> ，每个字节都有自己的 <code class=\"blue\">地址</code> 。</p>\n<ul>\n<li>与内存的交互是通过对特定的 <code class=\"blue\">内存地址 (memory addresses)</code> ，执行一系列的 <code class=\"pink\">load 指令</code> 或 <code class=\"pink\">store 指令</code> 来实现的。\n<ul>\n<li>load 指令：将 <code class=\"aqua\">一个字节 (byte)</code>  或 <code class=\"aqua\">一个字 (word)</code>  从 <code class=\"purple\">主存</code> 移动到 <code class=\"red\">CPU 内部的寄存器</code> ，而</li>\n<li>store 指令：将一个 <code class=\"red\">寄存器</code> 中的内容移动到 <code class=\"purple\">主存</code> 。</li>\n</ul>\n</li>\n<li>除了显式的 load 和 store 指令，CPU 为了执行会 <code class=\"pink\">自动地</code> 从主存中加载指令，该指令的位置从 <code class=\"aqua\">程序计数器</code> 中获得。</li>\n</ul>\n</li>\n<li>\n<p>一个典型的 <code class=\"green\">指令-执行周期 (instruction-execution cycle)</code> ，在具有 <code class=\"blue\">冯诺伊曼体系结构</code> 的系统上执行时，</p>\n<ol>\n<li>首先从内存中 <code class=\"aqua\">取出 (fetch)</code>  一条指令，并将该指令存储在 <code class=\"purple\">指令寄存器 (instruction register)</code>  中。</li>\n<li>该指令随后被 <code>解码 (decode)</code> ，并可能导致 <code class=\"aqua\">操作数 (operands)</code>  从内存中被取出并存储在某个内部 <code class=\"red\">寄存器</code> 中。</li>\n<li>在指令完成对操作数的 <code class=\"orange\">执行 (execute)</code>  后，结果可能会被存储回内存中。</li>\n</ol>\n<div class=\"note primary no-icon\">\n<p>注意到内存单元只看到一个 <code class=\"blue\">内存地址流 (a stream of memory addresses)</code> ，它不知道这些地址是如何生成的（通过指令计数器、索引、间接、字面值地址或其他方式），也不知道它们的用途（是指令，还是数据）。</p>\n<ul>\n<li>因此，我们可以 <code>忽略</code> 程序是 <code>如何生成</code> 内存地址的，而只对运行的程序生成的 <code class=\"red\">内存地址序列</code> 感兴趣。</li>\n</ul>\n</div>\n</li>\n</ol>\n<h3 id=\"辅存\"><a class=\"anchor\" href=\"#辅存\">#</a> 辅存</h3>\n<ol>\n<li>\n<p>理想情况下，我们希望程序和数据永久地驻留在主存中。这种安排在大多数系统上通常是不可能的，原因有二：</p>\n<ul>\n<li>主存通常太小，无法永久存储所有需要的程序和数据。</li>\n<li>如前所述，主存储器是易失性的，它在电源关闭或其他丢失时丢失其内容。</li>\n</ul>\n<p>因此，大多数计算机系统都提供 <code class=\"red\">辅助存储器 (secondary storage)</code>  作为主存储器的扩展。对辅存的主要需求是它能够永久地保存大量的数据。</p>\n<div class=\"note info no-icon\">\n<p>最常见的辅助存储设备是 <code class=\"blue\">硬盘驱动器 (hard-disk drives, HDDs)</code>  和 <code class=\"pink\">非易失性存储器 (nonvolatile memory, NVM) 设备</code> ，它们为程序和数据提供存储。</p>\n</div>\n</li>\n<li>\n<p>大多数程序（系统程序和应用程序），在 <code class=\"red\">加载到内存之前</code> 都存储在辅助存储器中，因而许多程序使用辅助存储器作为它们处理的 <code class=\"aqua\">源 (source)</code>  和 <code class=\"aqua\">目的地 (destination)</code> 。同时，辅助存储器也比主存储器 <code class=\"blue\">慢得多</code> 。因此，正如我们在第 11 章中讨论的那样，对辅助存储器的适当管理对于计算机系统是至关重要的。</p>\n</li>\n</ol>\n<h3 id=\"存储器层次结构\"><a class=\"anchor\" href=\"#存储器层次结构\">#</a> 存储器层次结构</h3>\n<p>然而，从更广泛的意义上说，我们所描述的存储结构（由 <code class=\"aqua\">寄存器</code> 、 <code class=\"red\">主存储器</code> 和 <code class=\"blue\">辅助存储器</code> 组成），只是许多可能的存储系统设计中的一种。</p>\n<ul>\n<li>其他可能的组件包括 <code>高速缓存存储器 (cache memory)</code> 、CD-ROM 或蓝光光盘、磁带等。</li>\n<li>那些足够慢、足够大、只用于特殊目的的存储设备（例如，存储其他设备上的材料的备份副本），被称为 <code class=\"grey\">三级存储 (tertiary storage)</code> 。</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>每个存储系统都提供基本的 <code>存储数据</code> 的功能，并将该数据保存到以后被 <code>检索 (retrieve)</code>  为止。</p>\n<ul>\n<li>不同存储系统之间的主要区别在于 <code class=\"red\">速度 (speed)</code> 、 <code class=\"blue\">大小 (size)</code>  和 <code class=\"orange\">易失性 (volatility)</code> 。</li>\n</ul>\n</div>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_5.png\" alt=\"Untitled_5\" width=\"800px\" /></p>\n<p>如图所示，各种各样的 <code class=\"red\">存储系统 (storage systems)</code>  可以根据 <code class=\"blue\">存储容量</code> 和 <code class=\"aqua\">访问时间</code> 组织成一个 <code class=\"red\">层次结构</code> 。</p>\n<ol>\n<li>\n<p>一般的规则是，大小和速度之间要有 <code class=\"aqua\">权衡</code> ，越小的和越快的存储器 <code class=\"pink\">越靠近 CPU</code> 。</p>\n<ul>\n<li>\n<p>如图所示，除了速度和容量不同之外，各种存储系统要么是 <code class=\"red\">易失性的</code> ，要么是 <code class=\"blue\">非易失性的</code> 。</p>\n</li>\n<li>\n<p>图中最上面的四层存储器是用 <code class=\"aqua\">半导体存储器 (semiconductor memory)</code>  构成的，半导体存储器是由半导体电路组成的。</p>\n</li>\n<li>\n<p>第四级的 <code class=\"blue\">NVM (nonvolatile memory)</code>  设备有几种变体，但通常都 <code class=\"purple\">比硬盘快</code> 。</p>\n<div class=\"note success no-icon\">\n<p>NVM 设备最常见的形式是 <code class=\"red\">闪存 (flash memory)</code> ，它在智能手机和平板电脑等 <code class=\"blue\">移动设备</code> 中很流行。</p>\n<ul>\n<li>闪存也越来越多地用于笔记本电脑、台式机和服务器的长期存储。</li>\n</ul>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p>由于 <code class=\"aqua\">存储 (storage)</code>  在操作系统结构中扮演着重要的角色，我们将在本文中经常提到它。一般来说，我们会使用以下术语：</p>\n<ol>\n<li>\n<p><span class=\"red\">易失性存储器 (Volatile storage)</span>：将会被简称为 <code class=\"pink\">内存 (memory)</code> 。<br />\n如果需要强调特定类型的存储设备（例如，寄存器），我们将会显式地说明。</p>\n</li>\n<li>\n<p><span class=\"blue\">非易失性存储器 (Nonvolatile storage)</span>：在失电时保留其内容，它将被称为 <code class=\"blue\">NVS</code> <span class=\"red\">（★）</span>。</p>\n<p>我们在介绍 NVS 上花费的绝大多数时间，都是在 <code class=\"aqua\">辅助存储</code> 上。</p>\n<div class=\"note primary no-icon\">\n<p>辅助存储可以分为两种不同的类型（正如存储器层次结构图中所示）：</p>\n<ul>\n<li>\n<p><span class=\"blue\"><strong>机械式的 (Mechanical)</strong></span>。这种存储系统的几个例子是 <code class=\"aqua\">磁盘驱动器 (HDDs)</code> 、光盘、全息存储和磁带。</p>\n<p>如果我们需要强调特定类型的机械存储设备（例如，磁带），我们将会显式地说明。</p>\n</li>\n<li>\n<p><span class=\"red\"><strong>电子式的 (Electrical)</strong></span>。这种存储系统的几个例子是 <code class=\"pink\">闪存 (flash memory)</code> 、FRAM、NRAM 和 <code class=\"purple\">固态磁盘 (solid-state disk, SSD)</code> 。</p>\n<p>电存储器将被称为 <code class=\"blue\">NVM (nonvolatile memory)</code> 。如果我们需要强调特定类型的电存储设备（例如，SSD），我们将会显式地说明。</p>\n</li>\n</ul>\n<p><span class=\"blue\">机械存储</span>通常比电存储更大，每字节更便宜。相反，<span class=\"red\">电存储</span>通常比机械存储成本高，体积小，速度快。</p>\n</div>\n</li>\n</ol>\n</li>\n<li>\n<p>一个完整的存储系统的设计，必须平衡刚才讨论的所有因素：它必须只使用 <code class=\"red\">必要的</code> 昂贵内存，同时提供 <code class=\"aqua\">尽可能便宜</code> 的非易失性存储。</p>\n<div class=\"note info no-icon\">\n<p>当两个组件之间的 <code class=\"aqua\">访问时间 (access time)</code>  或 <code class=\"red\">传输速率 (transfer rate)</code>  存在较大差异时，可以安装 <code class=\"blue\">高速缓存 (cache)</code>  来提高性能。</p>\n</div>\n</li>\n</ol>\n<h2 id=\"io-结构\"><a class=\"anchor\" href=\"#io-结构\">#</a> I/O 结构</h2>\n<p>操作系统代码的 <code class=\"blue\">很大一部分</code> 都用于 <code class=\"red\">管理 I/O</code> ，这既是因为它对系统的可靠性和性能很重要，也是因为设备有着不同的性质。</p>\n<div class=\"note primary no-icon\">\n<p>回想一下，在本节的开始，通用计算机系统由多个设备组成，所有这些设备都通过公共总线交换数据。第 1.2.1 节中描述的 <code class=\"aqua\">中断驱动的 I/O</code>  的形式适用于 <code class=\"pueple\">移动少量的数据</code> ，但用于 NVS I/O 等 <code class=\"blue\">大量数据移动</code> 时可能会产生 <code class=\"red\">很高的开销</code> 。</p>\n</div>\n<p>为了解决这个问题，使用了 <code class=\"blue\">直接内存访问 (direct memory access, DMA)</code> ：在为 I/O 设备设置了缓冲区、指针和计数器之后， <code class=\"orange\">设备控制器</code> 直接在 <code class=\"aqua\">设备</code> 和 <code class=\"red\">主存</code> 之间传输将整个 <code class=\"pink\">数据块</code> ，而<span class=\"red\"><strong>不需要 CPU 的干预</strong></span>。图 1.7 显示了计算机系统中所有组件的相互作用。</p>\n<ul>\n<li><code class=\"blue\">每个块</code> 只产生 <code class=\"red\">一个中断</code> ，以告诉设备驱动程序操作已经完成，而不是像低速设备那样 <code class=\"grey\">每个字节</code> 产生一个中断。</li>\n<li>当设备控制器执行这些操作时，CPU 可以完成其他工作。</li>\n</ul>\n<p><img data-src=\"/assets/computer-science/operating-system/Chapter1-Introduction/Untitled_6.png\" alt=\"Untitled_6\" width=\"500px\" /></p>\n<div class=\"note success no-icon\">\n<p>一些高端系统采用 <code class=\"aqua\">交换 (switch)</code>  而不是总线架构。在这些系统上，多个组件可以 <code class=\"red\">并发地</code> 与其他组件通信，而不是竞争共享总线的周期。在这种情况下，DMA 更为高效。</p>\n</div>\n<h1 id=\"操作系统的执行\"><a class=\"anchor\" href=\"#操作系统的执行\">#</a> 操作系统的执行</h1>\n",
            "tags": [
                "计算机科学",
                "操作系统",
                "操作系统"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/computer-network/network-layer-1/",
            "url": "https://hazuki.cn/computer-science/computer-network/network-layer-1/",
            "title": "第4章 网络层：数据平面",
            "date_published": "2021-12-10T06:38:56.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n课程：哈尔滨工业大学 计算机网络<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=\"> https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web</span></p>\n</div>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<div class=\"note primary no-icon\">\n<p>我们在前一章中了解到， <code>传输层</code> 依靠 <code class=\"red\">网络层</code> 的 <code class=\"red\">主机到主机</code> 通信服务提供各种形式的 <code>进程到进程</code> 通信。我们还了解到，传输层在不了解网络层如何实际实现该服务的情况下这样做。也许您现在想知道，主机到主机通信服务的背后是什么，是什么使它运行？</p>\n</div>\n<p>网络层服务：提供 <code class=\"aqua\">主机到主机(host-to-host)</code>  的通信服务。</p>\n<ul>\n<li><span class=\"red\">发送主机</span>：将 <code class=\"orange\">报文段(segment)</code>  封装到 <code class=\"blue\">数据报(datagram)</code>  中。</li>\n<li><span class=\"blue\">接受主机</span>：向 <code class=\"purple\">传输层</code> 交付 <code class=\"orange\">报文段(segment)</code> 。</li>\n<li><span class=\"aqua\">路由器</span>：检验所有穿越它的 IP 数据报的 <code class=\"pink\">首部(header)</code> ，决策 <code class=\"aqua\">如何处理</code>  IP 数据报。</li>\n</ul>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_0.png\" alt=\"Untitled_0\" width=\"600px\" /></p>\n<div class=\"note primary no-icon\">\n<p>如图所示，与 <code>传输层</code> 和 <code>应用层</code> 不同的是，在网络中的每个 <code class=\"red\">主机</code> 和 <code class=\"aqua\">路由器</code> 中都有一部分 <code class=\"blue\">网络层</code> 。</p>\n</div>\n<h2 id=\"转发和路由\"><a class=\"anchor\" href=\"#转发和路由\">#</a> 转发和路由</h2>\n<ol>\n<li>\n<p>网络层可以分解为两个 <code class=\"pink\">相互作用</code> 的部分: <code class=\"blue\">数据平面</code> 和 <code class=\"purple\">控制平面</code> 。</p>\n<ul>\n<li>在第四章中，我们将首先介绍网络层的<span class=\"aqua\">数据平面功能</span>：<div class=\"note info no-icon\">\n<ul>\n<li>The  <code class=\"blue\">per-router functions</code>  in the network layer that determine how a datagram (that is, a network-layer packet) arriving on one of a router’s  <code class=\"orange\">input links</code>  is forwarded to one of that router’s  <code class=\"aqua\">output links</code> .</li>\n<li>网络层中的 <code class=\"blue\">每个路由器的功能</code> ，它决定到达路由器的一个 <code class=\"orange\">输入链路</code> 上的数据报如何被转发到路由器的一个 <code class=\"aqua\">输出链路</code> 上。</li>\n<li>我们将介绍传统的 <code class=\"red\">IP 转发</code> （转发基于数据报的 <code class=\"aqua\">目的地址</code> ）和 <code class=\"purple\">通用转发</code> （转发和其他功能可以使用 <code class=\"blue\">数据报报头</code> 中几个不同字段中的值来执行）。</li>\n<li>我们将详细学习 <code class=\"aqua\">IPv4</code>  和 <code class=\"purple\">IPv6</code>  协议及其 <code class=\"red\">寻址(addressing)</code> 。</li>\n</ul>\n</div>\n</li>\n<li>在第 5 章中，我们将讨论网络层的<span class=\"red\">控制平面功能</span>：<div class=\"note primary no-icon\">\n<ul>\n<li>The  <code class=\"red\">network-wide logic</code>  that controls  <code class=\"blue\">how a datagram is routed</code>  among routers along an  <code class=\"aqua\">end-to-end path</code>  from the source host to the destination host.</li>\n<li>控制数据报如何沿 <code class=\"aqua\">端到端路径</code> 在从源主机到目标主机的路由器之间 <code class=\"blue\">路由</code> 的 <code class=\"red\">网络范围的逻辑 (network-wide logic)</code> 。</li>\n<li>我们将涵盖 <code>路由算法</code> ，以及 <code>路由协议</code> ，如 OSPF 和 BGP，在今天的 Internet 中广泛使用。</li>\n</ul>\n</div>\n</li>\n</ul>\n<p>传统上，这些 <code class=\"blue\">控制平面路由协议</code> 和 <code class=\"aqua\">数据平面转发功能</code> 是在一个 <code class=\"red\">路由器</code> 中一起整体实现的。</p>\n<ul>\n<li><code class=\"purple\">软件定义网络(SDN)</code>  通过将这些 <code class=\"pink\">控制平面的功能</code> 作为一个 <code class=\"orange\">单独的服务</code> 来显式地分离数据平面和控制平面，通常在一个远程 <code class=\"aqua\">控制器(controller)</code>  中。</li>\n</ul>\n</li>\n<li>\n<p>由上述讨论可知，网络层的核心功能：</p>\n</li>\n</ol>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_8.png\" alt=\"Untitled_8\" width=\"800px\" /></p>\n<ul>\n<li><span class=\"red\">转发 (forwarding)</span>：将分组从路由器的 <code class=\"orange\">输入端口</code> 转移到合适的 <code class=\"aqua\">输出端口</code> 。 <code class=\"pink\">转发表</code> 用于确定在本路由器如何转发分组。</li>\n<li><span class=\"blue\">路由 (routing)</span>：确定分组 <code class=\"aqua\">从源到目的</code> 经过的 <code class=\"red\">路径</code> 。 <code class=\"purple\">路由算法(协议)</code>  用于确定通过网络的 <code class=\"blue\">端到端路径</code> 。</li>\n<li><span class=\"orange\">连接建立</span>：某些网络的重要功能，并非所有网络均支持（如  <code>ATM 网络</code> 支持连接建立）。<br />\n数据分组 <code>传输之前</code> 两端主机需要首先建立 <code class=\"blue\">虚拟(逻辑)连接</code> ，路径上的每个 <code class=\"pink\">网络设备(如路由器)</code>  参与连接的建立。<div class=\"note info no-icon\">\n<p>网络层连接与传输层连接的对比：</p>\n<ul>\n<li><span class=\"blue\">网络层连接</span>：两个 <code class=\"purple\">主机</code> 之间（路径上的路由器等 <code class=\"red\">网络设备参与</code> ）</li>\n<li><span class=\"red\">传输层连接</span>：两个 <code class=\"purple\">应用进程</code> 之间（对中间网络设备 <code class=\"aqua\">透明</code> ）</li>\n</ul>\n</div>\n</li>\n</ul>\n<h2 id=\"网络服务模型\"><a class=\"anchor\" href=\"#网络服务模型\">#</a> 网络服务模型</h2>\n<p><code class=\"red\">虚电路服务</code> 与 <code class=\"blue\">数据报服务</code> 的对比：</p>\n<table>\n<thead>\n<tr>\n<th>对比的方面</th>\n<th>虚电路网络（Virtual-circuit network）</th>\n<th>数据报网络（Datagram network）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>思路</td>\n<td>可靠通信应当由 <code class=\"blue\">网络</code> 来保证</td>\n<td>可靠通信应当由 <code class=\"aqua\">用户主机</code> 来保证</td>\n</tr>\n<tr>\n<td>连接的建立</td>\n<td><code class=\"red\">连接服务</code></td>\n<td><code class=\"blue\">无连接服务</code></td>\n</tr>\n<tr>\n<td>终点地址</td>\n<td>仅在 <code class=\"grey\">连接建立阶段</code> 使用，每个分组使用短的 <code class=\"orange\">虚电路号</code></td>\n<td>每个分组都有终点的完整地址，即 <code class=\"pink\">IP地址</code></td>\n</tr>\n<tr>\n<td>分组的转发（传输路径）</td>\n<td>首先为系列分组的传输 <code class=\"aqua\">确定从源到目的经过的路径</code> （建立连接），然后沿该路径（连接）传输系列分组，系列分组 <code class=\"pink\">传输路径相同</code> 。传输结束后拆除连接。</td>\n<td>不事先为系列分组的传输确定传输路径，每个分组 <code class=\"blue\">独立查找转发表</code> 确定传输路径，不同分组可能传输路径不同。</td>\n</tr>\n<tr>\n<td>节点出故障时</td>\n<td>所有通过 <code class=\"red\">出故障的节点</code> 的虚电路均不能工作</td>\n<td>出故障的节点可能会丢弃分组，一些路由可能会发生变化</td>\n</tr>\n<tr>\n<td>分组的顺序</td>\n<td>总是 <code class=\"aqua\">按发送顺序</code> 到达终点</td>\n<td>到达终点的顺序 <code class=\"blue\">不一定按发送的顺序</code></td>\n</tr>\n<tr>\n<td>端到端的差错处理和流量控制</td>\n<td>可以由网络负责，也可以由用户主机负责</td>\n<td>由用户主机负责</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"路由器工作原理\"><a class=\"anchor\" href=\"#路由器工作原理\">#</a> 路由器工作原理</h1>\n<h2 id=\"路由器中各部分的功能\"><a class=\"anchor\" href=\"#路由器中各部分的功能\">#</a> 路由器中各部分的功能</h2>\n<h3 id=\"输入端口处理\"><a class=\"anchor\" href=\"#输入端口处理\">#</a> 输入端口处理</h3>\n<p>基于目的地转发 (Destination-Based Forwarding)</p>\n<h3 id=\"交换switching\"><a class=\"anchor\" href=\"#交换switching\">#</a> 交换 (Switching)</h3>\n<h3 id=\"输出端口处理\"><a class=\"anchor\" href=\"#输出端口处理\">#</a> 输出端口处理</h3>\n<h2 id=\"何处出现排队\"><a class=\"anchor\" href=\"#何处出现排队\">#</a> 何处出现排队</h2>\n<h2 id=\"分组调度\"><a class=\"anchor\" href=\"#分组调度\">#</a> 分组调度</h2>\n<p>现在让我们回到确定 <code>排列的分组</code> 在 <code>输出链路(outgoing link)</code>  上传输的次序问题。当分组到达 <code>链路输出队列</code> 时，</p>\n<ol>\n<li>如果链路当前正忙于传输另一个的分组，则该分组 <code>排队等待</code> 传输。</li>\n<li>若路由器已经没有足够的缓存空间容纳该到达的分组，则队列的 <code>分组丢弃策略</code> 将决定是否 <code>丢弃</code>  (意味着丢失) 该分组，或者从队列中 <code>移除其他分组</code> 来为到达的分组腾出空间。</li>\n</ol>\n<p>在接下来的讨论中，我们不考虑分组丢弃。当一个分组完全通过输出链路传输时，它将从队列中移除。</p>\n<h3 id=\"先进先出first-in-first-out-fifo\"><a class=\"anchor\" href=\"#先进先出first-in-first-out-fifo\">#</a> 先进先出 (First-in-First-Out, FIFO)</h3>\n<ol>\n<li>\n<p>先进先出 (FIFO) 也称为 <code>先来先服务</code>  (first-come-first-served, FCFS)，它选择分组的次序与这些 <code>分组到达</code> 输出链路队列的 <code>次序相同</code> 。到达的分组加入到单一的等待队列的末尾，保持着次序，当分组到达队列的最前面时就接受服务。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_1.png\" alt=\"Untitled_1\" width=\"600px\" /></p>\n</li>\n<li>\n<p>如图所示，在先进先出的规则下，分组以和它们到达队列时 <code>相同的次序</code> 离开。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_2.png\" alt=\"Untitled_2\" width=\"800px\" /></p>\n</li>\n</ol>\n<h3 id=\"优先级排队priority-queuing\"><a class=\"anchor\" href=\"#优先级排队priority-queuing\">#</a> 优先级排队 (Priority Queuing)</h3>\n<ol>\n<li>\n<p>在优先级排队的规则下，到达输出链路的分组 <code>到达队列时</code> 将被分类为若干个 <code>优先级类(priority classes)</code> ，每个优先级类通常都有 <code>自己的队列</code> ，如图所示。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_3.png\" alt=\"Untitled_3\" width=\"600px\" /></p>\n<p>当选择一个分组进行传输时，优先级排队规则</p>\n<ol>\n<li>从具有 <code>非空队列</code> 的 <code>最高优先级</code> 的类中选择一个分组进行传输。</li>\n<li><code>同一优先级类</code> 中的分组之间的选择通常以 <code>先进先出(FIFO)</code>  的规则完成。</li>\n</ol>\n<div class=\"note primary no-icon\">\n<p>在实践中，网络操作员 (network operator) 可以配置一个队列，以便让携带 <code>网络管理信息</code> 的分组相比 <code>用户流量</code> 拥有更高的优先级。此外，携带 <code>实时的(real-time)</code>  VoIP (voice-over-IP) 分组相比 <code>非实时(non-real-time)</code>  的流量 (如携带 e-mail 的分组) 拥有更高的优先级。</p>\n</div>\n</li>\n<li>\n<p>如图所示，在分组 1 传输完成后，优先级较高的 <code>分组 3</code>  将先于 <code>分组 2</code>  传输，尽管分组 2 更早到达队列。在分组 2 传输过程中到达的 <code>分组4</code> ，尽管它拥有更高的优先级，也只有在分组 2 传输完成后才能开始传输。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_4.png\" alt=\"Untitled_4\" width=\"800px\" /></p>\n<div class=\"note info no-icon\">\n<p>在 <code>非抢占式优先级排队</code>  (non-preemptive priority queuing) 规则下，分组一旦开始传输就 <code>不能被打断</code> 。</p>\n</div>\n</li>\n</ol>\n<h3 id=\"轮询round-robin和加权公平排队weighted-fair-queuing-wfq\"><a class=\"anchor\" href=\"#轮询round-robin和加权公平排队weighted-fair-queuing-wfq\">#</a> 轮询 (Round Robin) 和加权公平排队 (Weighted Fair Queuing, WFQ)</h3>\n<ol>\n<li>\n<p>在 <code>轮询排队</code> 的规则下，分组如同优先级排队那样被分成 <code>若干个类(classes)</code> ，但是，类之间 <code>并没有</code> 严格的服务优先级，轮询调度程序在类之间 <code>轮流提供服务</code> 。一个 <code>保持工作</code> 的轮询排队规则，在寻找某个类的分组而发现其 <code>队列为空</code> 时，将立即检查轮询序列中的 <code>下一个类</code> 。最简单的拥有两个类的轮询规则如图所示。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_5.png\" alt=\"Untitled_5\" width=\"800px\" /></p>\n<div class=\"note primary no-icon\">\n<p><code>保持工作排队(work-conseving queuing)</code>  规则将永远 <code>不允许链路</code> 在有 (任何类的) 分组排队等待传输时 <code>保持空闲</code> 。</p>\n</div>\n</li>\n<li>\n<p>在 <code>路由器</code> 中广泛应用的一种通用形式的 <code>轮询排队</code> ，是所谓的 <code>加权公平排队(Weighted Fair Queuing, WFQ)规则</code> ，如图所示。与轮询排队一样，WFQ 调度程序也是以 <code>循环的方式</code> 为各个类提供服务，同时它也使用 <code>保持工作排队</code> 的规则。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_6.png\" alt=\"Untitled_6\" width=\"600px\" /></p>\n<p>WFQ 与轮询排队的不同之处在于，每个类在 <code>任何时间间隔</code> 内可能收到 <code>不同数量的服务</code> 。具体而言，对于一条传输速率为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> 的链路，在分配有权 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的类 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>  <code>有分组要发送</code> 的任何时间间隔中，第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 类总能获得至少为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>⋅</mo><msub><mi>w</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><mrow><mo fence=\"true\">(</mo><mo>∑</mo><msub><mi>w</mi><mi>j</mi></msub><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">R \\cdot w_{i} /\\left(\\sum w_{j}\\right)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span> 的吞吐量。（理想情况，没有考虑分组是离散的数据单元，以及分组的传输不能被打断）</p>\n</li>\n</ol>\n<h1 id=\"网际协议internet-protocol-ip\"><a class=\"anchor\" href=\"#网际协议internet-protocol-ip\">#</a> 网际协议 (Internet protocol, IP)</h1>\n<ul>\n<li>\n<p>到目前为止，我们在第 4 章中对网络层的研究：</p>\n<ol>\n<li>网络层的<span class=\"aqua\">数据平面</span>和<span class=\"orange\">控制平面</span>组件的概念</li>\n<li><span class=\"red\">转发和路由</span>的区别</li>\n<li>各种<span class=\"blue\">网络服务模型</span>的识别</li>\n<li>以及我们在<span class=\"pink\">路由器内部</span>的观察，通常不涉及任何特定的 <code class=\"aqua\">计算机网络架构</code> 或 <code class=\"red\">协议</code> 。</li>\n</ol>\n</li>\n<li>\n<p>在这一节中，我们将关注当今的 <code class=\"blue\">Internet 网络层</code> 的关键方面和著名的 <code class=\"red\">网际协议(IP)</code> 。今天有两个版本的 IP 正在使用，</p>\n<ul>\n<li>广泛部署的  <code class=\"red\">IPv4 (IP version 4)</code>  ，</li>\n<li>已经被提议<span class=\"red\">替代 IPv4</span> 的  <code class=\"aqua\">IPv6 (IP version 6)</code> 。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ipv4数据报格式\"><a class=\"anchor\" href=\"#ipv4数据报格式\">#</a> IPv4 数据报格式</h2>\n<p><img data-src=\"/assets/computer-science/computer-network/network-layer-1/Untitled_7.png\" alt=\"Untitled_7\" width=\"600px\" /></p>\n<p>IPv4 数据报中的关键字段如下：</p>\n<ul>\n<li>\n<p><code class=\"aqua\">版本号(Version number)</code> ：这 4 个比特指定了该数据报的 <code class=\"blue\">IP 协议版本</code> 。通过查看版本号，路由器可以确定 <code class=\"red\">如何解释</code>  IP 数据报的剩余部分。</p>\n</li>\n<li>\n<p><code class=\"red\">首部长度(Header length)</code> ：因为 IPv4 数据报的首部可以包含 <code class=\"red\">可变数量</code> 的若干个 <code class=\"aqua\">选项(options)</code> ，所以这 4 个比特是必须的，用来确定 IP 数据报的 <code class=\"blue\">有效负载</code>  (例如，封装在数据报中的<span class=\"aqua\">传输层报文段</span>) 实际上 <code class=\"red\">从何处开始</code> 。</p>\n<div class=\"note info no-icon\">\n<p>大多数 IP 数据报都不包含选项，所以典型的 IP 数据报有一个 <code>20 字节</code> 的报头。</p>\n</div>\n</li>\n<li>\n<p><code class=\"purple\">服务类型(Type of service)</code> ： <code class=\"pink\">TOS 位</code> 被包含在 IPv4 报头中，以使 <code class=\"red\">不同类型的 IP 数据报</code> 能够相互区分。例如，用于区分 <code class=\"orange\">实时数据报</code> 和 <code class=\"aqua\">非实时的流量</code> 。</p>\n<div class=\"note primary no-icon\">\n<p>提供特定等级的服务是一种 <code class=\"red\">策略</code> ，由该 <code class=\"blue\">路由器</code> 的网络管理员决定和配置。</p>\n<ul>\n<li>我们之前学过，TOS 中的两个比特用于 <code class=\"orange\">ECN (显式拥塞通告)</code> 。</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code class=\"red\">数据报长度(Datagram length)</code> ：整个数据报的长度 ( <span class=\"aqua\">首部</span> + <span class=\"blue\">数据</span> )，用字节表示。</p>\n<div class=\"note success no-icon\">\n<p>由于这个字段占 16 比特，理论上 IP 数据报的最大长度是 65535 字节。</p>\n<ul>\n<li>然而数据报 <code class=\"blue\">很少超过 1500 字节</code> ，这使得 IP 数据报能够适应最大尺寸的 <code class=\"red\">以太网帧</code> 的有效荷载字段。</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code class=\"aqua\">标识(identifier)</code> 、 <code class=\"purple\">标志(flags)</code>  和 <code class=\"grey\">片偏移(fragmentation offset)</code> ：这三个字段用于 <code class=\"red\">IP 分片</code> ，即由于 <code class=\"aqua\">链路层帧</code> 所能承载的最大数据量 <code class=\"blue\">最大传输单元(MTU)</code>  的限制， <code class=\"red\">过大的IP数据报</code> 将被分解为几个较小的 IP 数据报，然后各自独立地被转发到目的地，最后在负载的数据被传递到目的主机的传输层之前重组。有趣的是，新版本的 IP，即 <code>IPv6</code>  不允许分片。</p>\n</li>\n<li>\n<p><code class=\"red\">生存时间(Time-to-live)</code> ：TTL 字段用于确保数据报 <code class=\"aqua\">不会永远在网络中</code> 循环。每当一台路由器处理数据报时，该字段的值 <code class=\"red\">减 1</code> 。如果 TTL 字段达到 <code class=\"purple\">0</code> ，路由器必须丢弃该数据报。</p>\n<div class=\"note info no-icon\">\n<p>因此，TTL 可以视为 <code class=\"aqua\">IP 数据报</code> 在网络中可以通过的 <code class=\"blue\">路由器数</code> （或 <code class=\"red\">跳步数</code> ）。</p>\n</div>\n</li>\n<li>\n<p><code class=\"blue\">协议(Protocol)</code> ：该字段通常只在 IP 数据报到达其 <code class=\"purple\">最终目的地</code> 时使用。该字段的值表示该 IP 数据报的数据部分应该传递到的特定 <code class=\"red\">传输层协议</code> 。</p>\n<div class=\"note primary no-icon\">\n<p>注： <code class=\"blue\">IP数据报</code> 中的 <code class=\"red\">协议号</code> 的作用类似于 <code class=\"orange\">传输层段</code> 中的 <code class=\"aqua\">端口号字段</code> 的作用。协议号是将 <code class=\"blue\">网络层</code> 和 <code class=\"orange\">传输层</code> 绑定在一起的胶水，而端口号是将 <code class=\"orange\">传输层</code> 和 <code class=\"aqua\">应用层</code> 绑定在一起的胶水。</p>\n<ul>\n<li>我们将在第 6 章中看到 <code class=\"purple\">链路层帧</code> 也有一个特殊的字段，它将链路层绑定到网络层。</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code class=\"purple\">首部校验和(Header checksum)</code> ：首部校验和用来帮助 <code class=\"red\">路由器</code> 检测接收到的 IP 数据报中的 <code class=\"aqua\">比特错误</code> 。计算方法是将首部中的 <code class=\"red\">每 2 个字节</code> 视为一个数字，并使用反码算术运算对这些数字 <code class=\"blue\">求和</code> ，这个 <code class=\"purple\">和的反码</code>  (被称为 <code class=\"pink\">Internet checksum</code> ) 最终存储在校验和字段中。注意，在 <code class=\"red\">每台路由器</code> 上必须 <code class=\"aqua\">重新计算校验和</code> 并再次存放到原处（逐跳计算、逐跳校验），因为 TTL 字段以及可能的选项字段将会改变。</p>\n<div class=\"note primary no-icon\">\n<p>为什么 TCP/IP 在 <code class=\"orange\">传输层</code> 和 <code class=\"blue\">网络层</code> 都执行差错检测？这种重复有几个原因。</p>\n<ul>\n<li>首先，注意到在 IP 层只对 <code class=\"red\">IP首部</code> 计算了校验和，而 TCP/UDP 校验和是对 <code class=\"aqua\">整个TCP/UDP报文段</code> 进行计算。</li>\n<li>其次，TCP/ UDP 和 IP 不 <code class=\"purple\">一定都属于相同的协议栈</code> 。原则上，TCP 可以运行在不同的网络层协议上 (例如，ATM)，而 IP 可以携带不会被传递到 TCP/UDP 的数据。</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code class=\"red\">源和目的IP地址</code> ：当一个源创建一个数据报时，它将自己的 IP 地址插入到源 IP 地址字段中，将最终目的地址插入到目的 IP 地址字段中。通常源主机通过 <code class=\"aqua\">DNS 查找</code> 来确定目标地址。</p>\n</li>\n<li>\n<p><code class=\"aqua\">选项(options)</code> ：选项字段允许 IP 首部被 <code class=\"red\">扩展</code> 。首部选项这个名称意味着它 <code class=\"blue\">很少被使用</code> ，因此决定不包括可以让每个数据首部节省开销。然而，仅仅是选项的存在就使问题复杂化了。由于这样那样的原因，IP 选项不包括在 <code>IPv6</code>  首部中。</p>\n</li>\n<li>\n<p><code class=\"blue\">数据(Data)</code> ：即数据负载 (payload)，在 <code class=\"red\">大多数情况</code> 下，IP 数据报的数据字段包含要传送到目的地的 <code class=\"aqua\">传输层报文段</code>  (TCP 或 UDP)。但是，数据字段也可以携带其他类型的数据，例如 <code class=\"pink\">ICMP 消息</code> 。</p>\n</li>\n</ul>\n<h2 id=\"ipv4编址\"><a class=\"anchor\" href=\"#ipv4编址\">#</a> IPv4 编址</h2>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络",
                "网络层"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/computer-network/transport-layer/",
            "url": "https://hazuki.cn/computer-science/computer-network/transport-layer/",
            "title": "第3章 传输层",
            "date_published": "2021-12-04T02:35:02.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n课程：哈尔滨工业大学 计算机网络<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=\"> https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web</span></p>\n</div>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<h2 id=\"本章目标\"><a class=\"anchor\" href=\"#本章目标\">#</a> 本章目标</h2>\n<ol>\n<li>\n<p>理解传输层服务的基本理论和基本机制</p>\n<ul>\n<li><span class=\"red\">复用 / 分用 (multiplexing and demultiplexing)</span>：传输层的 <code>核心功能</code> ，扩展网络层的消息投递服务。<div class=\"note primary no-icon\">\n<p>Extending the  <code>network layer’s delivery service</code>  between two <span class=\"blue\">end systems</span> to a delivery service between two <span class=\"red\">application-layer processes</span> running on the end systems.</p>\n</div>\n</li>\n<li><span class=\"aqua\">可靠数据传输 (reliable data transfer)</span> 机制：两个通信实体如何通过 <code>不可靠的信道</code>  (存在数据丢失或损坏) 进行可靠数据传输。</li>\n<li><span class=\"orange\">拥塞控制 (congestion control)</span> 机制：控制传输层实体的 <code>传输速率</code> ，以避免拥塞，或者从拥塞中恢复。</li>\n</ul>\n</li>\n<li>\n<p>掌握 Internet 的传输层协议</p>\n<ul>\n<li><code class=\"purple\">UDP</code> : <span class=\"aqua\">不可靠的</span>、<span class=\"red\">无连接</span>的传输服务</li>\n<li><code class=\"blue\">TCP</code> : <span class=\"aqua\">可靠的</span>、<span class=\"red\">面向连接</span>的传输服务</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"传输层服务概述\"><a class=\"anchor\" href=\"#传输层服务概述\">#</a> 传输层服务概述</h2>\n<ol>\n<li>\n<p>传输层协议为运行在 <code class=\"aqua\">不同主机上(end-to-end)</code>  的 <code class=\"purple\">进程</code> 提供了一种 <code class=\"red\">逻辑通信机制</code> ，由此应用程序可以不必知道底层物理基础设施进行数据传输的细节。</p>\n<div class=\"note info no-icon\">\n<p><code class=\"purple\">逻辑连接</code> ：从<span class=\"blue\">应用程序</span>的视角，两个运行进程的主机之间<span class=\"aqua\">仿佛是直接连接的</span>，不关心物理距离、途径多少路由器等。</p>\n</div>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_0.png\" alt=\"Untitled_0\" width=\"600px\" /></p>\n<div class=\"note primary no-icon\">\n<p>传输层协议 “驻留”(live in) 在 <code>端系统</code> 中：传输层实现 <code>应用层的消息</code> 到 <code>网络边缘（即网络层）</code> 的信息交付（反之亦然），而不关心消息如何在 <code>网络核心</code> 中移动。如图所示，中间的路由器 (routers) 只有三层协议栈，其并不关心传输层所附加的信息。</p>\n</div>\n</li>\n<li>\n<p><span class=\"blue\">端系统</span>运行传输层协议</p>\n<ul>\n<li><span class=\"aqua\">发送方 (sender)</span>：将应用递交的 <code class=\"blue\">message(消息)</code>  分成一个或多个的 <code class=\"orange\">segment(报文段)</code> ，并向下传给<span class=\"red\">网络层</span><div class=\"note info no-icon\">\n<p>如何实现的？</p>\n<ul>\n<li>This is done by (possibly) breaking the application messages into  <code class=\"aqua\">smaller chunks</code>  and adding a  <code class=\"red\">transport-layer header</code>  to each chunk to create the transport-layer segment.</li>\n</ul>\n</div>\n</li>\n<li><span class=\"red\">接收方 (receiver)</span>：将接受到的 <code class=\"orange\">segment</code>  组装成 <code class=\"blue\">message</code> ，并向上交给<span class=\"aqua\">应用层</span></li>\n</ul>\n</li>\n<li>\n<p>传输层可以为应用提供<span class=\"blue\">多种协议</span>，提供不同的 <code class=\"purple\">服务模型(service nodel)</code></p>\n<ul>\n<li>如 Internet 中，传输层可以向应用层提供 <code>TCP</code>  和 <code>UDP</code>  两种传输层协议</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"传输层和网络层之间的关系\"><a class=\"anchor\" href=\"#传输层和网络层之间的关系\">#</a> 传输层和网络层之间的关系</h2>\n<ul>\n<li><span class=\"blue\">网络层</span>：提供 <code class=\"purple\">主机</code> 之间的逻辑通信机制</li>\n<li><span class=\"orange\">传输层</span>：提供 <code class=\"red\">应用进程</code> 之间的逻辑通信机制\n<ol>\n<li>位于<span class=\"aqua\">网络层之上</span>，<span class=\"blue\">依赖于</span>网络层服务\n<ul>\n<li>传输层能提供的服务，受到<span class=\"purple\">网络层服务模型</span>的<span class=\"red\">限制</span>，如 <code class=\"orange\">时延保障</code> 、 <code class=\"blue\">带宽保障</code> <br />\n（如网络层没有提供，则传输层亦无法提供）</li>\n</ul>\n</li>\n<li>对网络层服务进行（可能的）<span class=\"red\">增强</span>\n<ul>\n<li>某些网络层不提供的服务，能够由传输层来提供，如 <code class=\"aqua\">可靠传输</code> 、 <code class=\"pink\">加密</code></li>\n</ul>\n</li>\n</ol>\n<div class=\"note success no-icon\">\n<p>一个 <code>主机</code> 上运行有多个 <code>应用进程</code> 。</p>\n</div>\n</li>\n</ul>\n<h2 id=\"internet-上的传输层协议\"><a class=\"anchor\" href=\"#internet-上的传输层协议\">#</a> Internet 上的传输层协议</h2>\n<ol>\n<li>\n<p><span class=\"red\">可靠</span>、<span class=\"aqua\">按序</span>的交付服务  <code>TCP</code> <br />\n（可靠：不出错，不丢失。按序：按发送顺序送达。）</p>\n<ul>\n<li><span class=\"orange\">拥塞控制 (congestion control)</span></li>\n<li><span class=\"blue\">流量控制 (flow control)</span></li>\n<li><span class=\"aqua\">连接建立</span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"purple\">不可靠</span>的交付服务  <code>UDP</code></p>\n<ul>\n<li>\n<p>基于 <code class=\"aqua\">“尽力而为(best-effort)”</code>  的网络层协议  <code class=\"blue\">IP 协议 (不可靠)</code> ，没有做 <code class=\"orange\">可靠性</code> 方面的扩展</p>\n<div class=\"note primary no-icon\">\n<p>UDP 只提供传输层 <code>最基本</code> 的服务，即</p>\n<ul>\n<li>实现<span class=\"red\">多路复用和解复用 (<em>multiplexing and demultiplexing</em>)</span>：通过 <code class=\"aqua\">端口号(port number)</code>  实现</li>\n<li><span class=\"blue\">差错检测 (<em>error checking</em>)</span>：通过 <code class=\"orange\">校验和(checksum)</code>  实现</li>\n</ul>\n</div>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"多路复用与解复用\"><a class=\"anchor\" href=\"#多路复用与解复用\">#</a> 多路复用与解复用</h1>\n<div class=\"note primary no-icon\">\n<p>何时考虑 <code>多路复用</code> 和 <code>解复用</code> ？</p>\n<ul>\n<li>Although we have introduced  <code>multiplexing and demultiplexing</code>  in the context of the Internet  <code>transport protocols</code> , it’s important to realize that they are concerns whenever  <code class=\"red\">a single protocol</code>  at one layer (at the transport layer or elsewhere) is used by  <code class=\"blue\">multiple protocols</code>  at the next higher layer.</li>\n<li>如果某层的 <code class=\"red\">一个协议</code> 对应直接上层的 <code class=\"blue\">多个协议或实体</code> ，则需要多路复用 / 分用。</li>\n<li>对于 Internet 而言，\n<ul>\n<li><code>TCP 协议</code> 需要为多个使用 TCP 服务的 <code>应用进程</code> 交付信息，此时需要传输层将接收到的信息交付给 <code>正确的</code>  (appropriate) 应用进程。</li>\n<li>网络层仅有  <code>IP 协议</code> ，而传输层有  <code>UDP</code>  和  <code>TCP</code>  2 种协议，故需复用 / 分用。</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"传输层多路复用和解复用\"><a class=\"anchor\" href=\"#传输层多路复用和解复用\">#</a> 传输层多路复用和解复用</h2>\n<div class=\"note success no-icon\">\n<p>一个应用程序 <code class=\"blue\">进程</code> 可以拥有 <code class=\"aqua\">1个或多个</code> 套接字，因此，接收方的传输层 <code class=\"red\">不直接</code> 把数据交给进程，而是交给中间的 <code class=\"aqua\">套接字</code> 。</p>\n<ul>\n<li>在任意时刻， <code class=\"red\">接收方的主机</code> 上存在着多个套接字，每个套接字有一个独一无二的 <code class=\"green\">标识符(identifier)</code> 。</li>\n<li>标识符的 <code class=\"orange\">格式</code> 取决于该套接字是  <code class=\"blue\">TCP 套接字</code> 还是 <code class=\"purple\">UDP 套接字</code> 。<span class=\"red\">(★)</span></li>\n</ul>\n</div>\n<p>如图所示：</p>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_1.png\" alt=\"Untitled_1\" width=\"600px\" /></p>\n<ul>\n<li><span class=\"aqua\">发送端</span>进行<span class=\"blue\">多路复用</span>：从 <code>多个 socket</code>  接受数据，为每块数据封装上 <code class=\"aqua\">头部信息</code> ，生成 <code>segment</code> ，交给网络层。<div class=\"note info no-icon\">\n<p>The job of gathering data chunks at the source host from  <code class=\"red\">different sockets</code> , encapsulating each data chunk with  <code class=\"aqua\">header information</code>  (that will later be used in demultiplexing) to create  <code>segments</code> , and passing the segments to the network layer is called <span class=\"blue\">multiplexing</span>.</p>\n</div>\n</li>\n<li><span class=\"red\">接收端</span>进行<span class=\"purple\">多路分用</span>：传输层依据 <code class=\"aqua\">头部信息</code> ，将 <code>segment</code>  中的数据交给 <code>正确的 socket</code> ，即不同的应用进程。<div class=\"note info no-icon\">\n<p>This job of delivering the  <code class=\"red\">data</code>  in a transport-layer  <code class=\"blue\">segment</code>  to the  <code>correct socket</code>  is called <span class=\"purple\">demultiplexing</span>.</p>\n</div>\n</li>\n</ul>\n<h2 id=\"多路复用的实现\"><a class=\"anchor\" href=\"#多路复用的实现\">#</a> 多路复用的实现</h2>\n<p>由以上讨论可知，传输层实现多路复用需要：</p>\n<ol>\n<li>\n<p>每个  <code class=\"red\">socket</code>  有独一无二的 <code class=\"aqua\">标识符</code> （在主机中即 <code class=\"orange\">端口号</code> ）。</p>\n</li>\n<li>\n<p>每个  <code blue=\"\">segment</code>  有指明特定 socket 的特殊 <code class=\"purple\">字段(fields)</code> ，如图所示，为 <code class=\"blue\">源端口号</code> 和 <code class=\"red\">目的端口号</code> 。<br />\n（传输层报文段所共有的，除此之外， <code class=\"blue\">TCP</code>  和 <code class=\"purple\">UDP</code>  还有其他的字段）</p>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_2.png\" alt=\"Untitled_2\" width=\"600px\" /></p>\n<div class=\"note info no-icon\">\n<p>Each port number is a  <code>16-bit</code>  number, ranging from  <code>0 to 65535</code> . The port numbers ranging from  <code>0 to 1023</code>  are called  <code>well-known</code>  port numbers and are restricted, which means that they are reserved for use by well-known application protocols such as HTTP (which uses port number 80) and FTP (which uses port number 21).</p>\n</div>\n</li>\n</ol>\n<p>具体实现：</p>\n<ul>\n<li><code class=\"blue\">Each socket</code>  in the host could be assigned a  <code class=\"aqua\">port number</code> , and when a segment arrives at the host, the transport layer examines the  <code class=\"red\">destination port number</code>  in the segment and directs the segment to the corresponding socket. The segment’s data then passes through the socket into the attached process.</li>\n<li>As we’ll see, this is basically how  <code class=\"purple\">UDP</code>  does it. <span class=\"red\">(★)</span><br />\nHowever, we’ll also see that multiplexing / demultiplexing in  <code class=\"blue\">TCP</code>  is yet more subtle.</li>\n</ul>\n<h2 id=\"无连接分用面向-udp-协议\"><a class=\"anchor\" href=\"#无连接分用面向-udp-协议\">#</a> 无连接分用（面向 UDP 协议）</h2>\n<p><code>UDP</code>  多路复用和解复用过程：</p>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_3.png\" alt=\"Untitled_3\" width=\"600px\" /></p>\n<ol>\n<li><span class=\"blue\">多路复用</span>：发送方的传输层创建 <code>UDP 报文段</code> ，其中包含 <code class=\"purple\">应用层数据</code> 、 <code class=\"aqua\">源端口号</code> 、 <code class=\"red\">目的端口号</code> 、以及 <code class=\"grey\">两个其他的值</code> （介绍 UDP 报文段时会提及，现在不重要），并将其交给网络层进行传输。</li>\n<li><span class=\"red\">多路分用</span>：接收方的传输层通过网络层收到 <code>UDP 报文段</code> <span class=\"red\">（此时 <code>目的 IP</code>  的作用已经达到）</span>，检查段中的 <code>目的端口号</code> ，然后将 UDP 段递交给绑定该目的端口号的 <code>socket</code> 。</li>\n</ol>\n<div class=\"note primary no-icon\">\n<p>一个  <code>UDP socket</code>  完全由一个 <code class=\"red\">二元组</code> （<span class=\"blue\">目的 IP</span>，<span class=\"aqua\">目的端口号</span>）标识。</p>\n<ul>\n<li>因此，如果两个 UDP 报文段拥有 <code>不同的源 IP 地址</code> 和 / 或 <code>不同的源端口号</code> ，但是却有相同的 <code class=\"red\">目的 IP</code>  和 <code class=\"red\">目的端口号</code> ，则他们将会 <code class=\"red\">通过同一个 socket</code>  被递交给同一个进程。</li>\n</ul>\n</div>\n<p>另外，如图  <code>Figure 3.4</code>  所示，报文段中 <code class=\"aqua\">源端口号</code> 的作用是作为 <code>返回地址</code> 的一部分（另一部分是 <code class=\"blue\">源 IP 地址</code> ）。</p>\n<h2 id=\"面向连接的分用tcp-连接\"><a class=\"anchor\" href=\"#面向连接的分用tcp-连接\">#</a> 面向连接的分用（TCP 连接）</h2>\n<h3 id=\"tcp-socket\"><a class=\"anchor\" href=\"#tcp-socket\">#</a> TCP socket</h3>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_4.png\" alt=\"Untitled_4\" width=\"800px\" /></p>\n<div class=\"note primary no-icon\">\n<p>与 UDP socket 不同，一个  <code>TCP socket</code>  由一个 <code class=\"blue\">四元组</code> 标识： <code class=\"red\">源 IP 地址</code>  / <code class=\"aqua\">源端口号</code> ， <code class=\"red\">目的 IP 地址</code>  / <code class=\"aqua\">目的端口号</code></p>\n<ul>\n<li>因此，当一个 TCP 报文段从网络到达主机时，主机使用 <code class=\"aqua\">所有的这四个值</code> 来将该报文段定向（解复用）到相应的 socket。</li>\n<li>特别的，与 UDP 不同，如果两个 TCP 报文段拥有 <code>不同的源 IP 地址</code> 或 <code>不同的源端口号</code> ，则他们会定向到 <code class=\"red\">两个不同的 socket</code> 。<br />\n（存在例外：该 TCP 报文段携带的是初始的 <code class=\"orange\">连接建立请求</code>  (connection-establishment request)，如下例中 <code>监听</code> 特定端口的 TCP Server）</li>\n</ul>\n</div>\n<ol>\n<li>\n<p>再来看看  <code class=\"purple\">Web server</code>  是怎么使用 <code class=\"aqua\">端口号</code> 的。</p>\n<p>实际上，当客户端（浏览器）向服务器发送报文段时，无论是初始的 <code class=\"aqua\">请求建立连接</code> 的报文段还是 <code class=\"blue\">携带 HTTP 请求</code> 的报文段，都以  <code>80</code>  作为目的端口号，如前所述，服务器通过 <code>源 IP 地址</code> 和 <code>源端口号</code> 来区分不同的客户端。</p>\n</li>\n<li>\n<p>另外，图中的 TCP server 为 <code class=\"orange\">每个 TCP 连接</code> 创建了一个 <code class=\"blue\">进程</code> ，每个进程有自己的 <code class=\"aqua\">连接套接字</code> 。</p>\n<p>事实上，当今的高性能服务器通常只使用 <code>一个进程</code> ，而为每个连接创建一个新的 <code class=\"purple\">线程</code> （带有新的 <code class=\"orange\">连接套接字</code> ）。因此，该服务器在任意时刻都可能有（具有不同标识符的） <code class=\"aqua\">许多连接套接字</code> 连接到同一个的进程。</p>\n</li>\n</ol>\n<h3 id=\"tcp-连接建立\"><a class=\"anchor\" href=\"#tcp-连接建立\">#</a> TCP 连接建立</h3>\n<p>回顾之前 Section 2.7.2 的 TCP client-server 套接字编程示例：</p>\n<ul>\n<li>\n<p>The TCP server application has a  <code class=\"blue\">“welcoming socket”</code> , that waits for  <code class=\"orange\">connection-establishment requests</code>  from TCP clients on  <code class=\"aqua\">port number 12000</code> .</p>\n</li>\n<li>\n<p>The TCP client creates a socket and sends  <code class=\"red\">a connection establishment request segment</code>  with the lines:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>clientSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">,</span><span class=\"token number\">12000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（通过  <code class=\"red\">connect()</code>  函数发送一个<span class=\"aqua\">请求建立连接的报文段</span>）</p>\n</li>\n<li>\n<p>A connection-establishment request is nothing more than  <code class=\"red\">a TCP segment</code>  with  <code class=\"aqua\">destination port number 12000</code>  and a special  <code class=\"purple\">connection-establishment bit set</code>  in the TCP header (discussed in Section 3.5). The segment also includes a source port number that was chosen by the client.<br />\n（The struct of  <code class=\"aqua\">connection-request segment</code> ）</p>\n</li>\n<li>\n<p>When the host  <code class=\"red\">operating system</code>  of the computer running the server process receives the incoming connection-request segment with destination port 12000, it  <code class=\"orange\">locates the server process</code> <span class=\"red\">(★)</span> that is waiting to accept a connection on port number 12000. The server process then  <code class=\"blue\">creates a new socket</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>connectionSocket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（ <code class=\"purple\">操作系统</code> 收到<span class=\"aqua\">请求建立连接的报文段</span>后，将其定向到 <code>监听</code> 该报文段目标端口号的 <code class=\"blue\">进程</code> ）</p>\n</li>\n<li>\n<p>Also, the  <code class=\"red\">transport layer</code>  at the server notes the following  <code class=\"red\">four values</code>  in the connection-request segment:</p>\n<ol>\n<li>the <span class=\"blue\">source port number</span> in the segment,</li>\n<li>the <span class=\"red\">IP address</span> of the source host,</li>\n<li>the <span class=\"blue\">destination port number</span> in the segment, and</li>\n<li>its <span class=\"red\">own IP address</span>.</li>\n</ol>\n<div class=\"note primary no-icon\">\n<p>The newly created  <code class=\"red\">connection socket</code>  is  <code>identified by these four values</code> <span class=\"red\">(★)</span>; all subsequently arriving segments whose source port, source IP address, destination port, and destination IP address match these four values will be  <code>demultiplexed to this socket</code> . With the TCP connection now in place, the client and server can now send data to each other.</p>\n<ul>\n<li>新的 <code>连接套接字(connection socket)</code>  是由该 <code class=\"red\">四元组</code> 所标识的。</li>\n<li>后续的 <code class=\"aqua\">TCP 报文段</code> 都将由段中的四元组定向到相应的  <code>socket</code> 。</li>\n</ul>\n</div>\n<div class=\"note success no-icon\">\n<p>注：TCP 连接是  <code class=\"red\">一对一</code>  的。</p>\n</div>\n</li>\n</ul>\n<h1 id=\"无连接传输udp\"><a class=\"anchor\" href=\"#无连接传输udp\">#</a> 无连接传输：UDP</h1>\n<div class=\"note info no-icon\">\n<p>引言：假如你对设计一个 <code class=\"pink\">只提供必要服务(no-frills)</code>  的 <code class=\"blue\">最基本(bare-bones)</code>  的传输层协议感兴趣，你将打算怎么做呢？</p>\n</div>\n<h2 id=\"概述-2\"><a class=\"anchor\" href=\"#概述-2\">#</a> 概述</h2>\n<p>如前所述， <code>UDP</code>  基本上基于 <code class=\"blue\">IP 协议</code> ，没有做太多的扩展，它</p>\n<ul>\n<li>只是做了传输协议能做的 <code class=\"red\">最少工作</code> ： <code class=\"pink\">多路复用/分用</code> ，以及简单的 <code class=\"aqua\">差错检测(error checking)</code> ，除此之外不做任何事。</li>\n<li>基本上将 <code class=\"blue\">网络层服务</code>  “暴露” 给了应用层，应用程序几乎是直接与  <code>IP</code>  打交道，因此也相对 <code class=\"orange\">轻量(lightweight)</code> 。</li>\n<li>基于 IP 协议，也提供  <code class=\"aqua\">“尽力而为(best-effort)”</code>  的服务，即 UDP 段可能 <code class=\"purple\">丢失</code> ，也可能 <code class=\"aqua\">乱序</code> 。</li>\n<li><code class=\"purple\">无连接</code> 服务，UDP 发送方 / 接收方之间 <code>不需要握手</code> ，每个 UDP 段的处理独立于其他段。</li>\n</ul>\n<ol>\n<li>\n<p>为什么 <code class=\"blue\">应用开发者</code> 会选择 <code class=\"red\">UDP</code> ？而 <code class=\"aqua\">TCP</code>  提供可靠传输，不总是更好吗？</p>\n<ul>\n<li>UDP 没有<span class=\"red\">拥塞控制</span>，可以更好地控制<span class=\"aqua\">发送时间 / 速率</span><div class=\"note info no-icon\">\n<p><code class=\"blue\">应用进程</code> 一旦将数据传给 <code class=\"purple\">UDP</code> ，UDP 将数据封装后 <code class=\"red\">立即</code> 将报文段传给网络层。另一方面， <code class=\"aqua\">TCP</code>  提供拥塞控制机制，当拥塞发生时会 <code class=\"pink\">限制发送方</code> 的发送速率。同时为了实现 <code class=\"aqua\">可靠传输</code> ，TCP 在报文段被确认接受之前会不断地 <code class=\"orange\">重传报文段</code> ，无论花费多少时间。</p>\n</div>\n<ul>\n<li>因为 <code class=\"blue\">实时应用(real-time)</code>  通常对 <code class=\"red\">最小发送速率</code> 有要求，不希望过分地延迟报文段的传输，并且能容忍一定的丢失， <code class=\"aqua\">TCP</code>  的服务模型不是特别符合应用的需求，可以使用 <code class=\"purple\">UDP</code>  实现。</li>\n</ul>\n</li>\n<li><span class=\"pink\">无需建立连接</span>，减少延迟<br />\n <code class=\"aqua\">TCP</code>  在开始数据传输前会进行 <code class=\"aqua\">三次握手</code> 。而 <code class=\"purple\">UDP</code>  不需要任何准备即可进行数据传输，因此不会引入建立连接的时延。\n<ul>\n<li>这可能是 <code class=\"pink\">DNS</code>  运行在 UDP 之上而不是 TCP 之上的主要原因：如果运行在 TCP 之上，则 DNS 会 <code class=\"red\">慢得多</code> 。</li>\n<li><code class=\"blue\">HTTP</code>  使用 TCP 而不是 UDP，因为 <code class=\"red\">可靠性</code> 对于包含文本的 <code class=\"aqua\">Web 网页</code> 来说是至关重要的。<div class=\"note primary no-icon\">\n<p>但正如之前所讨论的，HTTP 中的 <code class=\"aqua\">TCP 连接建立时延</code> 对于 <code>下载 Web 文档的时延</code> 来说是一个重要的贡献因素。确实如此，谷歌的  <code class=\"red\">Chrome 浏览器</code> 使用 <code class=\"pink\">QUIC 协议(Quick UDP Internet Connection)</code> ，该协议使用 <code>UDP</code>  作为其底层的传输协议，并在 UDP 之上的 <code class=\"blue\">应用层协议</code> 上实现 <code>可靠性</code> 。</p>\n</div>\n</li>\n</ul>\n</li>\n<li>实现简单，无需<span class=\"aqua\">维护连接状态</span><br />\n <code class=\"aqua\">TCP</code>  需要在 <code class=\"blue\">端系统</code> 中维护连接状态（<span class=\"red\">缓冲区</span> 和 <span class=\"aqua\">参数</span>），以实现可靠传输和拥塞控制，而 <code class=\"purple\">UDP</code>  不需要。\n<ul>\n<li>因此，对于<span class=\"red\">专用于特定应用程序</span>的服务器来说，如果该应用运行在 <code class=\"purple\">UDP</code>  之上，那么相比 <code class=\"aqua\">TCP</code> ，它可以为 <code>更多的</code> 活跃客户端提供服务。</li>\n</ul>\n</li>\n<li><span class=\"orange\">头部开销少</span>：每个 <code class=\"aqua\">TCP</code>  报文段有 <code>20 bytes</code>  的头部开销，而每个 <code class=\"purple\">UDP</code>  报文段只有 <code>8 bytes</code>  的头部开销。</li>\n</ul>\n</li>\n<li>\n<p>补充说明</p>\n<ul>\n<li>正如我们在第 2 章中所学的， <code class=\"aqua\">早期版本 (HTTP/1.1, HTTP/2)</code>  的 HTTP 运行在 <code>TCP</code>  之上，但是 <code class=\"red\">更近期版本 (HTTP/3)</code>  的 HTTP 则运行在 <code>UDP</code>  之上，并在 <code class=\"blue\">应用层</code> 上实现自己的差错控制和拥塞控制。</li>\n<li>UDP 也用于携带 <code>网络管理数据 (Network managment data)</code> (SNMP)，在这种情况下 <code>UDP</code>  相比 <code>TCP</code>  更合适，因为 <code class=\"blue\">网络管理应用程序</code> 经常在网络处于 <code class=\"pink\">紧张状态</code> 时必须运行（精确地说，在可靠的、带拥塞控制的数据传输难以实现时）。</li>\n<li>虽然 <code class=\"purple\">多媒体应用</code> 通常运行在 UDP 之上，但这样做是有争议的。UDP 中缺乏 <code class=\"orange\">拥塞控制</code> ，可能导致 UDP 发送方 / 接收方之间的 <code>高丢失率 (high lose rates)</code>  以及 <code class=\"aqua\">TCP 会话的挤出 (crowding out)</code> （链路拥塞，导致 TCP 减缓其发送速率）。</li>\n<li>使用 <code>UDP</code>  的应用程序是可以实现 <code class=\"aqua\">可靠数据传输</code> 的，这可以通过在 <code class=\"red\">应用程序自身</code> 中建立 <code class=\"aqua\">可靠性</code> 机制来完成。<div class=\"note primary no-icon\">\n<p>Nevertheless, ­building reliability <span class=\"red\">directly into the application</span> allows the application to <span class=\"aqua\">“have its cake and eat it too.”</span></p>\n<ul>\n<li>That is, application processes can  <code class=\"aqua\">communicate reliably</code>  without being subjected to the  <code>transmission-rate constraints</code>  imposed by TCP’s congestion-control mechanism.</li>\n<li>在应用程序中构建 <code class=\"aqua\">可靠传输</code> ，同时 <code class=\"red\">避开</code>  TCP 拥塞控制强加的 <code>速率限制</code> 。</li>\n</ul>\n</div>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"udp-报文段结构\"><a class=\"anchor\" href=\"#udp-报文段结构\">#</a> UDP 报文段结构</h2>\n<p><img data-src=\"/assets/computer-science/computer-network/transport-layer/Untitled_5.png\" alt=\"Untitled_5\" width=\"600px\" /></p>\n<ul>\n<li><span class=\"aqua\">数据字段 (data filed)</span>：由 <code class=\"blue\">应用层数据</code> 填充。</li>\n<li><span class=\"red\">UDP 报头 (UDP header)</span>：由 <code>4</code>  个字段组成，每个字段由  <code class=\"aqua\">2 bytes</code>  组成。\n<ol>\n<li><code class=\"blue\">源端口号</code>  和  <code class=\"red\">目的端口号</code> ：用于接收端 <code class=\"red\">解复用</code> 和作为 <code class=\"blue\">返回地址的一部分</code> 。</li>\n<li><code class=\"orange\">长度字段 (Length)</code> ：指示了 UDP 报文段中的 <code class=\"aqua\">字节数</code> （<span class=\"pink\">UDP header</span> + <span class=\"blue\">UDP data</span>）。<div class=\"note success no-icon\">\n<p>由于不同报文段之间 <code class=\"blue\">数据字段</code> 的大小可能不同，需要一个 <code class=\"red\">明确的</code> 长度值。</p>\n</div>\n</li>\n<li><code class=\"red\">校验和字段 (Checksum)</code> ：被 <code class=\"aqua\">接收方</code> 用来检测 <code class=\"purple\">错误是否被引入</code> 到报文段中。<div class=\"note primary no-icon\">\n<p>实际上，除了 <code>UDP 报文段</code> 外， <code class=\"blue\">IP 头部</code> 中的 <code>几个字段</code> 也会被用于计算校验和。</p>\n</div>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"校验和checksum\"><a class=\"anchor\" href=\"#校验和checksum\">#</a> 校验和（checksum）</h2>\n<p>UDP 校验和用于 <code class=\"aqua\">差错检测</code> ，即确定 UDP 报文段中的 <code class=\"blue\">比特</code> 在传输过程中是否发生了 <code>改变</code> （例如，由于 <code class=\"purple\">链路中的噪声</code> 或者存储在 <code class=\"orange\">路由器</code> 中时引入问题）。校验和的计算和使用：</p>\n<ol>\n<li>UDP 发送方将报文段中的所有 <code class=\"aqua\">16 比特字(16-bit words)</code>  的 <code class=\"red\">和(sum)</code>  进行 <code class=\"purple\">反码运算(one's complement)</code> ，求和时遇到的 <code class=\"blue\">任何溢出</code> 都被 <code class=\"pink\">回卷(wrapped around)</code> 。<div class=\"note primary no-icon\">\n<p>UDP at the sender side performs the  <code>1s complement</code>  of the sum of all the  <code class=\"aqua\">16-bit words</code>  in the segment, with  <code class=\"blue\">any overflow</code>  encountered during the sum being  <code class=\"pink\">wrapped around</code> .</p>\n</div>\n计算得到的结果被放在 UDP 报文段的 <code class=\"aqua\">校验和字段</code> 中。</li>\n<li>在 UDP 接收方，将 <code class=\"pink\">所有的16比特字</code>  (包括 <code class=\"blue\">校验和</code> ) 加在一起，<span class=\"red\">(★)</span>\n<ul>\n<li>如果得到的结果为 <code class=\"orange\">全1</code> ，则说明该分组中 <code class=\"aqua\">没有差错</code> 被引入。</li>\n<li>如果得到的结果中的 <code class=\"purple\">比特之一为 0</code> ，那么我们就知道该分组中 <code class=\"red\">已经出现了差错</code> 。</li>\n</ul>\n<div class=\"note success no-icon\">\n<p>尽管 UDP 提供 <code class=\"aqua\">差错检测</code> ，但它不做任何 <code class=\"blue\">差错恢复</code> （实际上也 <code class=\"pink\">无能为力</code> ）。</p>\n</div>\n</li>\n</ol>\n<hr />\n<div class=\"note info no-icon\">\n<p>为什么要在 <code class=\"red\">传输层</code> 进行差错检测？许多 <code class=\"aqua\">链路层协议</code> （包括流行的 <code class=\"orange\">以太网协议 (Ethernet protocol)</code> ）不也提供了差错检测？</p>\n<ul>\n<li><code class=\"aqua\">不能保证</code> 源和目的之间的 <code class=\"pink\">所有链路</code> 都提供了差错检测。</li>\n<li>当数据报存储在 <code class=\"purple\">路由器的内存</code> 中时，也有可能 <code class=\"blue\">引入比特差错</code> 。</li>\n</ul>\n<p>Given that neither  <code class=\"pink\">link-by-link reliability</code>  nor  <code class=\"purple\">in-memory error detection</code>  is guaranteed, UDP must provide error detection at the  <code class=\"blue\">transport layer</code> , on an  <code class=\"red\">end-end basis</code> <span class=\"red\">(★)</span>, if the end-end data transfer service is to provide error detection.</p>\n<p>这是一个在系统设计中被颂为 <code class=\"aqua\">端到端原则 (end-end principle)</code>  的例子，该原则指出：</p>\n<ul>\n<li>Since certain functionality (error detection, in this case)  <code class=\"red\">must be implemented on an end-end basis</code> : “functions placed at the  <code class=\"blue\">lower levels</code>  may be  <code class=\"pink\">redundant</code>  or of  <code class=\"grey\">little value</code>  when compared to the cost of providing them at the  <code class=\"aqua\">higher level</code> .”</li>\n</ul>\n<p>因为 <code class=\"blue\">IP</code>  是被假定为可以运行在几乎<span class=\"red\">任何第 2 层协议 (layer-2 protocol) 之上</span>的（亦即 <code class=\"aqua\">链路层协议</code> 可能不提供差错检测），在 <code class=\"blue\">传输层</code> 提供 <code class=\"aqua\">差错检测</code> 以作为 <code class=\"pink\">安全措施</code> 是很有用的。</p>\n</div>\n<h1 id=\"可靠数据传输原理\"><a class=\"anchor\" href=\"#可靠数据传输原理\">#</a> 可靠数据传输原理</h1>\n<p>三个机制实现可靠数据传输：</p>\n<ul>\n<li><code>确认(acknowledgment)</code> ： <code>ACK</code>  和  <code>sequence number</code> ，双方传输的报文段的顺序。<br />\n若发生乱序则被暂存在 <code>TCP buffer</code> ，丢失报文重传后和后续报文一起投递到应用层。</li>\n<li><code>重传(retransmission)</code> ：对 <code>丢包</code> 的唯一 <code>处理方法</code> ，确保交付。</li>\n<li><code>计时器(timeout)</code> ：用于 <code>判定丢包</code> ，超时后重传。多次超时将导致连接被中断。</li>\n</ul>\n<h2 id=\"带流水线的可靠数据传输协议\"><a class=\"anchor\" href=\"#带流水线的可靠数据传输协议\">#</a> 带流水线的可靠数据传输协议</h2>\n<h2 id=\"go-back-ngbn\"><a class=\"anchor\" href=\"#go-back-ngbn\">#</a> Go-Back-N(GBN)</h2>\n<h2 id=\"selective-repeatsr\"><a class=\"anchor\" href=\"#selective-repeatsr\">#</a> Selective Repeat(SR)</h2>\n<h1 id=\"面向连接的传输tcp\"><a class=\"anchor\" href=\"#面向连接的传输tcp\">#</a> 面向连接的传输：TCP</h1>\n<h2 id=\"tcp-连接\"><a class=\"anchor\" href=\"#tcp-连接\">#</a> TCP 连接</h2>\n<h2 id=\"tcp-报文段结构\"><a class=\"anchor\" href=\"#tcp-报文段结构\">#</a> TCP 报文段结构</h2>\n<h2 id=\"可靠数据传输\"><a class=\"anchor\" href=\"#可靠数据传输\">#</a> 可靠数据传输</h2>\n<h2 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h2>\n<h2 id=\"tcp-连接管理\"><a class=\"anchor\" href=\"#tcp-连接管理\">#</a> TCP 连接管理</h2>\n<h1 id=\"拥塞控制原理\"><a class=\"anchor\" href=\"#拥塞控制原理\">#</a> 拥塞控制原理</h1>\n<h1 id=\"tcp-拥塞控制\"><a class=\"anchor\" href=\"#tcp-拥塞控制\">#</a> TCP 拥塞控制</h1>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络",
                "传输层"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC2%E7%AB%A0%20%E5%A4%84%E7%90%86%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/",
            "url": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC2%E7%AB%A0%20%E5%A4%84%E7%90%86%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/",
            "title": "第2章 处理线性模型",
            "date_published": "2021-12-03T10:44:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd2l6YXJkZm9yY2VsL3NrbGVhcm4tY2I=\">https://gitee.com/wizardforcel/sklearn-cb</span><br />\n 未经作者的许可，此代码仅用于学习，不能用于其他用途。</p>\n</div>\n<h1 id=\"第二章-处理线性模型\"><a class=\"anchor\" href=\"#第二章-处理线性模型\">#</a> 第二章 处理线性模型</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<div class=\"note primary\">\n<p><code>线性模型</code> 是统计学和机器学习的基础。很多方法都利用变量的 <code>线性组合</code> 描述数据之间的关系。通常都要花费很大精力做各种变换，目的就是为了让数据可以描述成一种线性组合形式。</p>\n</div>\n<p>本章，我们将从最简单的 <code>数据直线拟合模型</code> 到 <code>分类模型</code> ，最后介绍 <code>贝叶斯岭回归</code> 。</p>\n<h1 id=\"线性回归模型\"><a class=\"anchor\" href=\"#线性回归模型\">#</a> 线性回归模型</h1>\n<p>现在，我们来做一些建模！我们从最简单的 <code>线性回归（Linear regression）</code> 开始。线性回归是最早的也是最基本的模型：把数据拟合成一条直线。</p>\n<h2 id=\"getting-ready\"><a class=\"anchor\" href=\"#getting-ready\">#</a> Getting ready</h2>\n<p><code>boston</code>  数据集很适合用来演示线性回归。 <code>boston</code>  数据集包含了波士顿地区的房屋价格中位数。还有一些可能会影响房价的因素，比如犯罪率（crime rate）。</p>\n<p>首先，让我们加载数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boston <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it\"><a class=\"anchor\" href=\"#how-to-do-it\">#</a> How to do it...</h2>\n<p>实际上，用 scikit-learn 的线性回归非常简单，其 API 和前面介绍的模型一样。</p>\n<p>首先，导入 <code>LinearRegression</code>  类创建一个对象：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，再把自变量和因变量传给 <code>LinearRegression</code>  的 <code>fit</code>  方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n</code></pre>\n<h1 id=\"评估线性回归模型\"><a class=\"anchor\" href=\"#评估线性回归模型\">#</a> 评估线性回归模型</h1>\n<p>在这个主题中，我们将介绍回归模型 <code>拟合数据的效果</code> 。上一个主题我们拟合了数据，但是并没太关注拟合的效果。每当拟合工作做完之后，我们应该问的第一个问题就是 “拟合的效果如何？” 本主题将回答这个问题。</p>\n<h2 id=\"getting-ready-2\"><a class=\"anchor\" href=\"#getting-ready-2\">#</a> Getting ready</h2>\n<p>我们还用上一主题里的 <code>lr</code>  对象和 <code>boston</code>  数据集。 <code>lr</code>  对象已经拟合过数据，现在有许多方法可以用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boston <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-2\"><a class=\"anchor\" href=\"#how-to-do-it-2\">#</a> How to do it...</h2>\n<p>我们可以看到一些简单的 <code>量度（metris）</code> 和图形。让我们看看上一章的 <code>残差图</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target <span class=\"token operator\">-</span> predictions<span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Residuals Linear'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of Residuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-2-1.png\" alt=\"png\" /></p>\n<p>如果你用 IPython Notebook，就用 <code>%matplotlib inline</code>  命令在网页中显示 matplotlib 图形。如果你不用，就用 <code>f.savefig('myfig.png')</code>  保存图形，以备使用。</p>\n<div class=\"note success\">\n<p>画图的库是<span class=\"exturl\" data-url=\"aHR0cDovL21hdHBsb3RsaWIub3JnLw==\"> matplotlib</span>，并非本书重点，但是可视化效果非常好。</p>\n</div>\n<p>和之前介绍的一样， <code>误差项</code> 服从均值为 0 的正态分布。残差就是误差，所以这个图也应该近似正态分布。看起来拟合挺好的，只是有点偏。我们计算一下残差的均值，应该很接近 0：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target <span class=\"token operator\">-</span> predictions<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>6.0382090193051989e-16\n</code></pre>\n<p>另一个值得看的图是 <code>Q-Q图（分位数概率分布）</code> ，我们用 <code>Scipy</code>  来实现图形，因为它内置这个概率分布图的方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> probplot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>probplot<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target <span class=\"token operator\">-</span> predictions<span class=\"token punctuation\">,</span> plot<span class=\"token operator\">=</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-2-2.png\" alt=\"png\" /></p>\n<p>这个图里面倾斜的数据比之前看的要更清楚一些。</p>\n<p>我们还可以观察拟合其他量度，最常用的还有 <code>均方误差</code> （mean squared error， <code>MSE</code> ）， <code>平均绝对误差</code> （mean absolute deviation， <code>MAD</code> ）。让我们用 Python 实现这两个量度。后面我们用 scikit-learn 内置的量度来评估回归模型的效果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">MSE</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    squared_deviation <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> predictions<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>squared_deviation<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MSE<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>21.897779217687496\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">MAD</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    absolute_deviation <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> predictions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>absolute_deviation<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MAD<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>3.2729446379969396\n</code></pre>\n<h2 id=\"how-it-works\"><a class=\"anchor\" href=\"#how-it-works\">#</a> How it works...</h2>\n<p><code>MSE</code>  的计算公式是：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><msub><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mi>t</mi></msub><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">E(\\hat y_t - y_i)^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>计算预测值与实际值的差，平方之后再求平均值。这其实就是我们寻找 <code>最佳相关系数</code> 时是目标。高斯－马尔可夫定理（Gauss-Markov theorem）实际上已经证明了线性回归的回归系数的 <code>最佳线性无偏估计（BLUE）</code> 就是最小均方误差的无偏估计（条件是误差变量不相关，0 均值，同方差）。在<span class=\"blue\">用岭回归弥补线性回归的不足</span>主题中，我们会看到，当我们的相关系数是有偏估计时会发生什么。</p>\n<p><code>MAD</code>  是平均绝对误差，计算公式为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">∣</mi><msub><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mi>t</mi></msub><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">E|\\hat y_t - y_i|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span></span></p>\n<p>线性回归的时候 MAD 通常不用，但是值得一看。为什么呢？可以看到每个量度的情况，还可以判断哪个量度更重要。例如，用 MSE，较大的误差会获得更大的惩罚，因为平方把它放大。</p>\n<h3 id=\"theres-more\"><a class=\"anchor\" href=\"#theres-more\">#</a> There's more...</h3>\n<p>还有一点需要说明，那就是相关系数是 <code>随机变量</code> ，因此它们是有分布的。让我们用 <code>bootstrapping（重复试验）</code> 来看看犯罪率的相关系数的分布情况。bootstrapping 是一种学习 <code>参数估计不确定性</code> 的常用手段：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n_bootstraps <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>len_boston <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>subsample_size <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token operator\">*</span>len_boston<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>subsample <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len_boston<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>size<span class=\"token operator\">=</span>subsample_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>coefs <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span>n_bootstraps<span class=\"token punctuation\">)</span> <span class=\"token comment\">#相关系数初始值设为 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_bootstraps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    subsample_idx <span class=\"token operator\">=</span> subsample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    subsample_X <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>subsample_idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    subsample_y <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span>subsample_idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>subsample_X<span class=\"token punctuation\">,</span> subsample_y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    coefs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们可以看到这个相关系数的分布直方图：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>coefs<span class=\"token punctuation\">,</span> bins<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of the lr.coef_[0].\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-2-3.png\" alt=\"png\" /></p>\n<p>我们还想看看重复试验后的置信区间：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>coefs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([-0.18030624,  0.03816062])\n</code></pre>\n<p>置信区间的范围表明犯罪率其实不影响房价，因为 0 在置信区间里面，表面犯罪率可能与房价无关。</p>\n<p>值得一提的是，bootstrapping 可以获得更好的相关系数估计值，因为使用 bootstrapping 方法的均值，会比普通估计方法更快地<span class=\"aqua\">收敛（converge）</span>到真实均值。</p>\n<h1 id=\"用岭回归弥补线性回归的不足\"><a class=\"anchor\" href=\"#用岭回归弥补线性回归的不足\">#</a> 用岭回归弥补线性回归的不足</h1>\n<p>本主题将介绍岭回归。和线性回归不同，它引入了正则化参数来 “缩减” 相关系数。当数据集中存在共线因素时，岭回归会很有用。</p>\n<h2 id=\"getting-ready-3\"><a class=\"anchor\" href=\"#getting-ready-3\">#</a> Getting ready</h2>\n<p>让我们加载一个不满秩（low effective rank）数据集来比较岭回归和线性回归。秩是矩阵线性无关组的数量，满秩是指一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 矩阵中行向量或列向量中现行无关组的数量等于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(m,n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h2 id=\"how-to-do-it-3\"><a class=\"anchor\" href=\"#how-to-do-it-3\">#</a> How to do it...</h2>\n<p>首先我们用 <code>make_regression</code>  建一个有 3 个自变量的数据集，但是其秩为 2，因此 3 个自变量中有两个自变量存在相关性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>reg_data<span class=\"token punctuation\">,</span> reg_target <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> effective_rank<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>首先，我们用普通的线性回归拟合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fit_2_regression</span><span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    n_bootstraps <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    coefs <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n_bootstraps<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    len_data <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    subsample_size <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.75</span><span class=\"token operator\">*</span>len_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    subsample <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>subsample_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_bootstraps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        subsample_idx <span class=\"token operator\">=</span> subsample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        subsample_X <span class=\"token operator\">=</span> reg_data<span class=\"token punctuation\">[</span>subsample_idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        subsample_y <span class=\"token operator\">=</span> reg_target<span class=\"token punctuation\">[</span>subsample_idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>subsample_X<span class=\"token punctuation\">,</span> subsample_y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        coefs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        coefs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        coefs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    f<span class=\"token punctuation\">,</span> axes <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> sharey<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> sharex<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> ax <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>axes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>coefs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Coef &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> coefs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>coefs <span class=\"token operator\">=</span> fit_2_regression<span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-3-1.png\" alt=\"png\" /></p>\n<p>我们再用 <code>Ridge</code>  来拟合数据，对比结果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> Ridge</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>coefs_r <span class=\"token operator\">=</span> fit_2_regression<span class=\"token punctuation\">(</span>Ridge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-3-2.png\" alt=\"png\" /></p>\n<p>两个回归算法的结果看着好像差不多，其实不然。岭回归的相关系数更接近 0。让我们看看两者相关系数的差异：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>coefs <span class=\"token operator\">-</span> coefs_r<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 30.54319761,  25.1726559 ,   7.40345307])\n</code></pre>\n<p>从均值上看，线性回归比岭回归的相关系数要更很多。均值显示的差异其实是线性回归的相关系数隐含的偏差。那么，岭回归究竟有什么好处呢？让我们再看看相关系数的方差：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span>coefs<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 302.16242654,  177.36842779,  179.33610289])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">(</span>coefs_r<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 19.60727206,  25.4807605 ,  22.74202917])\n</code></pre>\n<p>岭回归的相关系数方差也会小很多。这就是机器学习里著名的偏差 - 方差均衡 (Bias-Variance Trade-off)。下一个主题我们将介绍如何调整岭回归的参数正则化，那是偏差 - 方差均衡的核心内容。</p>\n<h2 id=\"how-it-works-2\"><a class=\"anchor\" href=\"#how-it-works-2\">#</a> How it works...</h2>\n<p>介绍参数正则化之前，我们总结一下岭回归与线性回归的不同。前面介绍过，线性回归的目标是最小化<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mo>−</mo><mi>X</mi><mi>β</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\n{\\begin{Vmatrix}\n\\hat y - X \\beta\n\\end{Vmatrix}}^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.421998em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0719880000000002em;\"><span style=\"top:-3.3208800000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</p>\n<p>岭回归的目标是最小化<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover><mo>−</mo><mi>X</mi><mi>β</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow><mn>2</mn></msup><mo>+</mo><msup><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">Γ</mi><mi>X</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\n{\\begin{Vmatrix}\n\\hat y - X \\beta\n\\end{Vmatrix}}^2\n+\n{\\begin{Vmatrix}\n\\Gamma X\n\\end{Vmatrix}}^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.421998em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0719880000000002em;\"><span style=\"top:-3.3208800000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.421998em;vertical-align:-0.35000999999999993em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0719880000000002em;\"><span style=\"top:-3.3208800000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> 就是岭回归 <code>Ridge</code>  的 <code>alpha</code>  参数，指单位矩阵的倍数。上面的例子用的是默认值。我们可以看看岭回归参数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ridge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n   normalize=False, solver='auto', tol=0.001)\n</code></pre>\n<p>岭回归相关系数的解是：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>β</mi><mo>=</mo><msup><mrow><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><mo>+</mo><msup><mi mathvariant=\"normal\">Γ</mi><mi>T</mi></msup><mi mathvariant=\"normal\">Γ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>X</mi><mover accent=\"true\"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\beta = {(X^TX + \\Gamma ^ T \\Gamma)}^{-1}X \\hat y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3453389999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\">Γ</span><span class=\"mclose\">)</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0953389999999998em;\"><span style=\"top:-3.3442309999999997em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.19444em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>前面的一半和线性回归的相关系数的解是一样的，多了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Γ</mi><mi>T</mi></msup><mi mathvariant=\"normal\">Γ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Gamma ^ T \\Gamma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\">Γ</span><span class=\"mclose\">)</span></span></span></span> 一项。矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">AA^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span> 的结果是对称矩阵，且是半正定矩阵（对任意非 0 向量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>T</mi></msup><mi>A</mi><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x^TAx \\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.977301em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>）。相当于在线性回归的目标函数分母部分增加了一个很大的数。这样就把相关系数挤向 0 了。这样的解释比较粗糙，要深入了解，建议你看看 SVD（矩阵奇异值分解）与岭回归的关系。</p>\n<h1 id=\"优化岭回归参数\"><a class=\"anchor\" href=\"#优化岭回归参数\">#</a> 优化岭回归参数</h1>\n<p>当你使用岭回归模型进行建模时，需要考虑 <code>Ridge</code>  的 <code>alpha</code>  参数。</p>\n<p>例如，用 OLS（普通最小二乘法）做回归也许可以显示两个变量之间的某些关系；但是，当 <code>alpha</code>  参数正则化之后，那些关系就会消失。做决策时，这些关系是否需要考虑就显得很重要了。</p>\n<h2 id=\"getting-ready-4\"><a class=\"anchor\" href=\"#getting-ready-4\">#</a> Getting ready</h2>\n<p>这是我们第一个进行模型参数优化的主题，通常用交叉检验（cross validation）完成。在后面的主题中，还会有更简便的方式实现这些，但是这里我们一步一步来实现岭回归的优化。</p>\n<p>在 scikit-learn 里面，岭回归的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> 参数就是 <code>RidgeRegression</code>  的 <code>alpha</code>  参数；因此，问题就是最优的 <code>alpha</code>  参数是什么。首先我们建立回归数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>reg_data<span class=\"token punctuation\">,</span> reg_target <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> effective_rank<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-4\"><a class=\"anchor\" href=\"#how-to-do-it-4\">#</a> How to do it...</h2>\n<p>在 <code>linear_models</code>  模块中，有一个对象叫 <code>RidgeCV</code> ，表示<strong>岭回归交叉检验（ridge cross-validation）</strong>。这个交叉检验类似于<strong>留一交叉验证法（leave-one-out cross-validation，LOOCV）</strong>。这种方法是指训练数据时留一个样本，测试的时候用这个未被训练过的样本：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> RidgeCV</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rcv <span class=\"token operator\">=</span> RidgeCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rcv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>RidgeCV(alphas=array([ 0.1,  0.2,  0.3,  0.4]), cv=None, fit_intercept=True,\n    gcv_mode=None, normalize=False, scoring=None, store_cv_values=False)\n</code></pre>\n<p>拟合模型之后， <code>alpha</code>  参数就是最优参数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rcv<span class=\"token punctuation\">.</span>alpha_</pre></td></tr></table></figure><pre><code>0.10000000000000001\n</code></pre>\n<p>这里， <code>0.1</code>  是最优参数，我们还想看到 <code>0.1</code>  附近更精确的值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rcv <span class=\"token operator\">=</span> RidgeCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">.08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rcv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>RidgeCV(alphas=array([ 0.08,  0.09,  0.1 ,  0.11,  0.12]), cv=None,\n    fit_intercept=True, gcv_mode=None, normalize=False, scoring=None,\n    store_cv_values=False)\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rcv<span class=\"token punctuation\">.</span>alpha_</pre></td></tr></table></figure><pre><code>0.080000000000000002\n</code></pre>\n<p>可以按照这个思路一直优化下去，这里只做演示，后面还是介绍更好的方法。</p>\n<h2 id=\"how-it-works-3\"><a class=\"anchor\" href=\"#how-it-works-3\">#</a> How it works...</h2>\n<p>上面的演示很直接，但是我们介绍一下为什么这么做，以及哪个值才是最优的。在交叉检验的每一步里，模型的拟合效果都是用测试样本的误差表示。默认情况使用平方误差。更多细节见 <code>There's more...</code>  一节。</p>\n<p>我们可以让 <code>RidgeCV</code>  储存交叉检验的数据，这样就可以可视化整个过程：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>alphas_to_test <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rcv3 <span class=\"token operator\">=</span> RidgeCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span>alphas_to_test<span class=\"token punctuation\">,</span> store_cv_values<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rcv3<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>RidgeCV(alphas=array([ 0.0001 ,  0.00112,  0.00214,  0.00316,  0.00417,  0.00519,\n        0.00621,  0.00723,  0.00825,  0.00927,  0.01028,  0.0113 ,\n        0.01232,  0.01334,  0.01436,  0.01538,  0.01639,  0.01741,\n        0.01843,  0.01945,  0.02047,  0.02149,  0.0225 ,  0.02352,\n        0.02454,  0.02556...4185,\n        0.04287,  0.04389,  0.04491,  0.04593,  0.04694,  0.04796,\n        0.04898,  0.05   ]),\n    cv=None, fit_intercept=True, gcv_mode=None, normalize=False,\n    scoring=None, store_cv_values=True)\n</code></pre>\n<p>你会看到，我们测试了 0.0001 到 0.05 区间中的 50 个点。由于我们把 <code>store_cv_values</code>  设置成 <code>true</code> ，我们可以看到每一个值对应的拟合效果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rcv3<span class=\"token punctuation\">.</span>cv_values_<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>(100, 50)\n</code></pre>\n<p>通过 100 个样本的回归数据集，我们获得了 50 个不同的 <code>alpha</code>  值。我们可以看到 50 个误差值，最小的均值误差对应最优的 <code>alpha</code>  值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>smallest_idx <span class=\"token operator\">=</span> rcv3<span class=\"token punctuation\">.</span>cv_values_<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>alphas_to_test<span class=\"token punctuation\">[</span>smallest_idx<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.014357142857142857\n</code></pre>\n<p>此时问题转化成了 “RidgeCV 认可我们的选择吗？” 可以再用下面的命令获取 <code>alpha</code>  值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rcv3<span class=\"token punctuation\">.</span>alpha_</pre></td></tr></table></figure><pre><code>0.014357142857142857\n</code></pre>\n<p>通过可视化图形可以更直观的显示出来。我们画出 50 个测试 <code>alpha</code>  值的图：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">r\"Various values of $\\alpha$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>alphas_to_test<span class=\"token punctuation\">[</span>smallest_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rcv3<span class=\"token punctuation\">.</span>cv_values_<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>smallest_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xytext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">.01</span><span class=\"token punctuation\">,</span> xy<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ax<span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span><span class=\"token string\">r'Chosen $\\alpha$'</span><span class=\"token punctuation\">,</span> xy<span class=\"token operator\">=</span>xy<span class=\"token punctuation\">,</span> xytext<span class=\"token operator\">=</span>xytext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            arrowprops<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> shrink<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>alphas_to_test<span class=\"token punctuation\">,</span> rcv3<span class=\"token punctuation\">.</span>cv_values_<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-4-1.png\" alt=\"png\" /></p>\n<h2 id=\"theres-more-2\"><a class=\"anchor\" href=\"#theres-more-2\">#</a> There's more...</h2>\n<p>如果我们想用其他误差自定义评分函数，也是可以实现的。前面我们介绍过 MAD 误差，我们可以用它来评分。首先我们需要定义损失函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">MAD</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prediction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    absolute_deviation <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> prediction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> absolute_deviation<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>定义损失函数之后，我们用 <code>sklearn</code>  量度中的 <code>make_scorer</code>  函数来处理。这样做可以标准化自定义的函数，让 scikit-learn 对象可以使用它。另外，由于这是一个损失函数不是一个评分函数，是越低越好，所以要用 <code>sklearn</code>  来把最小化问题转化成最大化问题：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sklearn</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MAD <span class=\"token operator\">=</span> sklearn<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>make_scorer<span class=\"token punctuation\">(</span>MAD<span class=\"token punctuation\">,</span> greater_is_better<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rcv4 <span class=\"token operator\">=</span> RidgeCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span>alphas_to_test<span class=\"token punctuation\">,</span> store_cv_values<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> scoring<span class=\"token operator\">=</span>MAD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rcv4<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>smallest_idx <span class=\"token operator\">=</span> rcv4<span class=\"token punctuation\">.</span>cv_values_<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>argmin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>alphas_to_test<span class=\"token punctuation\">[</span>smallest_idx<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.050000000000000003\n</code></pre>\n<h1 id=\"lasso正则化\"><a class=\"anchor\" href=\"#lasso正则化\">#</a> LASSO 正则化</h1>\n<p>LASSO（ least absolute shrinkage and selection operator，最小绝对值收缩和选择算子）方法与岭回归和 LARS（least angle regression，最小角回归）很类似。与岭回归类似，它也是通过增加惩罚函数来判断、消除特征间的共线性。与 LARS 相似的是它也可以用作参数选择，通常得出一个相关系数的稀疏向量。</p>\n<h2 id=\"getting-ready-5\"><a class=\"anchor\" href=\"#getting-ready-5\">#</a> Getting ready</h2>\n<p>岭回归也不是万能药。有时就需要用 LASSO 回归来建模。本主题将用不同的损失函数，因此就要用对应的效果评估方法。</p>\n<h2 id=\"how-to-do-it-5\"><a class=\"anchor\" href=\"#how-to-do-it-5\">#</a> How to do it...</h2>\n<p>首先，我们还是用 <code>make_regression</code>  函数来建立数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>reg_data<span class=\"token punctuation\">,</span> reg_target <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> n_informative<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>之后，我们导入 <code>lasso</code>  对象：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> Lasso</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lasso <span class=\"token operator\">=</span> Lasso<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>lasso</code>  包含很多参数，但是最意思的参数是 <code>alpha</code> ，用来调整 <code> lasso</code>  的惩罚项，在 **How it works...** 会具体介绍。现在我们用默认值 <code>1</code> 。另外，和岭回归类似，如果设置为 <code>0</code> ，那么 <code>lasso</code>  就是线性回归：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lasso<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n   normalize=False, positive=False, precompute=False, random_state=None,\n   selection='cyclic', tol=0.0001, warm_start=False)\n</code></pre>\n<p>再让我们看看还有多少相关系数非零：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>lasso<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>9\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lasso_0 <span class=\"token operator\">=</span> Lasso<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lasso_0<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>lasso_0<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>d:\\programfiles\\Miniconda3\\lib\\site-packages\\IPython\\kernel\\__main__.py:2: UserWarning: With alpha=0, this algorithm does not converge well. You are advised to use the LinearRegression estimator\n  from IPython.kernel.zmq import kernelapp as app\nd:\\programfiles\\Miniconda3\\lib\\site-packages\\sklearn\\linear_model\\coordinate_descent.py:432: UserWarning: Coordinate descent with alpha=0 may lead to unexpected results and is discouraged.\n  positive)\n\n\n\n\n\n500\n</code></pre>\n<p>和我们设想的一样，如果用线性回归，没有一个相关系数变成 0。而且，如果你这么运行代码，scikit-learn 会给出建议，就像上面显示的那样。</p>\n<h2 id=\"how-it-works-4\"><a class=\"anchor\" href=\"#how-it-works-4\">#</a> How it works...</h2>\n<p>对线性回归来说，我们是最小化残差平方和。而 LASSO 回归里，我们还是最小化残差平方和，但是加了一个惩罚项会导致稀疏。如下所示：</p>\n\\sum {e_i + \\lambda \\\n{\\begin{Vmatrix}\n\\beta \n\\end{Vmatrix}}_1}\n\n<p>最小化残差平方和的另一种表达方式是：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>R</mi><mi>S</mi><mi>S</mi><mo stretchy=\"false\">(</mo><mi>β</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext>其中</mtext><msub><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>β</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow><mn>1</mn></msub><mo>&lt;</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\"> RSS(\\beta),其中\n{\\begin{Vmatrix}\n\\beta \n\\end{Vmatrix}}_1\n\\lt \\beta\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.26769em;vertical-align:-0.3997099999999999em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord\"><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.051398000000000055em;\"><span style=\"top:-2.3002900000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3997099999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span></p>\n<p>这个约束会让数据稀疏。LASSO 回归的约束创建了围绕原点的超立方体（相关系数是轴），也就意味着大多数点都在各个顶点上，那里相关系数为 0。而岭回归创建的是超平面，因为其约束是 L2 范数，少一个约束，但是即使有限制相关系数也不会变成 0。</p>\n<h3 id=\"lasso交叉检验\"><a class=\"anchor\" href=\"#lasso交叉检验\">#</a> LASSO 交叉检验</h3>\n<p>上面的公式中，选择适当的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span>（在 scikit-learn 的 <code>Lasso</code>  里面是 <code>alpha</code> ，但是书上都是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span>）参数是关键。我们可以自己设置，也可以通过交叉检验来获取最优参数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LassoCV</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lassocv <span class=\"token operator\">=</span> LassoCV<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lassocv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>LassoCV(alphas=None, copy_X=True, cv=None, eps=0.001, fit_intercept=True,\n    max_iter=1000, n_alphas=100, n_jobs=1, normalize=False, positive=False,\n    precompute='auto', random_state=None, selection='cyclic', tol=0.0001,\n    verbose=False)\n</code></pre>\n<p><code>lassocv</code>  有一个属性就是确定最合适的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lassocv<span class=\"token punctuation\">.</span>alpha_</pre></td></tr></table></figure><pre><code>0.58535963603062136\n</code></pre>\n<p>计算的相关系数也可以看到：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lassocv<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([ 0.       , -0.       ,  0.       ,  0.0192606, -0.       ])\n</code></pre>\n<p>用最近的参数拟合后， <code>lassocv</code>  的非零相关系数有 29 个：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>lassocv<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>29\n</code></pre>\n<h3 id=\"lasso特征选择\"><a class=\"anchor\" href=\"#lasso特征选择\">#</a> LASSO 特征选择</h3>\n<p>LASSO 通常用来为其他方法所特征选择。例如，你可能会用 LASSO 回归获取适当的特征变量，然后在其他算法中使用。</p>\n<p>要获取想要的特征，需要创建一个非零相关系数的列向量，然后再其他算法拟合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mask <span class=\"token operator\">=</span> lassocv<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_reg_data <span class=\"token operator\">=</span> reg_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_reg_data<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>(200, 29)\n</code></pre>\n<h1 id=\"lars正则化\"><a class=\"anchor\" href=\"#lars正则化\">#</a> LARS 正则化</h1>\n<p>如果斯坦福大学的 Bradley Efron, Trevor Hastie, Iain Johnstone 和 Robert Tibshirani 没有发现它的话 [1]，LARS (Least Angle Regression，最小角回归) 可能有一天会被你想出来，它借用了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2lsYmVydF9TdHJhbmc=\">威廉・吉尔伯特・斯特朗（William Gilbert Strang）</span>介绍过的高斯消元法（Gaussian elimination）的灵感。</p>\n<h2 id=\"getting-ready-6\"><a class=\"anchor\" href=\"#getting-ready-6\">#</a> Getting ready</h2>\n<p>LARS 是一种回归手段，适用于解决高维问题，也就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>&gt;</mo><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p &gt;&gt; n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的情况，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 表示列或者特征变量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 表示样本数量。</p>\n<h2 id=\"how-to-do-it-6\"><a class=\"anchor\" href=\"#how-to-do-it-6\">#</a> How to do it...</h2>\n<p>首先让我们导入必要的对象。这里我们用的数据集是 200 个数据，500 个特征。我们还设置了一个低噪声，和少量提供信息的（informative）特征：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>reg_data<span class=\"token punctuation\">,</span> reg_target <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>n_features<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> n_informative<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由于我们用了 10 个信息特征，因此我们还要为 LARS 设置 10 个非 0 的相关系数。我们事先可能不知道信息特征的准确数量，但是出于试验的目的是可行的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> Lars</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lars <span class=\"token operator\">=</span> Lars<span class=\"token punctuation\">(</span>n_nonzero_coefs<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lars<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Lars(copy_X=True, eps=2.2204460492503131e-16, fit_intercept=True,\n   fit_path=True, n_nonzero_coefs=10, normalize=True, precompute='auto',\n   verbose=False)\n</code></pre>\n<p>我们可以检验一下看看 LARS 的非 0 相关系数的和：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>lars<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>10\n</code></pre>\n<p>问题在于为什么少量的特征反而变得更加有效。要证明这一点，让我们用一半数量来训练两个 LARS 模型，一个用 12 个非零相关系数，另一个非零相关系数用默认值。这里用 12 个是因为我们对重要特征的数量有个估计，但是可能无法确定准确的数量：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>train_n <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lars_12 <span class=\"token operator\">=</span> Lars<span class=\"token punctuation\">(</span>n_nonzero_coefs<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lars_12<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Lars(copy_X=True, eps=2.2204460492503131e-16, fit_intercept=True,\n   fit_path=True, n_nonzero_coefs=12, normalize=True, precompute='auto',\n   verbose=False)\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lars_500 <span class=\"token operator\">=</span> Lars<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#默认就是 500</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lars_500<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train_n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Lars(copy_X=True, eps=2.2204460492503131e-16, fit_intercept=True,\n   fit_path=True, n_nonzero_coefs=500, normalize=True, precompute='auto',\n   verbose=False)\n</code></pre>\n<p>现在，让我们看看拟合数据的效果如何，如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>reg_target<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> lars<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>18.607806437043894\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>reg_target<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> lars_12<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>529.97993250189643\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>reg_target<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> lars_500<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">[</span>train_n<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>2.3236770314162846e+34\n</code></pre>\n<p>仔细看看这组结果；测试集的误差明显高很多。高维数据集问题就在于此；通常面对大量的特征时，想找出一个对训练集拟合很好的模型并不难，但是拟合过度却是更大的问题。</p>\n<h2 id=\"how-it-works-5\"><a class=\"anchor\" href=\"#how-it-works-5\">#</a> How it works...</h2>\n<p>LARS 通过重复选择与残存变化相关的特征。从图上看，相关性实际上就是特征与残差之间的最小角度；这就是 LARS 名称的由来。</p>\n<p>选择第一个特征之后，LARS 会继续沿着最小角的方向移动，直到另一个特征与残差有同样数量的相关性。然后，LARS 会沿着两个特征组合的角度移动。如下图所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">unit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    squared <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    distance <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>squared<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">/</span> distance<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>plt<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_1$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_2$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$y$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"No steps\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># step 1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Step 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_1$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_2$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> ls<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.01</span> <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_2$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.01</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">.0015</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">.47</span><span class=\"token operator\">-</span><span class=\"token number\">.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.01</span> <span class=\"token operator\">+</span> <span class=\"token number\">.03</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$y$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># step 2</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Step 2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_1$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_2$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> ls<span class=\"token operator\">=</span><span class=\"token string\">'dashed'</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.01</span> <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$x_2$\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.01</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">.0015</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span><span class=\"token number\">.47</span><span class=\"token operator\">-</span><span class=\"token number\">.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.01</span> <span class=\"token operator\">+</span> <span class=\"token number\">.03</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step 1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">##  step 2</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.35</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">.0015</span><span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Step 2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arrow<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> edgecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> facecolor<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">,</span> <span class=\"token string\">r\"$y$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-6-1.png\" alt=\"png\" /></p>\n<p>具体过程是，我们把<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">2</span></span></span></span> 沿着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">1</span></span></span></span> 方向移动到一个位置：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">1</span></span></span></span> 与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的点积与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">1</span></span></span></span> 与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的点积相同。到了这个位置之后，我们再沿着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">1</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">2</span></span></span></span> 夹角的一半的方向移动。</p>\n<h2 id=\"theres-more-3\"><a class=\"anchor\" href=\"#theres-more-3\">#</a> There's more...</h2>\n<p>和我们前面用交叉检验来优化领回归模型一样，我们可以对 LARS 做交叉检验：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LarsCV</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lcv <span class=\"token operator\">=</span> LarsCV<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lcv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>reg_data<span class=\"token punctuation\">,</span> reg_target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>d:\\Miniconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:285: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 168 iterations, i.e. alpha=2.278e-02, with an active set of 132 regressors, and the smallest cholesky pivot element being 6.144e-08\n  ConvergenceWarning)\nd:\\Miniconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:285: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 168 iterations, i.e. alpha=2.105e-02, with an active set of 132 regressors, and the smallest cholesky pivot element being 9.771e-08\n  ConvergenceWarning)\n\n\n\n\n\nLarsCV(copy_X=True, cv=None, eps=2.2204460492503131e-16, fit_intercept=True,\n    max_iter=500, max_n_alphas=1000, n_jobs=1, normalize=True,\n    precompute='auto', verbose=False)\n</code></pre>\n<p>用交叉检验可以帮助我们确定需要使用的非零相关系数的最佳数量。验证如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>lcv<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>43\n</code></pre>\n<p>说实话，LARS 的精髓还没有领会，抽空会把原文译出来，看各种解释不如看原文。</p>\n<p>[1] Efron, Bradley; Hastie, Trevor; Johnstone, Iain and Tibshirani, Robert(2004). &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS91cmw/c2E9dCZhbXA7cmN0PWomYW1wO3E9JmFtcDtlc3JjPXMmYW1wO3NvdXJjZT13ZWImYW1wO2NkPTEmYW1wO2NhZD1yamEmYW1wO3VhY3Q9OCZhbXA7dmVkPTBDQjRRRmpBQWFoVUtFd2pKM0kzbGpiREhBaFdKbFlnS0hVMmlBcEEmYW1wO3VybD1odHRwJTNBJTJGJTJGd2ViLnN0YW5mb3JkLmVkdSUyRn5oYXN0aWUlMkZQYXBlcnMlMkZMQVJTJTJGTGVhc3RBbmdsZV8yMDAyLnBkZiZhbXA7ZWk9SXRMUlZjbkRFSW1yb2dUTnhJcUFDUSZhbXA7dXNnPUFGUWpDTkZEUDRaanAtY1BuZHpwTmhxXzhXT3dycnVpN2cmYW1wO3NpZzI9ZU54VkctWklqbnNtZTkzek9URlJPdyZhbXA7YnZtPWJ2Ljk5ODA0MjQ3LGQuY0dV\">Least Angle Regression</span>&quot;. Annals of Statistics 32(2): pp. 407–499.doi:10.1214/009053604000000067. MR 2060166.</p>\n<h1 id=\"用线性方法处理分类问题逻辑回归\"><a class=\"anchor\" href=\"#用线性方法处理分类问题逻辑回归\">#</a> 用线性方法处理分类问题 —— 逻辑回归</h1>\n<p>实际上 <code>线性模型</code> 也可以用于 <code>分类任务</code> 。方法是把一个线性模型<span class=\"red\">拟合成某个类型的概率分布</span>，然后用一个函数 <code>建立阈值</code> 来确定结果属于哪一类。</p>\n<h2 id=\"getting-ready-7\"><a class=\"anchor\" href=\"#getting-ready-7\">#</a> Getting ready</h2>\n<p>这里用的函数是经典的 <code>逻辑函数</code> 。一个非常简单的函数：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">f(x)= \\frac 1 {1+e^{-t}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.09077em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.719556em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">1</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>它的图形如下图所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rng <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>log_f <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>apply_along_axis<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Logistic Function between [-5, 5]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> log_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-7-1.png\" alt=\"png\" /></p>\n<p>让我们用 <code>make_classification</code>  方法创建一个数据集来进行分类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_classification</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-7\"><a class=\"anchor\" href=\"#how-to-do-it-7\">#</a> How to do it...</h2>\n<p><code>LogisticRegression</code>  对象和其他线性模型的用法一样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lr <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们将把前面的数据作为训练集，最后 200 个数据作为测试集。因为这是随机数据集，所以用最后 200 个数据没问题。但是如果处理具有某种结构的数据，就不能这么做了（例如，你的数据集是时间序列数据）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X_train <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y_train <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X_test <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y_test <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>在本书后面的内容里，我们将详细介绍交叉检验。这里，我们需要的只是用逻辑回归拟合模型。我们会关注训练集的预测结果，就像关注测试集预测结果一样。经常对比两个数据集预测正确率是个好做法。通常，你在训练集获得的结果更好；模型在测试集上预测失败的比例也至关重要：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y_train_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>y_test_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在我们有了预测值，让我们看看预测的效果。这里，我们只简单看看预测正确的比例；后面，我们会详细的介绍分类模型效果的评估方法。</p>\n<p>计算很简单，就是用预测正确的数量除以总样本数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_train_predictions <span class=\"token operator\">==</span> y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.89375000000000004\n</code></pre>\n<p>测试集的效果是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_test_predictions <span class=\"token operator\">==</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.90500000000000003\n</code></pre>\n<p>可以看到，测试集的正确率和训练集的结果差不多。但是实际中通常差别很大。</p>\n<p>现在问题变成，怎么把 <code>逻辑函数</code> 转换成 <code>分类方法</code> 。</p>\n<p>首先，线性回归希望找到一个 <code>线性方程</code> 拟合出给定自变量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> 条件下因变量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> 的期望值，就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mi mathvariant=\"normal\">∣</mi><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">E(Y|X)=x \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>。这里<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> 的值是某个类型发生的概率。因此，我们要解决的分类问题就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mi mathvariant=\"normal\">∣</mi><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">E(p|X)=x \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>。然后，只要阈值确定，就会有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>o</mi><mi>g</mi><mi>i</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>X</mi><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">Logit(p) = X \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>。这个理念的扩展形式可以构成许多形式的回归行为，例如，泊松过程（Poisson）。</p>\n<h2 id=\"theres-more-4\"><a class=\"anchor\" href=\"#theres-more-4\">#</a> There's more...</h2>\n<p>下面的内容你以后肯定会遇到。一种情况是一个类型与其他类型的权重不同；例如，一个类型可能权重很大，99%。这种情况在分类工作中经常遇到。经典案例就是信用卡虚假交易检测，大多数交易都不是虚假交易，但是不同类型误判的成本相差很大。</p>\n<p>让我们建立一个分类问题，类型<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的不平衡权重 95%，我们看看基本的逻辑回归模型如何处理这类问题：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.95</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#检查不平衡的类型</span></pre></td></tr></table></figure><pre><code>0.0562\n</code></pre>\n<p>建立训练集和测试集，然后用逻辑回归拟合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X_train <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y_train <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X_test <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y_test <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>y_train_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>y_test_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在我们在看看模型拟合的情况：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_train_predictions <span class=\"token operator\">==</span> y_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.96711111111111114\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_test_predictions <span class=\"token operator\">==</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.96799999999999997\n</code></pre>\n<p>结果看着还不错，但这是说如果我们把一个交易预测成正常交易（或者称为类型 0），那么我们有 95% 左右的可能猜对。如果我们想看看模型对类型 1 的预测情况，可能就不是那么好了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> y_test_predictions<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_test<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.5\n</code></pre>\n<p>如果相比正常交易，我们更关心虚假交易；那么这是由商业规则决定的，我们可能会改变预测正确和预测错误的权重。</p>\n<p>通常情况下，虚假交易与正常交易的权重与训练集的类型权重的倒数一致。但是，因为我们更关心虚假交易，所有让我们用多重采样（oversample）方法来表示虚假交易与正常交易的权重。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lr <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span>class_weight<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token number\">.15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">.85</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>LogisticRegression(C=1.0, class_weight=&#123;0: 0.15, 1: 0.85&#125;, dual=False,\n          fit_intercept=True, intercept_scaling=1, max_iter=100,\n          multi_class='ovr', penalty='l2', random_state=None,\n          solver='liblinear', tol=0.0001, verbose=0)\n</code></pre>\n<p>让我们再预测一下结果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>y_train_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y_test_predictions <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_test<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> y_test_predictions<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_test<span class=\"token punctuation\">[</span>y_test<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.70833333333333337\n</code></pre>\n<p>但是，这么做需要付出什么代价？让我们看看：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>y_test_predictions <span class=\"token operator\">==</span> y_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> y_test<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>0.93999999999999995\n</code></pre>\n<p>可以看到，准确率降低了 3%。这样是否合适由你的问题决定。如果与虚假交易相关的评估成本非常高，那么它就能抵消追踪虚假交易付出的成本。</p>\n<h1 id=\"贝叶斯岭回归\"><a class=\"anchor\" href=\"#贝叶斯岭回归\">#</a> 贝叶斯岭回归</h1>\n<p>在<em>用岭回归弥补线性回归的不足</em>主题中，我们介绍了岭回归优化的限制条件。我们还介绍了相关系数的先验概率分布的贝叶斯解释，将很大程度地影响着先验概率分布，先验概率分布通常均值是 0。</p>\n<p>因此，现在我们就来演示如何 scikit-learn 来应用这种解释。</p>\n<h2 id=\"getting-ready-8\"><a class=\"anchor\" href=\"#getting-ready-8\">#</a> Getting ready</h2>\n<p>岭回归和套索回归（lasso regression）用贝叶斯观点来解释，与频率优化观点解释相反。scikit-learn 只实现了贝叶斯岭回归，但是在 * How it works...* 一节，我们将对比两种回归算法。</p>\n<p>首先，我们创建一个回归数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n_informative<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-8\"><a class=\"anchor\" href=\"#how-to-do-it-8\">#</a> How to do it...</h2>\n<p>我们可以把岭回归加载进来拟合模型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> BayesianRidge</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br <span class=\"token operator\">=</span> BayesianRidge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有两组相关系数，分别是 <code>alpha_1 / alpha_2</code>  和 <code>lambda_1 / lambda_2</code> 。其中， <code>alpha_*</code>  是先验概率分布的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> 超参数， <code>lambda_*</code>  是先验概率分布的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> 超参数。</p>\n<p>首先，让我们不调整参数直接拟合模型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>br<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br<span class=\"token punctuation\">.</span>coef_</pre></td></tr></table></figure><pre><code>array([ -1.39241213,   0.14671513,  -0.08150797,  37.50250891,\n         0.21850082,  -0.78482779,  -0.26717555,  -0.71319956,\n         0.7926308 ,   5.74658302])\n</code></pre>\n<p>现在，我们来调整超参数，注意观察相关系数的变化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>br_alphas <span class=\"token operator\">=</span> BayesianRidge<span class=\"token punctuation\">(</span>alpha_1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> lambda_1<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br_alphas<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>br_alphas<span class=\"token punctuation\">.</span>coef_</pre></td></tr></table></figure><pre><code>array([ -1.38807423,   0.14050794,  -0.08309391,  37.3032803 ,\n         0.2254332 ,  -0.77031801,  -0.27005478,  -0.71632657,\n         0.78501276,   5.71928608])\n</code></pre>\n<h2 id=\"how-it-works-6\"><a class=\"anchor\" href=\"#how-it-works-6\">#</a> How it works...</h2>\n<p>因为是贝叶斯岭回归，我们假设先验概率分布带有误差和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> 参数，先验概率分布都服从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> 分布。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> 分布是一种极具灵活性的分布。不同的形状参数和尺度参数的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span></span></span></span> 分布形状有差异。<strong>1e-06</strong> 是 scikit-learn 里面 <code>BayesianRidge</code>  形状参数的默认参数值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> gamma</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>form <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token string\">\"loc=&#123;&#125;, scale=&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>g <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">:</span> gamma<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>g2 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> gamma<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>g3 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span> gamma<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>rng <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>form<span class=\"token punctuation\">(</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e-06</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>g2<span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>form<span class=\"token punctuation\">(</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>g3<span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>form<span class=\"token punctuation\">(</span><span class=\"token number\">1e-06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Different Shapes of the Gamma Distribution\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-8-1.png\" alt=\"png\" /></p>\n<p>你会看到，相关系数最终都会收缩到 0，尤其当形状参数特别小的时候。</p>\n<h3 id=\"theres-more-5\"><a class=\"anchor\" href=\"#theres-more-5\">#</a> There's more...</h3>\n<p>就像我前面介绍的，还有一种套索回归的贝叶斯解释。我们把先验概率分布看出是相关系数的函数；它们本身都是随机数。对于套索回归，我们选择一个可以产生 0 的分布，比如双指数分布（Double Exponential Distribution，也叫 Laplace distribution）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> laplace</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>form <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token string\">\"loc=&#123;&#125;, scale=&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>g <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> laplace<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rng <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Example of Double Exponential Distribution\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-8-2.png\" alt=\"png\" /></p>\n<p>留意看 x 轴为 0 处的顶点。这将会使套索回归的相关系数为 0。通过调整超参数，还有可能创建出相关系数为 0 的情况，这由问题的具体情况决定。</p>\n<h1 id=\"用梯度提升回归从误差中学习\"><a class=\"anchor\" href=\"#用梯度提升回归从误差中学习\">#</a> 用梯度提升回归从误差中学习</h1>\n<p>梯度提升回归（Gradient boosting regression，GBR）是一种从它的错误中进行学习的技术。它本质上就是集思广益，集成一堆较差的学习算法进行学习。有两点需要注意：</p>\n<ul>\n<li>每个学习算法准备率都不高，但是它们集成起来可以获得很好的准确率。</li>\n<li>这些学习算法依次应用，也就是说每个学习算法都是在前一个学习算法的错误中学习</li>\n</ul>\n<h2 id=\"getting-ready-9\"><a class=\"anchor\" href=\"#getting-ready-9\">#</a> Getting ready</h2>\n<p>我们还是用基本的回归数据来演示 GBR：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> noise<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-9\"><a class=\"anchor\" href=\"#how-to-do-it-9\">#</a> How to do it...</h2>\n<p>GBR 算是一种集成模型因为它是一个集成学习算法。这种称谓的含义是指 GBR 用许多较差的学习算法组成了一个更强大的学习算法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> GradientBoostingRegressor <span class=\"token keyword\">as</span> GBR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gbr <span class=\"token operator\">=</span> GBR<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gbr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>gbr_preds <span class=\"token operator\">=</span> gbr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>很明显，这里应该不止一个模型，但是这种模式现在很简明。现在，让我们用基本回归算法来拟合数据当作参照：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lr_preds <span class=\"token operator\">=</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有了参照之后，让我们看看 GBR 算法与线性回归算法效果的对比情况。图像生成可以参照第一章正态随机过程的相关主题，首先需要下面的计算：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gbr_residuals <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> gbr_preds</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lr_residuals <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> lr_preds</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>gbr_residuals<span class=\"token punctuation\">,</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'GBR Residuals'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>lr_residuals<span class=\"token punctuation\">,</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'LR Residuals'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"GBR Residuals vs LR Residuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-9-1.png\" alt=\"png\" /></p>\n<p>看起来好像 GBR 拟合的更好，但是并不明显。让我们用 95% 置信区间（Confidence interval,CI）对比一下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>gbr_residuals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([-16.73937398,  15.96258406])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>lr_residuals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([-19.03378242,  19.45950191])\n</code></pre>\n<p>GBR 的置信区间更小，数据更集中，因此其拟合效果更好；我们还可以对 GBR 算法进行一些调整来改善效果。我用下面的例子演示一下，然后在下一节介绍优化方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n_estimators <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gbrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>GBR<span class=\"token punctuation\">(</span>n_estimators<span class=\"token operator\">=</span>n_estimator<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> n_estimator <span class=\"token keyword\">in</span> n_estimators<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>residuals <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> gbr <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>gbrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gbr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    residuals<span class=\"token punctuation\">[</span>gbr<span class=\"token punctuation\">.</span>n_estimators<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> gbr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">800</span><span class=\"token punctuation\">:</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">450</span><span class=\"token punctuation\">:</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> residuals<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'n_estimators: %d'</span> <span class=\"token operator\">%</span> k<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Residuals at Various Numbers of Estimators\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/2-9-2.png\" alt=\"png\" /></p>\n<p>图像看着有点混乱，但是依然可以看出随着估计器数据的增加，误差在减少。不过，这并不是一成不变的。首先，我们没有交叉检验过，其次，随着估计器数量的增加，训练时间也会变长。现在我们用数据比较小没什么关系，但是如果数据再放大一两倍问题就出来了。</p>\n<h2 id=\"how-it-works-7\"><a class=\"anchor\" href=\"#how-it-works-7\">#</a> How it works...</h2>\n<p>上面例子中 GBR 的第一个参数是 <code>n_estimators</code> ，指 GBR 使用的学习算法的数量。通常，如果你的设备性能更好，可以把 <code>n_estimators</code>  设置的更大，效果也会更好。还有另外几个参数要说明一下。</p>\n<p>你应该在优化其他参数之前先调整 <code>max_depth</code>  参数。因为每个学习算法都是一颗决策树， <code>max_depth</code>  决定了树生成的节点数。选择合适的节点数量可以更好的拟合数据，而更多的节点数可能造成拟合过度。</p>\n<p><code>loss</code>  参数决定损失函数，也直接影响误差。 <code>ls</code>  是默认值，表示最小二乘法（least squares）。还有最小绝对值差值，Huber 损失和分位数损失（quantiles）等等。</p>\n",
            "tags": [
                "计算机科学",
                "机器学习",
                "Scikit-learn Cookbook",
                "机器学习",
                "Scikit-learn Cookbook"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC1%E7%AB%A0%20%E6%A8%A1%E5%9E%8B%E9%A2%84%E5%A4%84%E7%90%86/",
            "url": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC1%E7%AB%A0%20%E6%A8%A1%E5%9E%8B%E9%A2%84%E5%A4%84%E7%90%86/",
            "title": "第1章 模型预处理",
            "date_published": "2021-12-03T10:44:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd2l6YXJkZm9yY2VsL3NrbGVhcm4tY2I=\">https://gitee.com/wizardforcel/sklearn-cb</span><br />\n 未经作者的许可，此代码仅用于学习，不能用于其他用途。</p>\n</div>\n<h1 id=\"第一章-模型预处理\"><a class=\"anchor\" href=\"#第一章-模型预处理\">#</a> 第一章 模型预处理</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<div class=\"note primary\">\n<p>本章介绍 <code>数据获取</code> （setting data）， <code>数据整理</code> （preparing data）和 <code>建模前的降维</code> （premodel dimensionality reduction）工作。这些内容并非 <code>机器学习</code> （machine learning，ML）最核心的部分，但是它们往往决定模型的成败。</p>\n</div>\n<p>本章主要分三部分。首先，我们介绍如何创建 <code>模拟数据</code> （fake data），这看着微不足道，但是创建模拟数据并用模型进行拟合是模型测试的重要步骤。更重要的是，当我们从零开始一行一行代码实现一个算法时，我们想知道算法功能是否达到预期，这时手上可能没有数据，我们可以创建模拟数据来测试。之后，我们将介绍一些 <code>数据预处理变换</code> 的方法，包括缺失数据填补（data imputation），分类变量编码（categorical variable encoding）。最后，我们介绍一些 <code>降维方法</code> ，如主成分分析，因子分析，以及正态随机过程等。</p>\n<p>本章，尤其是前半部分与后面的章节衔接紧密。后面使用 <code>scikit-learn</code>  时，数据都源自本章内容。前两节介绍数据获取；紧接着介绍数据清洗。</p>\n<div class=\"note info no-icon\">\n<p>本书使用 scikit-learn 0.15，NumPy 1.9 和 pandas 0.13，兼容 Python2.7 和 Python3.4。还会用到其他的 Python 库，建议参考对应的官方安装指令。</p>\n</div>\n<h1 id=\"从外部源获取样本数据\"><a class=\"anchor\" href=\"#从外部源获取样本数据\">#</a> 从外部源获取样本数据</h1>\n<p>如果条件允许，学本书内容时尽量用你熟悉的数据集；方便起见，我们用 <code>scikit-learn</code>  的<span class=\"red\">内置数据库</span>。这些内置数据库可用于测试不同的建模技术，如回归和分类。而且这些内置数据库都是非常著名的数据库。这对不同领域的学术论文的作者们来说是很用的，他们可以用这些内置数据库将他们的模型与其他模型进行比较。</p>\n<div class=\"note success\">\n<p>推荐使用 IPython 来运行文中的指令。大内存很重要，这样可以让普通的命令正常运行。如果用 IPython Notebook 就更好了。如果你用 Notebook，记得用 <code>%matplotlib inline</code>  指令，这样图象就会出现在 Notebook 里面，而不是一个新窗口里。</p>\n</div>\n<h2 id=\"getting-ready\"><a class=\"anchor\" href=\"#getting-ready\">#</a> Getting ready</h2>\n<p>scikit-learn 的内置数据库在 <code>datasets</code>  模块里。用如下命令导入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><p>在 IPython 里面运行 <code>datasets.*?</code>  就会看到 <code>datasets</code>  模块的指令列表。</p>\n<h2 id=\"how-to-do-it\"><a class=\"anchor\" href=\"#how-to-do-it\">#</a> How to do it…</h2>\n<p><code>datasets</code>  模块主要有两种数据类型。较小的测试数据集在 <code>sklearn</code>  包里面，可以通过 <code>datasets.load_*?</code>  查看。较大的数据集可以根据需要下载。后者默认情况下不在 <code>sklearn</code>  包里面；但是，有时这些大数据集可以更好的测试模型和算法，因为比较复杂足以模拟现实情形。</p>\n<p>默认在 <code>sklearn</code>  包里面的数据集可以通过 <code>datasets.load_*?</code>  查看。另外一些数据集需要通过 <code>datasets.fetch_*?</code>  下载，这些数据集更大，没有被自动安装。经常用于测试那些解决实际问题的算法。</p>\n<p>首先，加载 <code>boston</code>  数据集看看：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>boston <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>DESCR<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Boston House Prices dataset\n\nNotes\n------\nData Set Characteristics:  \n\n    :Number of Instances: 506 \n\n    :Number of Attributes: 13 numeric/categorical predictive\n    \n    :Median Value (attribute 14) is usually the target\n\n    :Attribute Information (in order):\n        - CRIM     per capita crime rate by town\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n        - INDUS    proportion of non-retail business acres per town\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n        - NOX      nitric oxides concentration (parts per 10 million)\n        - RM       average number of rooms per dwelling\n        - AGE      proportion of owner-occupied units built prior to 1940\n        - DIS      weighted distances to five Boston employment centres\n        - RAD      index of accessibility to radial highways\n        - TAX      full-value property-tax rate per $10,000\n        - PTRATIO  pupil-teacher ratio by town\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n        - LSTAT    % lower status of the population\n        - MEDV     Median value of owner-occupied homes in $1000's\n\n    :Missing Attribute Values: None\n\n    :Creator: Harrison, D. and Rubinfeld, D.L.\n\nThis is a copy of UCI ML housing dataset.\nhttp://archive.ics.uci.edu/ml/datasets/Housing\n\n\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\nprices and the demand for clean air', J. Environ. Economics &amp; Management,\nvol.5, 81-102, 1978.   Used in Belsley, Kuh &amp; Welsch, 'Regression diagnostics\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\npages 244-261 of the latter.\n\nThe Boston house-price data has been used in many machine learning papers that address regression\nproblems.   \n     \n**References**\n\n   - Belsley, Kuh &amp; Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n   - many more! (see http://archive.ics.uci.edu/ml/datasets/Housing)\n</code></pre>\n<p><code>DESCR</code>  将列出数据集的一些概况。下面我们来下载一个数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>housing <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>fetch_california_housing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>housing<span class=\"token punctuation\">.</span>DESCR<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>downloading Cal. housing from http://lib.stat.cmu.edu/modules.php?op=modload&amp;name=Downloads&amp;file=index&amp;req=getit&amp;lid=83 to C:\\Users\\tj2\\scikit_learn_data\nCalifornia housing dataset.\n\nThe original database is available from StatLib\n\n    http://lib.stat.cmu.edu/\n\nThe data contains 20,640 observations on 9 variables.\n\nThis dataset contains the average house value as target variable\nand the following input variables (features): average income,\nhousing average age, average rooms, average bedrooms, population,\naverage occupation, latitude, and longitude in that order.\n\nReferences\n----------\n\nPace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\nStatistics and Probability Letters, 33 (1997) 291-297.\n</code></pre>\n<h2 id=\"how-it-works\"><a class=\"anchor\" href=\"#how-it-works\">#</a> How it works…</h2>\n<div class=\"note primary\">\n<p>当这些数据集被加载时，它们并不是直接转换成 Numpy 数组。它们是 <code>Bunch</code>  类型。<strong>Bunch</strong> 是 Python 常用的数据结构。基本可以看成是一个词典，它的键被实例对象作为 <code>属性</code> 使用。</p>\n</div>\n<p>用 <code>data</code>  属性连接数据中包含 <code>自变量</code> 的 Numpy 数组，用 <code>target</code>  属性连接数据中的 <code>因变量</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> boston<span class=\"token punctuation\">.</span>target</pre></td></tr></table></figure><p>网络上 <code>Bunch</code>  对象有不同的实现；自己写一个也不难。scikit-learn 用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NjaWtpdC1sZWFybi9zY2lraXQtbGVhcm4vYmxvYi9tYXN0ZXIvc2tsZWFybi9kYXRhc2V0cy9iYXNlLnB5\">基本模块</span>定义 <code>Bunch</code> 。</p>\n<h2 id=\"theres-more\"><a class=\"anchor\" href=\"#theres-more\">#</a> There's more…</h2>\n<p>让你从外部源获取数据集时，它默认会被当前文件夹的 <code>scikit_learn_data/</code>  放在里面，可以通过两种方式进行配置：</p>\n<ul>\n<li>设置 <code>SCIKIT_LEARN_DATA</code>  环境变量指定下载位置</li>\n<li><code>fetch_*?</code>  方法的第一个参数是 <code>data_home</code> ，可以知道下载位置</li>\n</ul>\n<p>通过 <code>datasets.get_data_home()</code>  很容易检查默认下载位置。</p>\n<h2 id=\"see-also\"><a class=\"anchor\" href=\"#see-also\">#</a> See also</h2>\n<p>UCI 机器学习库（UCI Machine Learning Repository）是找简单数据集的好地方。很多 scikit-learn 的数据集都在那里，那里还有更多的数据集。其他数据源还是著名的 KDD 和 Kaggle。</p>\n<h1 id=\"创建试验样本数据\"><a class=\"anchor\" href=\"#创建试验样本数据\">#</a> 创建试验样本数据</h1>\n<p>希望你在学习本书时用自己的数据来试验，如果实在没有数据，下面就介绍如何用 scikit-learn 创建一些试验用的 <code>样本数据</code> （toy data）。</p>\n<h2 id=\"getting-ready-2\"><a class=\"anchor\" href=\"#getting-ready-2\">#</a> Getting ready</h2>\n<p>与前面获取内置数据集，获取新数据集的过程类似，创建样本数据集，用 <code>make_数据集名称</code> 函数。这些数据集都是人造的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>datasets<span class=\"token punctuation\">.</span>make_<span class=\"token operator\">*</span>?</pre></td></tr></table></figure><pre><code>datasets.make_biclusters\ndatasets.make_blobs\ndatasets.make_checkerboard\ndatasets.make_circles\ndatasets.make_classification\ndatasets.make_friedman1\ndatasets.make_friedman2\ndatasets.make_friedman3\ndatasets.make_gaussian_quantiles\ndatasets.make_hastie_10_2\ndatasets.make_low_rank_matrix\ndatasets.make_moons\ndatasets.make_multilabel_classification\ndatasets.make_regression\ndatasets.make_s_curve\ndatasets.make_sparse_coded_signal\ndatasets.make_sparse_spd_matrix\ndatasets.make_sparse_uncorrelated\ndatasets.make_spd_matrix\ndatasets.make_swiss_roll\n</code></pre>\n<p>为了简便，下面我们用 <code>d</code>  表示 <code>datasets</code> ， <code>np</code>  表示 <code>numpy</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">as</span> d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><h2 id=\"how-to-do-it-2\"><a class=\"anchor\" href=\"#how-to-do-it-2\">#</a> How to do it...</h2>\n<p>这一节将带你创建几个数据集；在后面的 <em>How it works...</em> 一节，我们会检验这些数据集的特性。除了样本数据集，后面还会创建一些具有特定属性的数据集来显示算法的特点。</p>\n<h3 id=\"回归数据集\"><a class=\"anchor\" href=\"#回归数据集\">#</a> 回归数据集</h3>\n<p>首先，我们创建 <code>回归（regression）数据集</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>reg_data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>reg_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span>reg_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>((100, 100), (100,))\n</code></pre>\n<p><code>reg_data</code>  默认是一个元组，第一个元素是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn><mo>×</mo><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100\\times100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> 的矩阵 ——100 个样本，每个样本 10 个特征（自变量），第二个元素是 1 个因变量，对应自变量的样本数量，也是 100 个样本。然而，默认情况下，只有 10 个特征与因变量的相关（参数 <code>n_informative</code>  默认值是 10），其他 90 个特征都与因变量无关。</p>\n<p>可以自定义更复杂的数据集。比如，创建一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1000</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">1000\\times10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> 的矩阵，5 个特征与因变量相关，误差系数 0.2，两个因变量。代码如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>complex_reg_data <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>complex_reg_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span>complex_reg_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>((1000, 10), (1000, 2))\n</code></pre>\n<h3 id=\"分类数据集\"><a class=\"anchor\" href=\"#分类数据集\">#</a> 分类数据集</h3>\n<p><code>分类数据集</code> 也很容易创建。很容易创建一个 <code>基本均衡</code> 分类集，但是这种情况现实中几乎不可能发生 —— 大多数用户不会改变消费习惯，大多数交易都不是虚假的，等等。因此，创建一个 <code>非均衡</code> 数据集更有意义：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>classification_set <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>weights<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>np<span class=\"token punctuation\">.</span>bincount<span class=\"token punctuation\">(</span>classification_set<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([10, 90], dtype=int64)\n</code></pre>\n<h3 id=\"聚类数据集\"><a class=\"anchor\" href=\"#聚类数据集\">#</a> 聚类数据集</h3>\n<p><code>聚类数据集</code> 也可以创建。有一些函数可以为不同聚类算法创建对应的数据集。例如， <code>blobs</code>  函数可以轻松创建 K-Means 聚类数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">as</span> d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blobs <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>make_blobs<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"A blob with 3 centers\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> blobs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>blobs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x88e44e0&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-2-1.png\" alt=\"png\" /></p>\n<h2 id=\"how-it-works-2\"><a class=\"anchor\" href=\"#how-it-works-2\">#</a> How it works...</h2>\n<p>下面让我们从源代码看看 scikit-learn 是如何生成回归数据集的。下面任何未重新定义的参数都使用 <code>make_regression</code>  函数的默认值。</p>\n<p>其实非常简单。首先，函数调用时生成一个指定维度的随机数组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>n_samples<span class=\"token punctuation\">,</span> n_features<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于基本均衡数据集，其目标数据集生成方法是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ground_truth <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeroes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>np_samples<span class=\"token punctuation\">,</span> n_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ground_truth<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n_informative<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>n_informative<span class=\"token punctuation\">,</span> n_targets<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后 <code>X</code>  和 <code>ground_truth</code>  点积加上 <code>bias</code>  就得到了 <code>y</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> ground_truth<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> bias</pre></td></tr></table></figure><div class=\"note success\">\n<p>点积是一种基本的矩阵运算<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msub><mo>⋅</mo><msub><mi>B</mi><mrow><mi>n</mi><mo>×</mo><mi>s</mi></mrow></msub><mo>=</mo><msub><mi>C</mi><mrow><mi>m</mi><mo>×</mo><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">A_{m \\times n} \\cdot B_{n \\times s} = C_{m \\times s}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>。因此， <code>y</code>  数据集里面样本数量是 <code>n_samples</code> ，即数据集的行数，因变量数量是 <code>n_target</code> 。</p>\n</div>\n<p>由于 Numpy 的 <code>广播操作（broadcasting）</code> ， <code>bias</code>  虽然是标量，也会被增加到矩阵的每个元素上。增加噪声和数据混洗都很简单。这样试验用的回归数据集就完美了。</p>\n<h1 id=\"把数据调整为标准正态分布\"><a class=\"anchor\" href=\"#把数据调整为标准正态分布\">#</a> 把数据调整为标准正态分布</h1>\n<div class=\"note primary\">\n<p>经常需要将数据 <code>标准化（scaling）</code> 调整为 <code>标准正态分布（standard normal）</code> 。标准正态分布算得上是统计学中最重要的分布了。如果你学过统计，Z 值表（z-scores）应该不陌生。实际上，Z 值表的作用就是把服从某种分布的特征转换成标准正态分布的 Z 值。</p>\n</div>\n<h2 id=\"getting-ready-3\"><a class=\"anchor\" href=\"#getting-ready-3\">#</a> Getting ready</h2>\n<p>数据标准化调整是非常有用的。许多机器学习算法在具有不同范围特征的数据中呈现不同的学习效果。例如， <code>SVM</code> （Support Vector Machine，支持向量机）在没有标准化调整过的数据中表现很差，因为可能一个变量的范围是 0-10000，而另一个变量的范围是 0-1。 <code>preprocessing</code>  模块提供了一些函数可以将特征调整为标准形：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> preprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><h2 id=\"how-to-do-it-3\"><a class=\"anchor\" href=\"#how-to-do-it-3\">#</a> How to do it...</h2>\n<p>还用 <code>boston</code>  数据集运行下面的代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boston <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> boston<span class=\"token punctuation\">.</span>target</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#前三个特征的均值</span></pre></td></tr></table></figure><pre><code>array([  3.59376071,  11.36363636,  11.13677866])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#前三个特征的标准差</span></pre></td></tr></table></figure><pre><code>array([  8.58828355,  23.29939569,   6.85357058])\n</code></pre>\n<p>这里看出很多信息。首先，第一个特征的均值是三个特征中最小的，而其标准差却比第三个特征的标准差大。第二个特征的均值和标准差都是最大的 —— 说明它的值很分散，我们通过 <code>preprocessing</code>  对它们标准化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X_2 <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X_2<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([  6.34099712e-17,  -6.34319123e-16,  -2.68291099e-15])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X_2<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 1.,  1.,  1.])\n</code></pre>\n<h2 id=\"how-it-works-3\"><a class=\"anchor\" href=\"#how-it-works-3\">#</a> How it works...</h2>\n<p><code>中心化与标准化</code> 函数很简单，就是减去均值后除以标准差，公式如下所示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mover accent=\"true\"><mi>x</mi><mo>ˉ</mo></mover></mrow><mi>σ</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">x= \\frac {x- \\bar x} \\sigma\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.9463300000000001em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2603300000000002em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.56778em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">x</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>除了这个函数，还有一个 <code>中心化与标准化类</code> ，与管线命令（Pipeline）联合处理大数据集时很有用。单独使用一个中心化与标准化类实例也是有用处的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_scaler <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_scaler<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_scaler<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([  6.34099712e-17,  -6.34319123e-16,  -2.68291099e-15])\n</code></pre>\n<p>把特征的样本均值变成 <code>0</code> ，标准差变成 <code>1</code> ，这种标准化处理并不是唯一的方法。 <code>preprocessing</code>  还有 <code>MinMaxScaler</code>  类，将样本数据根据最大值和最小值调整到一个区间内：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_minmax_scaler <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>MinMaxScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_minmax_scaler<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_minmax_scaler<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 1.,  1.,  1.])\n</code></pre>\n<p>通过 <code>MinMaxScaler</code>  类可以很容易将默认的区间 <code>0</code>  到 <code>1</code>  修改为需要的区间：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_odd_scaler <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>MinMaxScaler<span class=\"token punctuation\">(</span>feature_range<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>my_odd_scaler<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_odd_scaler<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([ 3.14,  3.14,  3.14])\n</code></pre>\n<p>还有一种方法是 <code>正态化（normalization）</code> 。它会将每个样本 <code>长度</code> 标准化为 1。这种方法和前面介绍的不同，它的特征值是标量。正态化代码如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>normalized_X <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>normalize<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>乍看好像没什么用，但是在求欧式距离（相似度度量指标）时就很必要了。例如三个样本分别是向量 <code>(1,1,0)</code> ， <code>(3,3,0)</code> ， <code>(1,-1,0)</code> 。样本 1 与样本 3 的距离比样本 1 与样本 2 的距离短，尽管样本 1 与样本 3 是轴对称，而样本 1 与样本 2 只是比例不同而已。由于距离常用于相似度检测，因此建模之前如果不对数据进行正态化很可能会造成失误。</p>\n<h2 id=\"theres-more-2\"><a class=\"anchor\" href=\"#theres-more-2\">#</a> There's more...</h2>\n<p>数据填补（data imputation）是一个内涵丰富的主题，在使用 scikit-learn 的数据填补功能时需要注意以下两点。</p>\n<h3 id=\"创建幂等标准化idempotent-scaler对象\"><a class=\"anchor\" href=\"#创建幂等标准化idempotent-scaler对象\">#</a> 创建幂等标准化（idempotent scaler）对象</h3>\n<p>有时可能需要标准化 <code>StandardScaler</code>  实例的均值和 / 或方差。例如，可能（尽管没用）会经过一系列变化创建出一个与原来完全相同的 <code>StandardScaler</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_useless_scaler <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>StandardScaler<span class=\"token punctuation\">(</span>with_mean<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> with_std<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>transformed_sd <span class=\"token operator\">=</span> my_useless_scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>original_sd <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>np<span class=\"token punctuation\">.</span>array_equal<span class=\"token punctuation\">(</span>transformed_sd<span class=\"token punctuation\">,</span> original_sd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>True\n</code></pre>\n<h3 id=\"处理稀疏数据填补\"><a class=\"anchor\" href=\"#处理稀疏数据填补\">#</a> 处理稀疏数据填补</h3>\n<p>在标准化处理时，稀疏矩阵的处理方式与正常矩阵没太大不同。这是因为数据经过中心化处理后，原来的 <code>0</code>  值会变成非 <code>0</code>  值，这样稀疏矩阵经过处理就不再稀疏了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> scipy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>matrix <span class=\"token operator\">=</span> scipy<span class=\"token punctuation\">.</span>sparse<span class=\"token punctuation\">.</span>eye<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>preprocessing<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-45-466df6030461&gt; in &lt;module&gt;()\n      1 import scipy\n      2 matrix = scipy.sparse.eye(1000)\n----&gt; 3 preprocessing.scale(matrix)\n\n\nd:\\programfiles\\Miniconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py in scale(X, axis, with_mean, with_std, copy)\n    120         if with_mean:\n    121             raise ValueError(\n--&gt; 122                 &quot;Cannot center sparse matrices: pass `with_mean=False` instead&quot;\n    123                 &quot; See docstring for motivation and alternatives.&quot;)\n    124         if axis != 0:\n\n\nValueError: Cannot center sparse matrices: pass `with_mean=False` instead See docstring for motivation and alternatives.\n</code></pre>\n<p>这个错误表面，标准化一个稀疏矩阵不能带 <code>with_mean</code> ，只要 <code>with_std</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>preprocessing<span class=\"token punctuation\">.</span>scale<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> with_mean<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;1000x1000 sparse matrix of type '&lt;class 'numpy.float64'&gt;'\n\twith 1000 stored elements in Compressed Sparse Row format&gt;\n</code></pre>\n<p>另一个方法是直接处理 <code>matrix.todense()</code> 。但是，这个方法很危险，因为矩阵已经是稀疏的了，这么做可能出现内存异常。</p>\n<h1 id=\"用阈值创建二元特征\"><a class=\"anchor\" href=\"#用阈值创建二元特征\">#</a> 用阈值创建二元特征</h1>\n<p>在前一个主题，我们介绍了数据转换成标准正态分布的方法。现在，我们看看另一种完全不同的转换方法。</p>\n<p>当不需要呈标准化分布的数据时，我们可以不处理它们直接使用；但是，如果有足够理由，直接使用也许是聪明的做法。通常，尤其是处理连续数据时，可以通过建立二元特征来分割数据。</p>\n<h2 id=\"getting-ready-4\"><a class=\"anchor\" href=\"#getting-ready-4\">#</a> Getting ready</h2>\n<p>通常建立二元特征是非常有用的方法，不过要格外小心。我们还是用 <code>boston</code>  数据集来学习如何创建二元特征。</p>\n<p>首先，加载 <code>boston</code>  数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>boston <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><h2 id=\"how-to-do-it-4\"><a class=\"anchor\" href=\"#how-to-do-it-4\">#</a> How to do it...</h2>\n<p>与标准化处理类似，scikit-learn 有两种方法二元特征：</p>\n<ul>\n<li><code>preprocessing.binarize</code> （一个函数）</li>\n<li><code>preprocessing.Binarizer</code> （一个类）</li>\n</ul>\n<p><code>boston</code>  数据集的因变量是房子的价格中位数（单位：千美元）。这个数据集适合测试回归和其他连续型预测算法，但是假如现在我们想预测一座房子的价格是否高于总体均值。要解决这个问题，我们需要创建一个均值的阈值。如果一个值比均值大，则为 <code>1</code> ；否则，则为 <code>0</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> preprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_target <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>binarize<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span> threshold<span class=\"token operator\">=</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_target<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([ 1.,  0.,  1.,  1.,  1.])\n</code></pre>\n<p>很容易，让我们检查一下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([1, 0, 1, 1, 1])\n</code></pre>\n<p>既然 Numpy 已经很简单了，为什么还要用 scikit-learn 的函数呢？管道命令，将在<em>用管道命令联接多个预处理步骤</em>一节中介绍，会解释这个问题；要用管道命令就要用 <code>Binarizer</code>  类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">bin</span> <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Binarizer<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_target <span class=\"token operator\">=</span> <span class=\"token builtin\">bin</span><span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>boston<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_target<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([ 1.,  0.,  1.,  1.,  1.])\n</code></pre>\n<h2 id=\"how-it-works-4\"><a class=\"anchor\" href=\"#how-it-works-4\">#</a> How it works...</h2>\n<p>方法看着非常简单；其实 scikit-learn 在底层创建一个检测层，如果被监测的值比阈值大就返回 <code>Ture</code> 。然后把满足条件的值更新为 <code>1</code> ，不满足条件的更新为 <code>0</code> 。</p>\n<h2 id=\"theres-more-3\"><a class=\"anchor\" href=\"#theres-more-3\">#</a> There's more...</h2>\n<p>让我们再介绍一些稀疏矩阵和 <code>fit</code>  方法的知识。</p>\n<h3 id=\"稀疏矩阵\"><a class=\"anchor\" href=\"#稀疏矩阵\">#</a> 稀疏矩阵</h3>\n<p>稀疏矩阵的 <code>0</code>  是不被存储的；这样可以节省很多空间。这就为 <code>binarizer</code>  造成了问题，需要指定阈值参数 <code>threshold</code>  不小于 <code>0</code>  来解决，如果 <code>threshold</code>  小于 <code>0</code>  就会出现错误：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>sparse <span class=\"token keyword\">import</span> coo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>spar <span class=\"token operator\">=</span> coo<span class=\"token punctuation\">.</span>coo_matrix<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>binomial<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>preprocessing<span class=\"token punctuation\">.</span>binarize<span class=\"token punctuation\">(</span>spar<span class=\"token punctuation\">,</span> threshold<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-31-c9b5156c63ab&gt; in &lt;module&gt;()\n      1 from scipy.sparse import coo\n      2 spar = coo.coo_matrix(np.random.binomial(1, .25, 100))\n----&gt; 3 preprocessing.binarize(spar, threshold=-1)\n\n\nd:\\programfiles\\Miniconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py in binarize(X, threshold, copy)\n    718     if sparse.issparse(X):\n    719         if threshold &lt; 0:\n--&gt; 720             raise ValueError('Cannot binarize a sparse matrix with threshold '\n    721                              '&lt; 0')\n    722         cond = X.data &gt; threshold\n\n\nValueError: Cannot binarize a sparse matrix with threshold &lt; 0\n</code></pre>\n<h3 id=\"fit方法\"><a class=\"anchor\" href=\"#fit方法\">#</a>  <code>fit</code>  方法</h3>\n<p><code>binarizer</code>  类里面有 <code>fit</code>  方法，但是它只是通用接口，并没有实际的拟合操作，仅返回对象。</p>\n<h1 id=\"分类变量处理\"><a class=\"anchor\" href=\"#分类变量处理\">#</a> 分类变量处理</h1>\n<p>分类变量是经常遇到的问题。一方面它们提供了信息；另一方面，它们可能是文本形式 —— 纯文字或者与文字相关的整数 —— 就像表格的索引一样。</p>\n<p>因此，我们在建模的时候往往需要将这些变量量化，但是仅仅用简单的 <code>id</code>  或者原来的形式是不行的。因为我们也需要避免在上一节里<em>通过阈值创建二元特征</em>遇到的问题。如果我们把数据看成是连续的，那么也必须解释成连续的。</p>\n<h2 id=\"getting-ready-5\"><a class=\"anchor\" href=\"#getting-ready-5\">#</a> Getting ready</h2>\n<p>这里 <code>boston</code>  数据集不适合演示。虽然它适合演示二元特征，但是用来创建分类变量不太合适。因此，这里用 <code>iris</code>  数据集演示。</p>\n<p>解决问题之前先把问题描述清楚。假设有一个问题，其目标是预测花萼的宽度；那么花的种类就可能是一个有用的特征。</p>\n<p>首先，让我们导入数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>y <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>target</pre></td></tr></table></figure><p>现在 <code>X</code>  和 <code>y</code>  都获得了对应的值，我们把它们放到一起：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>d <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>column_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-5\"><a class=\"anchor\" href=\"#how-to-do-it-5\">#</a> How to do it...</h2>\n<p>下面我们把花类型 <code>y</code>  对应那一列转换成分类特征：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> preprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>text_encoder <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>OneHotEncoder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>text_encoder<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.]])\n</code></pre>\n<h2 id=\"how-it-works-5\"><a class=\"anchor\" href=\"#how-it-works-5\">#</a> How it works...</h2>\n<p>这里，编码器为每个分类变量创建了额外的特征，转变成一个稀疏矩阵。矩阵是这样定义的：每一行由 0 和 1 构成，对应的分类特征是 1，其他都是 0。用稀疏矩阵存储数据很合理。</p>\n<p><code>text_encoder</code>  是一个标准的 scikit-learn 模型，可以重复使用：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>text_encoder<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([[ 0.,  1.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  1.,  0.]])\n</code></pre>\n<h2 id=\"theres-more-4\"><a class=\"anchor\" href=\"#theres-more-4\">#</a> There's more...</h2>\n<p>在 scikit-learn 和 Python 库中，还有一些方法可以创建分类变量。如果你更倾向于用 scikit-learn，而且分类编码原则很简单，可以试试 <code>DictVectorizer</code> 。如果你需要处理更复杂的分类编码原则， <code>patsy</code>  是很好的选择。</p>\n<h3 id=\"dictvectorizer\"><a class=\"anchor\" href=\"#dictvectorizer\">#</a> DictVectorizer</h3>\n<p><code>DictVectorizer</code>  可以将字符串转换成分类特征：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction <span class=\"token keyword\">import</span> DictVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dv <span class=\"token operator\">=</span> DictVectorizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>my_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'species'</span><span class=\"token punctuation\">:</span> iris<span class=\"token punctuation\">.</span>target_names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> y<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dv<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>my_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.],\n       [ 1.,  0.,  0.]])\n</code></pre>\n<blockquote>\n<p>Python 的词典可以看成是一个稀疏矩阵，它们只包含非 0 值。</p>\n</blockquote>\n<h3 id=\"pasty\"><a class=\"anchor\" href=\"#pasty\">#</a> Pasty</h3>\n<p><code>patsy</code>  是另一个分类变量编码的包。经常和 <code>StatsModels</code>  一起用， <code>patsy</code>  可以把一组字符串转换成一个矩阵。</p>\n<blockquote>\n<p>这部分内容与 scikit-learn 关系不大，跳过去也没关系。</p>\n</blockquote>\n<p>例如，如果 <code>x</code>  和 <code>y</code>  都是字符串， <code>dm = patsy.design_matrix(&quot;x + y&quot;)</code>  将创建适当的列。如果不是， <code>C(x)</code>  将生成一个分类变量。</p>\n<p>例如，初看 <code>iris.target</code> ，可以把它当做是一个连续变量。因此，用下面的命令处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> patsy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>patsy<span class=\"token punctuation\">.</span>dmatrix<span class=\"token punctuation\">(</span><span class=\"token string\">\"0 + C(species)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'species'</span><span class=\"token punctuation\">:</span> iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>DesignMatrix with shape (150, 3)\n  C(species)[0]  C(species)[1]  C(species)[2]\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n              1              0              0\n  [120 rows omitted]\n  Terms:\n    'C(species)' (columns 0:3)\n  (to view full data, use np.asarray(this_obj))\n</code></pre>\n<h1 id=\"标签特征二元化\"><a class=\"anchor\" href=\"#标签特征二元化\">#</a> 标签特征二元化</h1>\n<p>在这个主题中，我们将用另一种方式来演示分类变量。有些时候只有一两个分类特征是重要的，这时就要避免多余的维度，如果有多个分类变量就有可能会出现这些多余的维度。</p>\n<h2 id=\"getting-ready-6\"><a class=\"anchor\" href=\"#getting-ready-6\">#</a> Getting ready</h2>\n<p>处理分类变量还有另一种方法，不需要通过 <code>OneHotEncoder</code> ，我们可以用 <code>LabelBinarizer</code> 。这是一个阈值与分类变量组合的方法。演示其用法之前，让我们加载 <code>iris</code>  数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets <span class=\"token keyword\">as</span> d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>target <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>target</pre></td></tr></table></figure><h2 id=\"how-to-do-it-6\"><a class=\"anchor\" href=\"#how-to-do-it-6\">#</a> How to do it...</h2>\n<p>导入 <code>LabelBinarizer()</code>  创建一个对象：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>preprocessing <span class=\"token keyword\">import</span> LabelBinarizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>label_binarizer <span class=\"token operator\">=</span> LabelBinarizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，将因变量的值转换成一个新的特征向量：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_target <span class=\"token operator\">=</span> label_binarizer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们看看 <code>new_target</code>  和 <code>label_binarizer</code>  对象的结果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_target<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>(150, 3)\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[1, 0, 0],\n       [1, 0, 0],\n       [1, 0, 0],\n       [1, 0, 0],\n       [1, 0, 0]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_target<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[0, 0, 1],\n       [0, 0, 1],\n       [0, 0, 1],\n       [0, 0, 1],\n       [0, 0, 1]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>label_binarizer<span class=\"token punctuation\">.</span>classes_</pre></td></tr></table></figure><pre><code>array([0, 1, 2])\n</code></pre>\n<h2 id=\"how-it-works-6\"><a class=\"anchor\" href=\"#how-it-works-6\">#</a> How it works...</h2>\n<p><code>iris</code>  的因变量基数为 <code>3</code> ，就是说有三种值。当 <code>LabelBinarizer</code>  将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N \\times 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 向量转换成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">N \\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> 矩阵时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> 就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N \\times 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 向量的基数。需要注意的是，当 <code>label_binarizer</code>  处理因变量之后，再转换基数以外的值都是 <code>[0,0,0]</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>label_binarizer<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([[0, 0, 0]])\n</code></pre>\n<h2 id=\"theres-more-5\"><a class=\"anchor\" href=\"#theres-more-5\">#</a> There's more...</h2>\n<p>0 和 1 并不一定都是表示因变量中的阳性和阴性实例。例如，如果我们需要用 <code>1000</code>  表示阳性值，用 <code>-1000</code>  表示阴性值，我们可以用 <code>label_binarizer</code>  处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>label_binarizer <span class=\"token operator\">=</span> LabelBinarizer<span class=\"token punctuation\">(</span>neg_label<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> pos_label<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>label_binarizer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1000, -1000, -1000],\n       [ 1000, -1000, -1000],\n       [ 1000, -1000, -1000],\n       [ 1000, -1000, -1000],\n       [ 1000, -1000, -1000]])\n</code></pre>\n<blockquote>\n<p>阳性和阴性值的唯一限制是，它们必须为整数。</p>\n</blockquote>\n<h1 id=\"处理缺失值\"><a class=\"anchor\" href=\"#处理缺失值\">#</a> 处理缺失值</h1>\n<p>实践中数值计算不可或缺，好在有很多方法可用，这个主题将介绍其中一些。不过，这些方法未必能解决你的问题。</p>\n<p>scikit-learn 有一些常见的计算方法，它可以对现有数据进行变换填补 <code>NA</code>  值。但是，如果数据集中的缺失值是有意而为之的 —— 例如，服务器响应时间超过 100ms—— 那么更合适的方法是用其他包解决，像处理贝叶斯问题的 PyMC，处理风险模型的 lifelines，或者自己设计一套方法。</p>\n<h2 id=\"getting-ready-7\"><a class=\"anchor\" href=\"#getting-ready-7\">#</a> Getting ready</h2>\n<p>处理缺失值的第一步是创建缺失值。Numpy 可以很方便的实现：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris_X <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>masking_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>binomial<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">,</span> iris_X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span>masking_array<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan</pre></td></tr></table></figure><p>让我们看看这几行代码，Numpy 和平时用法不太一样，这里是在数组中用了一个数组作为索引。为了创建了随机的缺失值，先创建一个随机布尔值数组，其形状和 <code>iris_X</code>  数据集的维度相同。然后，根据布尔值数组分配缺失值。因为每次运行都是随机数据，所以 <code>masking_array</code>  每次都会不同。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>masking_array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[False,  True, False, False],\n       [False,  True, False, False],\n       [False, False, False, False],\n       [ True, False, False,  True],\n       [False, False,  True, False]], dtype=bool)\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1,  nan,  1.4,  0.2],\n       [ 4.9,  nan,  1.4,  0.2],\n       [ 4.7,  3.2,  1.3,  0.2],\n       [ nan,  3.1,  1.5,  nan],\n       [ 5. ,  3.6,  nan,  0.2]])\n</code></pre>\n<h2 id=\"how-to-do-it-7\"><a class=\"anchor\" href=\"#how-to-do-it-7\">#</a> How to do it...</h2>\n<p>本书贯穿始终的一条原则（由于 scikit-learn 的存在）就是那些拟合与转换数据集的类都是可用的，可以在其他数据集中继续使用。具体演示如下所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> preprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>impute <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Imputer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_X_prime <span class=\"token operator\">=</span> impute<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1       ,  3.05221239,  1.4       ,  0.2       ],\n       [ 4.9       ,  3.05221239,  1.4       ,  0.2       ],\n       [ 4.7       ,  3.2       ,  1.3       ,  0.2       ],\n       [ 5.86306306,  3.1       ,  1.5       ,  1.21388889],\n       [ 5.        ,  3.6       ,  3.82685185,  0.2       ]])\n</code></pre>\n<p>注意 <code>[3,0]</code>  位置的不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>5.8630630630630645\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>nan\n</code></pre>\n<h2 id=\"how-it-works-7\"><a class=\"anchor\" href=\"#how-it-works-7\">#</a> How it works...</h2>\n<p>上面的计算可以通过不同的方法实现。默认是均值 <code>mean</code> ，一共是三种：</p>\n<ul>\n<li>均值 <code>mean</code> （默认方法）</li>\n<li>中位数 <code>median</code></li>\n<li>众数 <code>most_frequent</code></li>\n</ul>\n<p>scikit-learn 会用指定的方法计算数据集中的每个缺失值，然后把它们填充好。</p>\n<p>例如，用 <code>median</code>  方法重新计算 <code>iris_X</code> ，重新初始化 <code>impute</code>  即可：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>impute <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Imputer<span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">=</span><span class=\"token string\">'median'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X_prime <span class=\"token operator\">=</span> impute<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1 ,  3.  ,  1.4 ,  0.2 ],\n       [ 4.9 ,  3.  ,  1.4 ,  0.2 ],\n       [ 4.7 ,  3.2 ,  1.3 ,  0.2 ],\n       [ 5.8 ,  3.1 ,  1.5 ,  1.3 ],\n       [ 5.  ,  3.6 ,  4.45,  0.2 ]])\n</code></pre>\n<p>如果数据有缺失值，后面计算过程中可能会出问题。例如，在 * How to do it...* 一节里面， <code>np.nan</code>  作为默认缺失值，但是缺失值有很多表现形式。有时用 <code>-1</code>  表示。为了处理这些缺失值，可以在方法中指定那些值是缺失值。方法默认缺失值表现形式是 <code>Nan</code> ，就是 <code>np.nan</code>  的值。</p>\n<p>假设我们将 <code>iris_X</code>  的缺失值都用 <code>-1</code>  表示。看着很奇怪，但是 <code>iris</code>  数据集的度量值不可能是负数，因此用 <code>-1</code>  表示缺失值完全合理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1, -1. ,  1.4,  0.2],\n       [ 4.9, -1. ,  1.4,  0.2],\n       [ 4.7,  3.2,  1.3,  0.2],\n       [-1. ,  3.1,  1.5, -1. ],\n       [ 5. ,  3.6, -1. ,  0.2]])\n</code></pre>\n<p>填充这些缺失值也很简单：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>impute <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Imputer<span class=\"token punctuation\">(</span>missing_values<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X_prime <span class=\"token operator\">=</span> impute<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1       ,  3.05221239,  1.4       ,  0.2       ],\n       [ 4.9       ,  3.05221239,  1.4       ,  0.2       ],\n       [ 4.7       ,  3.2       ,  1.3       ,  0.2       ],\n       [ 5.86306306,  3.1       ,  1.5       ,  1.21388889],\n       [ 5.        ,  3.6       ,  3.82685185,  0.2       ]])\n</code></pre>\n<h2 id=\"theres-more-6\"><a class=\"anchor\" href=\"#theres-more-6\">#</a> There's more...</h2>\n<p>pandas 库也可以处理缺失值，而且更加灵活，但是重用性较弱：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X<span class=\"token punctuation\">[</span>masking_array<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>feature_names<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris_df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>iris_df<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sepal length (cm)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>0    5.100000\n1    4.900000\n2    4.700000\n3    5.863063\n4    5.000000\nName: sepal length (cm), dtype: float64\n</code></pre>\n<p>其灵活性在于， <code>fillna</code>  可以填充任意统计参数值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>iris_df<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sepal length (cm)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>0    5.1\n1    4.9\n2    4.7\n3    7.9\n4    5.0\nName: sepal length (cm), dtype: float64\n</code></pre>\n<h1 id=\"用管线命令处理多个步骤\"><a class=\"anchor\" href=\"#用管线命令处理多个步骤\">#</a> 用管线命令处理多个步骤</h1>\n<p>管线命令不经常用，但是很有用。它们可以把多个步骤组合成一个对象执行。这样可以更方便灵活地调节和控制整个模型的配置，而不只是一个一个步骤调节。</p>\n<h2 id=\"getting-ready-8\"><a class=\"anchor\" href=\"#getting-ready-8\">#</a> Getting ready</h2>\n<p>这是我们把多个数据处理步骤组合成一个对象的第一部分。在 scikit-learn 里称为 <code>pipeline</code> 。这里我们首先通过计算处理缺失值；然后将数据集调整为均值为 0，标准差为 1 的标准形。</p>\n<p>让我们创建一个有缺失值的数据集，然后再演示 <code>pipeline</code>  的用法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mat <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_spd_matrix<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>masking_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>binomial<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mat<span class=\"token punctuation\">[</span>masking_array<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.05419595,  1.42287309,  0.02368264, -0.8505244 ],\n       [ 1.42287309,  5.09704588,         nan, -2.46408728],\n       [ 0.02368264,  0.03614203,  0.63317494,  0.09792298],\n       [-0.8505244 , -2.46408728,  0.09792298,  2.04110849]])\n</code></pre>\n<h2 id=\"how-to-do-it-8\"><a class=\"anchor\" href=\"#how-to-do-it-8\">#</a> How to do it...</h2>\n<p>如果不用管线命令，我们可能会这样实现：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> preprocessing</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>impute <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Imputer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>scaler <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>StandardScaler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mat_imputed <span class=\"token operator\">=</span> impute<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mat_imputed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.05419595,  1.42287309,  0.02368264, -0.8505244 ],\n       [ 1.42287309,  5.09704588,  0.09560571, -2.46408728],\n       [ 0.02368264,  0.03614203,  0.63317494,  0.09792298],\n       [-0.8505244 , -2.46408728,  0.09792298,  2.04110849]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mat_imp_and_scaled <span class=\"token operator\">=</span> scaler<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>mat_imputed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mat_imp_and_scaled<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[  1.09907483e+00,   2.62635324e-01,  -3.88958755e-01,\n         -4.80451718e-01],\n       [  1.63825210e+00,   2.01707858e+00,  -7.50508486e-17,\n         -1.80311396e+00],\n       [ -4.08014393e-01,  -3.99538476e-01,   2.90716556e+00,\n          2.97005140e-01],\n       [ -1.68651124e+00,  -1.59341549e+00,   1.25317595e-02,\n          1.88986410e+00]])\n</code></pre>\n<p>现在我们用 <code>pipeline</code>  来演示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> pipeline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pipe <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">.</span>Pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'impute'</span><span class=\"token punctuation\">,</span> impute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'scaler'</span><span class=\"token punctuation\">,</span> scaler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们看看 <code>pipe</code>  的内容。和前面介绍一致，管线命令定义了处理步骤：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe</pre></td></tr></table></figure><pre><code>Pipeline(steps=[('impute', Imputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)), ('scaler', StandardScaler(copy=True, with_mean=True, with_std=True))])\n</code></pre>\n<p>然后在调用 <code>pipe</code>  的 <code>fit_transform</code>  方法，就可以把多个步骤组合成一个对象了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_mat <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_mat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[  1.09907483e+00,   2.62635324e-01,  -3.88958755e-01,\n         -4.80451718e-01],\n       [  1.63825210e+00,   2.01707858e+00,  -7.50508486e-17,\n         -1.80311396e+00],\n       [ -4.08014393e-01,  -3.99538476e-01,   2.90716556e+00,\n          2.97005140e-01],\n       [ -1.68651124e+00,  -1.59341549e+00,   1.25317595e-02,\n          1.88986410e+00]])\n</code></pre>\n<p>可以用 Numpy 验证一下结果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>array_equal<span class=\"token punctuation\">(</span>new_mat<span class=\"token punctuation\">,</span> mat_imp_and_scaled<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>True\n</code></pre>\n<p>完全正确！本书后面的主题中，我们会进一步展示管线命令的威力。不仅可以用于预处理步骤中，在降维、算法拟合中也可以很方便的使用。</p>\n<h2 id=\"how-it-works-8\"><a class=\"anchor\" href=\"#how-it-works-8\">#</a> How it works...</h2>\n<p>前面曾经提到过，每个 scikit-learn 的算法接口都类似。 <code>pipeline</code>  最重要的函数也不外乎下面三个：</p>\n<ul>\n<li><code>fit</code></li>\n<li><code>transform</code></li>\n<li><code>fit_transform</code></li>\n</ul>\n<p>具体来说，如果管线命令有 <code>N</code>  个对象，前 <code>N-1</code>  个对象必须实现 <code>fit</code>  和 <code>transform</code> ，第 <code>N</code>  个对象至少实现 <code>fit</code> 。否则就会出现错误。</p>\n<p>如果这些条件满足，管线命令就会运行，但是不一定每个方法都可以。例如， <code>pipe</code>  有个 <code>inverse_transform</code>  方法就是这样。因为由于计算步骤没有 <code>inverse_transform</code>  方法，一运行就有错误：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>new_mat<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------\n\nAttributeError                            Traceback (most recent call last)\n\n&lt;ipython-input-12-62edd2667cae&gt; in &lt;module&gt;()\n----&gt; 1 pipe.inverse_transform(new_mat)\n\n\nd:\\programfiles\\Miniconda3\\lib\\site-packages\\sklearn\\utils\\metaestimators.py in &lt;lambda&gt;(*args, **kwargs)\n     35             self.get_attribute(obj)\n     36         # lambda, but not partial, allows help() to work with update_wrapper\n---&gt; 37         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)\n     38         # update the docstring of the returned function\n     39         update_wrapper(out, self.fn)\n\n\nd:\\programfiles\\Miniconda3\\lib\\site-packages\\sklearn\\pipeline.py in inverse_transform(self, X)\n    265         Xt = X\n    266         for name, step in self.steps[::-1]:\n--&gt; 267             Xt = step.inverse_transform(Xt)\n    268         return Xt\n    269 \n\n\nAttributeError: 'Imputer' object has no attribute 'inverse_transform'\n</code></pre>\n<p>但是， <code>scalar</code>  对象可以正常运行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scaler<span class=\"token punctuation\">.</span>inverse_transform<span class=\"token punctuation\">(</span>new_mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.05419595,  1.42287309,  0.02368264, -0.8505244 ],\n       [ 1.42287309,  5.09704588,  0.09560571, -2.46408728],\n       [ 0.02368264,  0.03614203,  0.63317494,  0.09792298],\n       [-0.8505244 , -2.46408728,  0.09792298,  2.04110849]])\n</code></pre>\n<p>只要把管线命令设置好，它就会如愿运行。它就是一组 <code>for</code>  循环，对每个步骤执行 <code>fit</code>  和 <code>transform</code> ，然后把结果传递到下一个变换操作中。</p>\n<p>使用管线命令的理由主要有两点：</p>\n<ul>\n<li>首先是方便。代码会简洁一些，不需要重复调用 <code>fit</code>  和 <code>transform</code> 。</li>\n<li>其次，也是更重要的作用，就是使用交叉验证。模型可以变得很复杂。如果管线命令中的一个步骤调整了参数，那么它们必然需要重新测试；测试一个步骤参数的代码管理成本是很低的。但是，如果测试 5 个步骤的全部参数会变都很复杂。管线命令可以缓解这些负担。</li>\n</ul>\n<h1 id=\"用主成分分析降维\"><a class=\"anchor\" href=\"#用主成分分析降维\">#</a> 用主成分分析降维</h1>\n<p>现在是时候升一级了！主成分分析（Principal component analysis，PCA）是本书介绍的第一个高级技术。到目前为止都是些简单的统计学知识，而 PCA 将统计学和线性代数组合起来实现降维，堪称简单模型的杀手锏。</p>\n<h2 id=\"getting-ready-9\"><a class=\"anchor\" href=\"#getting-ready-9\">#</a> Getting ready</h2>\n<p>PCA 是 scikit-learn 的一个分解模块。还有一些分解模块后面会介绍。让我们用 <code>iris</code>  数据集演示一下，你也可以用自己的数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_X <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr></table></figure><h2 id=\"how-to-do-it-9\"><a class=\"anchor\" href=\"#how-to-do-it-9\">#</a> How to do it...</h2>\n<p>首先导入分解模块：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> decomposition</pre></td></tr></table></figure><p>然后，初始化一个 PCA 对象：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca <span class=\"token operator\">=</span> decomposition<span class=\"token punctuation\">.</span>PCA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pca</pre></td></tr></table></figure><pre><code>PCA(copy=True, n_components=None, whiten=False)\n</code></pre>\n<p>和 scikit-learn 其他对象相比，PCA 的参数很少。这样 PCA 对象就创建了，下面用 <code>fit_transform</code>  处理 <code>iris_X</code>  数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_pca <span class=\"token operator\">=</span> pca<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_pca<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ -2.68420713e+00,  -3.26607315e-01,   2.15118370e-02,\n          1.00615724e-03],\n       [ -2.71539062e+00,   1.69556848e-01,   2.03521425e-01,\n          9.96024240e-02],\n       [ -2.88981954e+00,   1.37345610e-01,  -2.47092410e-02,\n          1.93045428e-02],\n       [ -2.74643720e+00,   3.11124316e-01,  -3.76719753e-02,\n         -7.59552741e-02],\n       [ -2.72859298e+00,  -3.33924564e-01,  -9.62296998e-02,\n         -6.31287327e-02]])\n</code></pre>\n<p>这样 PCA 就完成了，我们可以看看降维的效果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca<span class=\"token punctuation\">.</span>explained_variance_ratio_</pre></td></tr></table></figure><pre><code>array([ 0.92461621,  0.05301557,  0.01718514,  0.00518309])\n</code></pre>\n<h2 id=\"how-it-works-9\"><a class=\"anchor\" href=\"#how-it-works-9\">#</a> How it works...</h2>\n<p>PCA 是在数据分析中有一般性的数学定义和具体的应用场景。PCA 用正交向量集表示原始数据集。</p>\n<p>通常，PCA 将原始数据集映射到新的空间中，里面每个列向量都是彼此正交的。从数据分析的视角看，PCA 将数据集的协方差矩阵变换成若干能够 “解释” 一定比例变量的列向量。例如，在 <code>iris</code>  数据集中，92.5% 的变量可以由第一个主成份表示。</p>\n<p>数据分析里面维度多会导致维度灾难，因此降维至关重要。通常算法处理高维训练集时会出现拟合过度（overfit）的情况，于是难以把握测试集的一般性特征。如果数据集的真实结构可以用更少的维度表示，那么通常都值得一试。</p>\n<p>为了演示这点，我们用 PCA 将 <code>iris</code>  数据集转换成二维数据。 <code>iris</code>  数据集用全部的维度通常可以很好的分类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca <span class=\"token operator\">=</span> decomposition<span class=\"token punctuation\">.</span>PCA<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X_prime <span class=\"token operator\">=</span> pca<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>(150, 2)\n</code></pre>\n<p>我们的矩阵现在是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>150</mn><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">150 \\times 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>，不是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>150</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">150 \\times 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> 了。二维变量更容易可视化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> iris_X_prime<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"PCA 2 Components\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.text.Text at 0x84571d0&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-9-1.png\" alt=\"png\" /></p>\n<p>把数据集降成二维之后还是分离特征依然保留。我们可以查看这二维数据保留了多少变量信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca<span class=\"token punctuation\">.</span>explained_variance_ratio_<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>0.97763177502480336\n</code></pre>\n<h2 id=\"theres-more-7\"><a class=\"anchor\" href=\"#theres-more-7\">#</a> There's more...</h2>\n<p>PCA 对象还可以一开始设置解释变量的比例。例如，如果我们想介绍 98% 的变量，PCA 对象就可以这样创建：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca <span class=\"token operator\">=</span> decomposition<span class=\"token punctuation\">.</span>PCA<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">.98</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_X_prime <span class=\"token operator\">=</span> pca<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pca<span class=\"token punctuation\">.</span>explained_variance_ratio_<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>0.99481691454981014\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_X_prime<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>(150, 3)\n</code></pre>\n<p>由于我们想比二维主成份解释更多的变量，第三维就需要了。</p>\n<h1 id=\"用因子分析降维\"><a class=\"anchor\" href=\"#用因子分析降维\">#</a> 用因子分析降维</h1>\n<p>因子分析（factor analysis）是另一种降维方法。与 PCA 不同的是，因子分析有假设而 PCA 没有假设。因子分析的基本假设是有一些隐藏特征与数据集的特征相关。</p>\n<p>这个主题将浓缩（boil down）样本数据集的显性特征，尝试像理解因变量一样地理解自变量之间的隐藏特征。</p>\n<h2 id=\"getting-ready-10\"><a class=\"anchor\" href=\"#getting-ready-10\">#</a> Getting ready</h2>\n<p>让我们再用 <code>iris</code>  数据集来比较 PCA 与因子分析，首先加载因子分析类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> FactorAnalysis</pre></td></tr></table></figure><h2 id=\"how-to-do-it-10\"><a class=\"anchor\" href=\"#how-to-do-it-10\">#</a> How to do it...</h2>\n<p>从编程角度看，两种方法没啥区别：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fa <span class=\"token operator\">=</span> FactorAnalysis<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_two_dim <span class=\"token operator\">=</span> fa<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_two_dim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[-1.33125848,  0.55846779],\n       [-1.33914102, -0.00509715],\n       [-1.40258715, -0.307983  ],\n       [-1.29839497, -0.71854288],\n       [-1.33587575,  0.36533259]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>iris_two_dim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> iris_two_dim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Factor Analysis 2 Components\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.text.Text at 0x8875ba8&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-10-1.png\" alt=\"png\" /></p>\n<p>由于因子分析是一种概率性的转换方法，我们可以通过不同的角度来观察，例如模型观测值的对数似然估计值，通过模型比较对数似然估计值会更好。</p>\n<p>因子分析也有不足之处。由于你不是通过拟合模型直接预测结果，拟合模型只是一个中间步骤。这本身并非坏事，但是训练实际模型时误差就会产生。</p>\n<h2 id=\"how-it-works-10\"><a class=\"anchor\" href=\"#how-it-works-10\">#</a> How it works...</h2>\n<p>因子分析与前面介绍的 PCA 类似。但两者有一个不同之处。PCA 是通过对数据进行线性变换获取一个能够解释数据变量的主成分向量空间，这个空间中的每个主成分向量都是正交的。你可以把 PCA 看成是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 维数据集降维成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> 维，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>&lt;</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\lt N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>。</p>\n<p>而因子分析的基本假设是，有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> 个重要特征和它们的线性组合（加噪声），能够构成原始的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 维数据集。也就是说，你不需要指定结果变量（就是最终生成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 维），而是要指定数据模型的因子数量（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> 个因子）。</p>\n<h1 id=\"用核pca实现非线性降维\"><a class=\"anchor\" href=\"#用核pca实现非线性降维\">#</a> 用核 PCA 实现非线性降维</h1>\n<p>由于大多数统计方法最开始都是线性的，所以，想解决非线性问题，就需要做一些调整。PCA 也是一种线性变换。本主题将首先介绍它的非线性形式，然后介绍如何降维。</p>\n<h2 id=\"getting-ready-11\"><a class=\"anchor\" href=\"#getting-ready-11\">#</a> Getting ready</h2>\n<p>如果数据都是线性的，生活得多容易啊，可惜现实并非如此。核主成分分析（Kernel PCA）可以处理非线性问题。数据先通过核函数（kernel function）转换成一个新空间，然后再用 PCA 处理。</p>\n<p>要理解核函数之前，建议先尝试如何生成一个能够通过核 PCA 里的核函数线性分割的数据集。下面我们用余弦核（cosine kernel）演示。这个主题比前面的主题多一些理论。</p>\n<h2 id=\"how-to-do-it-11\"><a class=\"anchor\" href=\"#how-to-do-it-11\">#</a> How to do it...</h2>\n<p>余弦核可以用来比例样本空间中两个样本向量的夹角。当向量的大小（magnitude）用传统的距离度量不合适的时候，余弦核就有用了。</p>\n<p>向量夹角的余弦公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>A</mi><mo>⋅</mo><mi>B</mi></mrow><mrow><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>A</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow><mrow><mo fence=\"true\">∥</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi>B</mi></mstyle></mtd></mtr></mtable><mo fence=\"true\">∥</mo></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">cos(\\theta)=\\frac {A \\cdot B} \n{ {\\begin{Vmatrix}\nA\n\\end{Vmatrix}}\n{\\begin{Vmatrix}\nB\n\\end{Vmatrix}}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4683200000000003em;vertical-align:-1.10799em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.24202em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8500000000000001em;\"><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000000000000003em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8679800000000001em;\"><span style=\"top:-2.2559899999999997em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.26698em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span><span style=\"top:-2.86798em;\"><span class=\"pstrut\" style=\"height:2.606em;\"></span><span class=\"delimsizinginner delim-size1\"><span>∥</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35000999999999993em;\"><span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10799em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>向量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> 夹角的余弦是两向量点积除以两个向量各自的 L2 范数。向量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> 的大小不会影响余弦值。</p>\n<p>让我们生成一些数据来演示一下用法。首先，我们假设有两个不同的过程数据（process），称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A1_mean <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A1_cov <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>multivariate_normal<span class=\"token punctuation\">(</span>A1_mean<span class=\"token punctuation\">,</span> A1_cov<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A2_mean <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>A2_cov <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>multivariate_normal<span class=\"token punctuation\">(</span>A2_mean<span class=\"token punctuation\">,</span> A2_cov<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">,</span> A2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>B_mean <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>B_cov <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">.9</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>B <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>multivariate_normal<span class=\"token punctuation\">(</span>B_mean<span class=\"token punctuation\">,</span> B_cov<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"$A$ and $B$ processes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x73cd128&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-11-1.png\" alt=\"png\" /></p>\n<p>上图看起来明显是两个不同的过程数据，但是用一超平面分割它们很难。因此，我们用前面介绍带余弦核的核 PCA 来处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> KernelPCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kpca <span class=\"token operator\">=</span> KernelPCA<span class=\"token punctuation\">(</span>kernel<span class=\"token operator\">=</span><span class=\"token string\">'cosine'</span><span class=\"token punctuation\">,</span> n_components<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AB <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>AB_transformed <span class=\"token operator\">=</span> kpca<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>AB<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>A_color <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>B_color <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>A_color<span class=\"token punctuation\">,</span> B_color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cosine KPCA 1 Dimension\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>AB_transformed<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>AB_transformed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-11-2.png\" alt=\"png\" /></p>\n<p>用带余弦核的核 PCA 处理后，数据集变成了一维。如果用 PCA 处理就是这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> PCA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pca <span class=\"token operator\">=</span> PCA<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>AB_transformed_Reg <span class=\"token operator\">=</span> pca<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>AB<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"PCA 1 Dimension\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>AB_transformed_Reg<span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>AB_transformed_Reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.collections.PathCollection at 0x7c764a8&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-11-3.png\" alt=\"png\" /></p>\n<p>很明显，核 PCA 降维效果更好。</p>\n<h2 id=\"how-it-works-11\"><a class=\"anchor\" href=\"#how-it-works-11\">#</a> How it works...</h2>\n<p>scikit-learn 提供了几种像余弦核那样的核函数，也可以写自己的核函数。默认的函数有：</p>\n<ul>\n<li>线性函数（linear）（默认值）</li>\n<li>多项式函数（poly）</li>\n<li>径向基函数（rbf，radial basis function）</li>\n<li>S 形函数（sigmoid）</li>\n<li>余弦函数（cosine）</li>\n<li>用户自定义函数（precomputed）</li>\n</ul>\n<p>还有一些因素会影响核函数的选择。例如， <code>degree</code>  参数可以设置 <code>poly</code> ， <code>rbf</code>  和 <code>sigmoid </code> 核函数的角度；而 <code>gamma</code>  会影响 <code>rbf</code>  和 <code>poly</code>  核，更多详情请查看<a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html\"> <code>KernelPCA</code>  文档</a>。</p>\n<p>后面关于支持向量机（SVM）的主题中将会进一步介绍 <code>rbf</code>  核函数。</p>\n<p>需要注意的是：核函数处理非线性分离效果很好，但是一不小心就可能导致拟合过度。</p>\n<h1 id=\"用截断奇异值分解降维\"><a class=\"anchor\" href=\"#用截断奇异值分解降维\">#</a> 用截断奇异值分解降维</h1>\n<p>截断奇异值分解（Truncated singular value decomposition，TSVD）是一种矩阵因式分解（factorization）技术，将矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> 分解成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>。它与 PCA 很像，只是 SVD 分解是在数据矩阵上进行，而 PCA 是在数据的协方差矩阵上进行。通常，SVD 用于发现矩阵的主成份。</p>\n<h2 id=\"getting-ready-12\"><a class=\"anchor\" href=\"#getting-ready-12\">#</a> Getting ready</h2>\n<p>TSVD 与一般 SVD 不同的是它可以产生一个指定维度的分解矩阵。例如，有一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 矩阵，通过 SVD 分解后仍然是一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 矩阵，而 TSVD 可以生成指定维度的矩阵。这样就可以实现降维了。</p>\n<p>这里我们还用 <code>iris</code>  数据集来演示 TSVD：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_data <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr></table></figure><h2 id=\"how-to-do-it-12\"><a class=\"anchor\" href=\"#how-to-do-it-12\">#</a> How to do it...</h2>\n<p>TSVD 对象的用法和其他对象类似。首先导入需要的类，初始化，然后拟合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> TruncatedSVD</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>svd <span class=\"token operator\">=</span> TruncatedSVD<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_transformed <span class=\"token operator\">=</span> svd<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.1,  3.5,  1.4,  0.2],\n       [ 4.9,  3. ,  1.4,  0.2],\n       [ 4.7,  3.2,  1.3,  0.2],\n       [ 4.6,  3.1,  1.5,  0.2],\n       [ 5. ,  3.6,  1.4,  0.2]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.91220352, -2.30344211],\n       [ 5.57207573, -1.97383104],\n       [ 5.4464847 , -2.09653267],\n       [ 5.43601924, -1.87168085],\n       [ 5.87506555, -2.32934799]])\n</code></pre>\n<p>最终结果如下图所示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>iris_transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> iris_transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Truncated SVD, 2 Components\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>&lt;matplotlib.text.Text at 0x8600be0&gt;\n</code></pre>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-12-1.png\" alt=\"png\" /></p>\n<h2 id=\"how-it-works-12\"><a class=\"anchor\" href=\"#how-it-works-12\">#</a> How it works...</h2>\n<p>现在我们演示了 scikit-learn 的 <code>TruncatedSVD</code>  模块，让我们看看只用 <code>scipy</code>  学习一些细节。</p>\n<p>首先，我们用 <code>scipy</code>  的 <code>linalg</code>  处理 SVD：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>linalg <span class=\"token keyword\">import</span> svd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>D <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>D</pre></td></tr></table></figure><pre><code>array([[1, 2],\n       [1, 3],\n       [1, 4]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>U<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">,</span> V <span class=\"token operator\">=</span> svd<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">,</span> full_matrices<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>U<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><pre><code>((3, 2), (2,), (2, 2))\n</code></pre>\n<p>我们可以根据 SVD 的定义，用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> 还原矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([[ 5.64015854,  0.        ],\n       [ 0.        ,  0.43429448]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([[ 1.,  2.],\n       [ 1.,  3.],\n       [ 1.,  4.]])\n</code></pre>\n<p><code>TruncatedSVD</code>  返回的矩阵是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> 的点积。如果我们想模拟 TSVD，我们就去掉最新奇异值和对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> 的列向量。例如，我们想要一个主成份，可以这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_S <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_U <span class=\"token operator\">=</span> U<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_U<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>new_S<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>array([-2.20719466, -3.16170819, -4.11622173])\n</code></pre>\n<p>一般情况下，如果我们想要截断维度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>，那么我们就去掉<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">N-t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 个奇异值。</p>\n<h2 id=\"theres-more-8\"><a class=\"anchor\" href=\"#theres-more-8\">#</a> There's more...</h2>\n<p><code>TruncatedSVD</code>  还有一些细节需要注意。</p>\n<h3 id=\"符号翻转sign-flipping\"><a class=\"anchor\" href=\"#符号翻转sign-flipping\">#</a> 符号翻转（Sign flipping）</h3>\n<p><code>TruncatedSVD</code>  有个 “陷阱”。随着随机数生成器状态的变化， <code>TruncatedSVD</code>  连续地拟合会改变输出的符合。为了避免这个问题，建议只用 <code>TruncatedSVD</code>  拟合一次，然后用其他变换。这正是管线命令的另一个用处。</p>\n<p>要避免这种情况，可以这样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tsvd <span class=\"token operator\">=</span> TruncatedSVD<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tsvd<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>tsvd<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 5.91220352, -2.30344211],\n       [ 5.57207573, -1.97383104],\n       [ 5.4464847 , -2.09653267],\n       [ 5.43601924, -1.87168085],\n       [ 5.87506555, -2.32934799]])\n</code></pre>\n<h3 id=\"稀疏矩阵-2\"><a class=\"anchor\" href=\"#稀疏矩阵-2\">#</a> 稀疏矩阵</h3>\n<p><code>TruncatedSVD</code>  相比 PDA 的一个优势是 <code>TruncatedSVD</code>  可以操作 PDA 处理不了的矩阵。这是因为 PCA 必须计算协方差矩阵，需要在整个矩阵上操作，如果矩阵太大，计算资源可能会不够用。</p>\n<h1 id=\"用字典学习分解法分类\"><a class=\"anchor\" href=\"#用字典学习分解法分类\">#</a> 用字典学习分解法分类</h1>\n<p>在这个主题中，我们将介绍一种可以用于分类的分解方法 —— 字典学习（Dictionary Learning），将数据集转换成一个稀疏的形式。</p>\n<h2 id=\"getting-ready-13\"><a class=\"anchor\" href=\"#getting-ready-13\">#</a> Getting ready</h2>\n<p><code>DictionaryLearning</code>  方法的思想是把特征看作构成数据集的基础。首先我们导入 <code>iris</code>  数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris <span class=\"token operator\">=</span> load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_data <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris_target <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>target</pre></td></tr></table></figure><h2 id=\"how-to-do-it-13\"><a class=\"anchor\" href=\"#how-to-do-it-13\">#</a> How to do it...</h2>\n<p>首先，导入 <code>DictionaryLearning</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>decomposition <span class=\"token keyword\">import</span> DictionaryLearning</pre></td></tr></table></figure><p>然后用三个成分表示 <code>iris</code>  数据集中花的类型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dl <span class=\"token operator\">=</span> DictionaryLearning<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再用 <code>fit_transform</code>  转换其他数据，这样我们就可以对比训练前后的数据了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transformed <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 0.        ,  6.34476574,  0.        ],\n       [ 0.        ,  5.83576461,  0.        ],\n       [ 0.        ,  6.32038375,  0.        ],\n       [ 0.        ,  5.89318572,  0.        ],\n       [ 0.        ,  5.45222715,  0.        ]])\n</code></pre>\n<p>我们可以可视化这个结果。注意，每个成分的值分别平行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> 三个轴，其他坐标都是 0；这就是稀疏性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> mpl_toolkits<span class=\"token punctuation\">.</span>mplot3d <span class=\"token keyword\">import</span> Axes3D</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rgb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> projection<span class=\"token operator\">=</span><span class=\"token string\">'3d'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Training Set\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-13-1.png\" alt=\"png\" /></p>\n<p>如果你细心看，还是会发现一些误差。有一个样本分错了类型，虽然一个错误并不是很严重。</p>\n<p>下面，让我们用 <code>fit</code>  而不用 <code>fit_transform</code>  来训练数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transformed <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rgb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ax <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>add_subplot<span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> projection<span class=\"token operator\">=</span><span class=\"token string\">'3d'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Training Set\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>iris<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-13-2.png\" alt=\"png\" /></p>\n<p>还是有一些分类错误的样本。如果你看看之前降维主题中的图，会发现绿色和蓝色两类数据有交叉部分。</p>\n<h2 id=\"how-it-works-13\"><a class=\"anchor\" href=\"#how-it-works-13\">#</a> How it works...</h2>\n<p><code>DictionaryLearning</code>  具有信号处理和神经学领域的背景知识。其理念是某一时刻只有少数特征可以实现。因此， <code>DictionaryLearning</code>  在假设大多数特征都是 0 的情况下，尝试发现一个适当的数据表现形式。</p>\n<h1 id=\"用管线命令连接多个转换方法\"><a class=\"anchor\" href=\"#用管线命令连接多个转换方法\">#</a> 用管线命令连接多个转换方法</h1>\n<p>下面，让我们用管线命令连接多个转换方法，来演示一个复杂点儿的例子。</p>\n<h2 id=\"getting-ready-14\"><a class=\"anchor\" href=\"#getting-ready-14\">#</a> Getting ready</h2>\n<p>本主题将再度释放管线命令的光芒。之前我们用它处理缺失数据，只是牛刀小试罢了。下面我们用管线命令把多个预处理步骤连接起来处理，会非常方便。</p>\n<p>首先，我们加载带缺失值的 <code>iris</code>  数据集：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_iris</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris <span class=\"token operator\">=</span> load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>iris_data <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>binomial<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">,</span> iris_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>iris_data<span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>nan</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>iris_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ nan,  3.5,  1.4,  0.2],\n       [ 4.9,  3. ,  1.4,  0.2],\n       [ 4.7,  3.2,  1.3,  0.2],\n       [ 4.6,  nan,  1.5,  nan],\n       [ 5. ,  3.6,  1.4,  0.2]])\n</code></pre>\n<h2 id=\"how-to-do-it-14\"><a class=\"anchor\" href=\"#how-to-do-it-14\">#</a> How to do it...</h2>\n<p>本主题的目标是首先补全 <code>iris_data</code>  的缺失值，然后对补全的数据集用 PCA。可以看出这个流程需要一个训练数据集和一个对照集（holdout set）；管线命令会让事情更简单，不过之前我们做一些准备工作。</p>\n<p>首先加载需要的模块：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> pipeline<span class=\"token punctuation\">,</span> preprocessing<span class=\"token punctuation\">,</span> decomposition</pre></td></tr></table></figure><p>然后，建立 <code>Imputer</code>  和 <code>PCA</code>  类：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pca <span class=\"token operator\">=</span> decomposition<span class=\"token punctuation\">.</span>PCA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>imputer <span class=\"token operator\">=</span> preprocessing<span class=\"token punctuation\">.</span>Imputer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有了两个类之后，我们就可以用管线命令处理：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">.</span>Pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imputer'</span><span class=\"token punctuation\">,</span> imputer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'pca'</span><span class=\"token punctuation\">,</span> pca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>np<span class=\"token punctuation\">.</span>set_printoptions<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>iris_data_transformed <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>iris_data_transformed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[-2.44, -0.79, -0.12, -0.1 ],\n       [-2.67,  0.2 , -0.21,  0.15],\n       [-2.83,  0.31, -0.19, -0.08],\n       [-2.35,  0.66,  0.67, -0.06],\n       [-2.68, -0.06, -0.2 , -0.4 ]])\n</code></pre>\n<p>如果我们用单独的步骤分别处理，每个步骤都要用一次 <code>fit_transform</code> ，而这里只需要用一次，而且只需要一个对象。</p>\n<h2 id=\"how-it-works-14\"><a class=\"anchor\" href=\"#how-it-works-14\">#</a> How it works...</h2>\n<p>管线命令的每个步骤都是用一个元组表示，元组的第一个元素是对象的名称，第二个元素是对象。</p>\n<p>本质上，这些步骤都是在管线命令调用时依次执行 <code>fit_transform</code>  方法。还有一种快速但不太简洁的管线命令建立方法，就像我们快速建立标准化调整模型一样，只不过用 <code>StandardScaler</code>  会获得更多功能。 <code>pipeline</code>  函数将自动创建管线命令的名称：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe2 <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">.</span>make_pipeline<span class=\"token punctuation\">(</span>imputer<span class=\"token punctuation\">,</span> pca<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pipe2<span class=\"token punctuation\">.</span>steps</pre></td></tr></table></figure><pre><code>[('imputer',\n  Imputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)),\n ('pca', PCA(copy=True, n_components=None, whiten=False))]\n</code></pre>\n<p>这和前面的模型结果一样：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_data_transformed2 <span class=\"token operator\">=</span> pipe2<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_data_transformed2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[-2.44, -0.79, -0.12, -0.1 ],\n       [-2.67,  0.2 , -0.21,  0.15],\n       [-2.83,  0.31, -0.19, -0.08],\n       [-2.35,  0.66,  0.67, -0.06],\n       [-2.68, -0.06, -0.2 , -0.4 ]])\n</code></pre>\n<h2 id=\"theres-more-9\"><a class=\"anchor\" href=\"#theres-more-9\">#</a> There's more...</h2>\n<p>管线命令连接内部每个对象的属性是通过 <code>set_params</code>  方法实现，其参数用 <code>&lt;对象名称&gt;__&lt;对象参数&gt;</code>  表示。例如，我们设置 PCA 的主成份数量为 2：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe2<span class=\"token punctuation\">.</span>set_params<span class=\"token punctuation\">(</span>pca__n_components<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>Pipeline(steps=[('imputer', Imputer(axis=0, copy=True, missing_values='NaN', strategy='mean', verbose=0)), ('pca', PCA(copy=True, n_components=2, whiten=False))])\n</code></pre>\n<blockquote>\n<p><code>__</code> 标识在 Python 社区读作<strong> dunder</strong>。</p>\n</blockquote>\n<p>这里 <code>n_components=2</code>  是 <code>pca</code>  本身的参数。我们再演示一下，输出将是一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>×</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">N \\times 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> 维矩阵：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iris_data_transformed3 <span class=\"token operator\">=</span> pipe2<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>iris_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>iris_data_transformed3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[-2.44, -0.79],\n       [-2.67,  0.2 ],\n       [-2.83,  0.31],\n       [-2.35,  0.66],\n       [-2.68, -0.06]])\n</code></pre>\n<h1 id=\"用正态随机过程处理回归\"><a class=\"anchor\" href=\"#用正态随机过程处理回归\">#</a> 用正态随机过程处理回归</h1>\n<p>这个主题将介绍如何用正态随机过程（Gaussian process，GP）处理回归问题。在线性模型部分，我们曾经见过在变量间可能存在相关性时，如何用贝叶斯岭回归 (Bayesian Ridge Regression) 表示先验概率分布（prior）信息。</p>\n<p>正态分布过程关心的是方程而不是均值。但是，如果我们假设一个正态分布的均值为 0，那么我们需要确定协方差。</p>\n<p>这样处理就与线性回归问题中先验概率分布可以用相关系数表示的情况类似。用 GP 处理的先验就可以用数据、样本数据间协方差构成函数表示，因此必须从数据中拟合得出。具体内容参考<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nYXVzc2lhbnByb2Nlc3Mub3JnLw==\"> The Gaussian Processes Web Site</span>。</p>\n<h2 id=\"getting-ready-15\"><a class=\"anchor\" href=\"#getting-ready-15\">#</a> Getting ready</h2>\n<p>首先要我们用一些数据来演示用 scikit-learn 处理 GP：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> load_boston</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>boston <span class=\"token operator\">=</span> load_boston<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>boston_X <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>boston_y <span class=\"token operator\">=</span> boston<span class=\"token punctuation\">.</span>target</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>train_set <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>boston_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"how-to-do-it-15\"><a class=\"anchor\" href=\"#how-to-do-it-15\">#</a> How to do it...</h2>\n<p>有了数据之后，我们就创建 scikit-learn 的 <code>GaussianProcess</code>  对象。默认情况下，它使用一个常系数回归方程（constant regression function）和平方指数相关函数（ squared exponential correlation），是最主流的选择之一：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>gaussian_process <span class=\"token keyword\">import</span> GaussianProcess</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gp <span class=\"token operator\">=</span> GaussianProcess<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>gp<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>boston_X<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> boston_y<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>GaussianProcess(beta0=None,\n        corr=&lt;function squared_exponential at 0x0000000006F1C950&gt;,\n        normalize=True, nugget=array(2.220446049250313e-15),\n        optimizer='fmin_cobyla', random_start=1,\n        random_state=&lt;mtrand.RandomState object at 0x00000000052A4BA8&gt;,\n        regr=&lt;function constant at 0x0000000006F15950&gt;,\n        storage_mode='full', theta0=array([[ 0.1]]), thetaL=None,\n        thetaU=None, verbose=False)\n</code></pre>\n<p>其中，</p>\n<ul>\n<li><code>beta0</code> ：回归权重。默认是用 MLE（最大似然估计，Maximum Likelihood Estimation）方法进行估计。</li>\n<li><code>corr</code> ：相关系数方程。提供了若干种方程，后面会介绍。</li>\n<li><code>normalize</code> ：默认是 <code>True</code> ，中性化调整样本值，方便应用 MLE 进行估计。</li>\n<li><code>nugget</code> ：正则化参数，是可选的，默认是一个很小的值。你可以将这个参数用于每个样本值（参数是一个数值），也可以对样本值使用不同的参数（参数是一个数组，与样本值个数相等）。</li>\n<li><code>regr</code> ：默认是常系数回归方程。</li>\n</ul>\n<p>现在让我们拟合对象看看测试效果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>test_preds <span class=\"token operator\">=</span> gp<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>boston_X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们把预测值和实际值画出来比较一下。因为我们做了回归，还可以看看残差散点图和残差直方图。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nrows<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>test_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> test_preds<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Predicted Values'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>test_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Actual Values'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predicted vs Actuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>test_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>test_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Plotted Residuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>test_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>ax<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of Residuals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-15-1.png\" alt=\"png\" /></p>\n<h2 id=\"how-it-works-15\"><a class=\"anchor\" href=\"#how-it-works-15\">#</a> How it works...</h2>\n<p>上面我们快速演示了一下，现在让我们看看这些参数，看看如何优化它们。首先，我们看看 <code>corr</code>  函数的类型。这个函数描述了不同组 <code>X</code>  之间的相关性。scikit-learn 提供了 5 种函数类型：</p>\n<ul>\n<li>绝对值指数函数（absolute_exponential）</li>\n<li>平方指数函数（squared_exponential）</li>\n<li>广义指数函数（generalized_exponential）</li>\n<li>立方项函数（cubic）</li>\n<li>线性函数（linear）</li>\n</ul>\n<p>例如，平方指数函数公式如下：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>K</mi><mo>=</mo><mi>exp</mi><mo>⁡</mo><mrow><mo>−</mo><mfrac><mrow><mi mathvariant=\"normal\">∣</mi><mi>d</mi><msup><mi mathvariant=\"normal\">∣</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>l</mi><mn>2</mn></msup></mrow></mfrac></mrow></mrow><annotation encoding=\"application/x-tex\">K= \\exp {-\\frac {|d|^2}{2l^2}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mop\">exp</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></span></p>\n<p>另外，线性函数就是两个点的点积：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>K</mi><mo>=</mo><msup><mi>x</mi><mi>T</mi></msup><msup><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">K=x^T{x&#x27;}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8913309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>另一个参数是 <code>theta0</code> ，表示参数估计的起始点。</p>\n<p>一旦我们有了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> 和均值的估计值，过程就完全确定了，因为它是一个 GP；之所以用正态分布，是因为在机器学习中它一直很受欢迎。</p>\n<p>下面我们换个 <code>regr</code>  函数类型和 <code>theta0</code>  参数，看看结果会如何变化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gp <span class=\"token operator\">=</span> GaussianProcess<span class=\"token punctuation\">(</span>regr<span class=\"token operator\">=</span><span class=\"token string\">'linear'</span><span class=\"token punctuation\">,</span> theta0<span class=\"token operator\">=</span><span class=\"token number\">5e-1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gp<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>boston_X<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> boston_y<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>linear_preds <span class=\"token operator\">=</span> gp<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>boston_X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>test_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'Residuals Original'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>linear_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'Residuals Linear'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Residuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-15-2.png\" alt=\"png\" /></p>\n<p>很明显，第二个模型的预测效果大部分区间要更好。如果我们把残差汇总起来，我们可以看看 MSE 预测的结果：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>test_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>17.456331927446904\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>linear_preds <span class=\"token operator\">-</span> boston_y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>9.320038747573518\n</code></pre>\n<h2 id=\"theres-more-10\"><a class=\"anchor\" href=\"#theres-more-10\">#</a> There's more...</h2>\n<p>我们可能还想掌握估计的不确定性。在我们预测的时候，如果我们 <code>eval_MSE</code>  设置为 <code>True</code> ，我们就获得 MSE 的值，这时预测返回的是预测值与 MSE 估计值的元组。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>test_preds<span class=\"token punctuation\">,</span> MSE <span class=\"token operator\">=</span> gp<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>boston_X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eval_MSE<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MSE<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([ 5.14026315,  5.30852052,  0.91152632,  2.87148688,  2.55714482])\n</code></pre>\n<p>这样我们就可以计算估计的误差了。让我们画出来看看准确率：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">120</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rng <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> test_preds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>errorbar<span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">,</span> test_preds<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> yerr<span class=\"token operator\">=</span><span class=\"token number\">1.96</span><span class=\"token operator\">*</span>MSE<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predictions with Error Bars\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-15-3.png\" alt=\"png\" /></p>\n<p>你会看到，许多点的估计都有些变化。但是，前面的数据显示，总体误差不是特别大。</p>\n<h1 id=\"直接定义一个正态随机过程对象\"><a class=\"anchor\" href=\"#直接定义一个正态随机过程对象\">#</a> 直接定义一个正态随机过程对象</h1>\n<p>前面我们只触及了正态随机过程的表面。在本主题中，我们将介绍直接创建一个具有指定相关函数的正态随机过程。</p>\n<h2 id=\"getting-ready-16\"><a class=\"anchor\" href=\"#getting-ready-16\">#</a> Getting ready</h2>\n<p><code>gaussian_process</code>  模块可以直接连接不同的相关函数与回归方程。这样就可以不创建 <code>GaussianProcess</code>  对象，直接通过函数创建需要的对象。如果你更熟悉面向对象的编程方法，这里只算是模块级的一个类方法而已。</p>\n<p>在本主题中，我们将使用大部分函数，并把他们的结果用几个例子显示出来。如果你想真正掌握这些相关函数的特点，不要仅仅停留在这些例子上。这里不再介绍新的数学理论，让我们直接演示如何做。</p>\n<h2 id=\"how-to-do-it-16\"><a class=\"anchor\" href=\"#how-to-do-it-16\">#</a> How to do it...</h2>\n<p>首先，我们导入要回归的数据：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>gaussian_process <span class=\"token keyword\">import</span> regression_models</pre></td></tr></table></figure><p>第一个相关函数是常系数相关函数。它有若干常数构成：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>regression_models<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.],\n       [ 1.],\n       [ 1.],\n       [ 1.],\n       [ 1.]])\n</code></pre>\n<p>还有线性相关函数与平方指数相关函数，它们也是 <code>GaussianProcess</code>  类的默认值：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>regression_models<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.        , -1.29786999]])\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>regression_models<span class=\"token punctuation\">.</span>quadratic<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><pre><code>array([[ 1.        , -1.29786999,  1.68446652]])\n</code></pre>\n<h2 id=\"how-it-works-16\"><a class=\"anchor\" href=\"#how-it-works-16\">#</a> How it works...</h2>\n<p>这样我们就可以得到回归函数了，可以直接用 <code>GaussianProcess</code>  对象来处理它们。默认值是常系数相关函数，但我们也可以把轻松的把线性模型和平方指数模型传递进去。</p>\n<h1 id=\"用随机梯度下降处理回归\"><a class=\"anchor\" href=\"#用随机梯度下降处理回归\">#</a> 用随机梯度下降处理回归</h1>\n<p>本主题将介绍随机梯度下降法（Stochastic Gradient Descent，SGD），我们将用它解决回归问题，后面我们还用它处理分类问题。</p>\n<h2 id=\"getting-ready-17\"><a class=\"anchor\" href=\"#getting-ready-17\">#</a> Getting ready</h2>\n<p>SGD 是机器学习中的无名英雄（unsung hero），许多算法的底层都有 SGD 的身影。之所以受欢迎是因为其简便与快速 —— 处理大量数据时这些都是好事儿。</p>\n<p>SGD 成为许多机器学习算法的核心的另一个原因是它很容易描述过程。在本章的最后，我们对数据作一些变换，然后用模型的损失函数（loss function）拟合数据。</p>\n<h2 id=\"how-to-do-it-17\"><a class=\"anchor\" href=\"#how-to-do-it-17\">#</a> How to do it...</h2>\n<p>如果 SGD 适合处理大数据集，我们就用大点儿的数据集来演示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:,&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>1,000,000\n</code></pre>\n<p>值得进一步了解数据对象的构成和规模信息。还在我们用的是 NumPy 数组，所以我们可以获得 <code>nbytes</code> 。Python 本身没有获取 NumPy 数组大小的方法。输出结果与系统有关，你的结果和下面的数据可能不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;:,&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>nbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>800,000,000\n</code></pre>\n<p>我们把字节码 <code>nbytes</code>  转换成 MB（megabytes），看着更直观：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">.</span>nbytes <span class=\"token operator\">/</span> <span class=\"token number\">1e6</span></pre></td></tr></table></figure><pre><code>800.0\n</code></pre>\n<p>因此，每个数据点的字节数就是：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X<span class=\"token punctuation\">.</span>nbytes <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>8.0\n</code></pre>\n<p>这些信息和我们的目标没多大关系，不过了解数据对象的构成和规模信息还是值得的。</p>\n<p>现在，我们有了数据，就用 <code>SGDRegressor</code>  来拟合：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> linear_model</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sgd <span class=\"token operator\">=</span> linear_model<span class=\"token punctuation\">.</span>SGDRegressor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sgd<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><pre><code>SGDRegressor(alpha=0.0001, average=False, epsilon=0.1, eta0=0.01,\n       fit_intercept=True, l1_ratio=0.15, learning_rate='invscaling',\n       loss='squared_loss', n_iter=5, penalty='l2', power_t=0.25,\n       random_state=None, shuffle=True, verbose=0, warm_start=False)\n</code></pre>\n<p>这里又出现一个 “充实的（beefy）” 对象。重点需要了解我们的损失函数是 <code>squared_loss</code> ，与线性回归里的残差平方和是一样的。还需要注意 <code>shuffle</code>  会对数据产生随机搅动（shuffle），这在解决伪相关问题时很有用。scikit-learn 用 <code>fit_intercept</code>  方法可以自动加一列 1。如果想从拟合结果中看到很多输出，就把 <code>verbose</code>  设为 1。用 scikit-learn 的 API 预测，我们可以统计残差的分布情况：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>linear_preds <span class=\"token operator\">=</span> sgd<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">%</span>matplotlib inline</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f<span class=\"token punctuation\">.</span>tight_layout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>linear_preds <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'Residuals Linear'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Residuals\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/1-17-1.png\" alt=\"png\" /></p>\n<p>拟合的效果非常好。异常值很少，直方图也呈现出完美的正态分布钟形图。</p>\n<h2 id=\"how-it-works-17\"><a class=\"anchor\" href=\"#how-it-works-17\">#</a> How it works...</h2>\n<p>当然这里我们用的是虚拟数据集，但是你也可以用更大的数据集合。例如，如果你在华尔街工作，有可能每天一个市场都有 20 亿条交易数据。现在如果有一周或一年的数据，用 SGD 算法就可能无法运行了。很难处理这么大的数据量，因为标准的梯度下降法每一步都要计算梯度，计算量非常庞大。</p>\n<p>标准的梯度下降法的思想是在每次迭代计算一个新的相关系数矩阵，然后用学习速率（learning rate）和目标函数（objective function）的梯度调整它，直到相关系数矩阵收敛为止。如果用伪代码写就是这样：</p>\n<pre><code>while not_converged:\n    w = w – learning_rate * gradient(cost(w))\n</code></pre>\n<p>这里涉及的变量包括：</p>\n<ul>\n<li><code>w</code> ：相关系数矩阵</li>\n<li><code>learning_rate</code> ：每次迭代时前进的长度。如果收敛效果不好，调整这个参数很重要</li>\n<li><code>gradient</code> ：导数矩阵</li>\n<li><code>cost</code> ：回归的残差平方和。后面我们会介绍，不同的分类方法中损失函数定义不同，具有可变性也是 SGD 应用广泛的理由之一。</li>\n</ul>\n<p>除了梯度函数有点复杂之外，这个方法还是可以的。随着相关系数向量的增加，梯度的计算也会变得越来越慢。每次更新之前，我们都需要对每个数据点计算新权重。</p>\n<p>SGD 的工作方式稍有不同；每次迭代不是批量更新梯度，而是只更新新数据点的参数。这些数据点是随机选择的，因此称为随机梯度下降法。</p>\n",
            "tags": [
                "计算机科学",
                "机器学习",
                "Scikit-learn Cookbook",
                "机器学习",
                "Scikit-learn Cookbook"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC4%E7%AB%A0%20%E4%BD%BF%E7%94%A8%20scikit-learn%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB/",
            "url": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC4%E7%AB%A0%20%E4%BD%BF%E7%94%A8%20scikit-learn%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB/",
            "title": "第4章 使用 scikit-learn 对数据分类",
            "date_published": "2021-12-03T10:44:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd2l6YXJkZm9yY2VsL3NrbGVhcm4tY2I=\">https://gitee.com/wizardforcel/sklearn-cb</span><br />\n 未经作者的许可，此代码仅用于学习，不能用于其他用途。</p>\n</div>\n<h1 id=\"第四章-使用-scikit-learn-对数据分类\"><a class=\"anchor\" href=\"#第四章-使用-scikit-learn-对数据分类\">#</a> 第四章 使用 scikit-learn 对数据分类</h1>\n<p>分类在大量语境下都非常重要。例如，如果我们打算自动化一些决策过程，我们可以利用分类。在我们需要研究诈骗的情况下，有大量的事务，人去检查它们是不实际的。所以，我们可以使用分类都自动化这种决策。</p>\n<h1 id=\"使用决策树实现基本的分类\"><a class=\"anchor\" href=\"#使用决策树实现基本的分类\">#</a> 使用决策树实现基本的分类</h1>\n<p>这个秘籍中，我们使用决策树执行基本的分类。它们是非常不错的模型，因为它们很易于理解，并且一旦训练完成，评估就很容易。通常可以使用 SQL 语句，这意味着结果可以由许多人使用。</p>\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<p>这个秘籍中，我们会看一看决策树。我喜欢将决策树看做基类，大量的模型从中派生。它是个非常简单的想法，但是适用于大量的情况。</p>\n<p>首先，让我们获取一些分类数据，我们可以使用它来练习：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        n_redundant<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h2>\n<p>处理决策树非常简单。我们首先需要导入对象，之后训练模型：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>compute_importances<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> criterion<span class=\"token operator\">=</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        max_depth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_features<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        max_leaf_nodes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> min_density<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        min_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> min_samples_split<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> splitter<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> preds <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1.0</span></pre></td></tr></table></figure><p>你可以看到，我们猜测它是正确的。显然，这只是凑合着运行。现在我们研究一些选项。</p>\n<p>首先，如果你观察 <code>dt</code>  对象，它拥有多种关键字参数，决定了对象的行为。我们如何选择对象十分重要，所以我们要详细观察对象的效果。</p>\n<p>我们要观察的第一个细节是 <code>max_depth</code> 。这是个重要的参数，决定了允许多少分支。这非常重要，因为决策树需要很长时间来生成样本外的数据，它们带有一些类型的正则化。之后，我们会看到，我们如何使用多种浅层决策树，来生成更好的模型。让我们创建更复杂的数据集并观察当我们允许不同 <code>max_depth</code>  时会发生什么。我们会将这个数据及用于剩下的秘籍。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> n_features<span class=\"token operator\">=</span><span class=\"token number\">200</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token number\">750</span><span class=\"token punctuation\">,</span> n_features<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        n_informative<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> training <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                size<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span>x<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> preds <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracies<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>preds <span class=\"token operator\">==</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> accuracies<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Decision Tree Accuracy\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"% Correct\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Max Depth\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-1-1.jpg\" alt=\"\" /></p>\n<p>我们可以看到，我们实际上在较低最大深度处得到了漂亮的准确率。让我们进一步看看低级别的准确率，首先是 15：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> N <span class=\"token operator\">=</span> <span class=\"token number\">15</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> accuracies<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Decision Tree Accuracy\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"% Correct\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Max Depth\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-1-2.jpg\" alt=\"\" /></p>\n<p>这个就是我们之前看到的峰值。比较令人惊讶的是它很快就下降了。最大深度 1 到 3 可能几乎是相等的。决策树很擅长分离规则，但是需要控制。</p>\n<p>我们观察 <code>compute_importances</code>  参数。对于随机森林来说，它实际上拥有更广泛的含义。但是我们要更好地了解它。同样值得注意的是，如果你使用了 0.16 或之前的版本，你可以尽管这样做：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt_ci <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>compute_importances<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#plot the importances </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ne0 <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>feature_importances_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y_comp <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>feature_importances_<span class=\"token punctuation\">[</span>ne0<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> x_comp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>feature_importances_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>ne0<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x_comp<span class=\"token punctuation\">,</span> y_comp<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-1-3.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>要注意，你可能会得到一个错误，让你知道你不再需要显式设置 <code>compute_importances</code> 。</p>\n</blockquote>\n<p>我们看到，这些特征之一非常重要，后面跟着几个其它特征。</p>\n<h2 id=\"工作原理\"><a class=\"anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<p>简单来说，我们所有时间都在构造决策树。当思考场景以及将概率分配给结果时，我们构造了决策树。我们的规则更加复杂，并涉及很多上下文，但是使用决策树，我们关心的所有东西都是结果之间的差异，假设特征的一些信息都是已知的。</p>\n<p>现在，让我们讨论熵和基尼系数之间的差异。</p>\n<p>熵不仅仅是给定变量的熵值，如果我们知道元素的值，它表示了熵中的变化。这叫做信息增益（IG），数学上是这样：</p>\n<pre><code>IG(Data,KnownFeatures) = H(Data) - H(Data|KnownFeatures)\n</code></pre>\n<p>对于基尼系数，我们关心的是，提供新的信息，一个数据点有多可能被错误标记。</p>\n<p>熵和基尼系数都有优缺点。也就是说，如果你观察它们工作方式的主要差异，这可能是个重新验证你的假设的好方式。</p>\n<h1 id=\"调整决策树模型\"><a class=\"anchor\" href=\"#调整决策树模型\">#</a> 调整决策树模型</h1>\n<p>如果我们仅仅使用基本的决策树实现，可能拟合得不是很好。所以我们需要调参，以便获得更好的拟合。这非常简单，并且不用花费什么精力。</p>\n<h2 id=\"准备-2\"><a class=\"anchor\" href=\"#准备-2\">#</a> 准备</h2>\n<p>这个秘籍中，我们深入了解如何调整决策树分类器。有几个渲染，并且在上一个秘籍中，我们仅仅查看了它们之一。</p>\n<p>我们会训练一个基本的模型，并实际观察决策树是什么样子。之后，我们会重新检测每个决策，并且指出不同的修改如何影响结构。</p>\n<p>如果你打算遵循这个秘籍，需要安装 <code>pydot</code> 。</p>\n<h2 id=\"操作步骤-2\"><a class=\"anchor\" href=\"#操作步骤-2\">#</a> 操作步骤</h2>\n<p>比起其它算法，决策树有许多 “把手”，因为我们旋转把手时，易于发现发生了什么。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> n_informative<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好的，所以既然我们训练了基本的分类器，我们可以快速地查看它：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> StringIO <span class=\"token keyword\">import</span> StringIO</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> tree </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pydot</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> str_buffer <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tree<span class=\"token punctuation\">.</span>export_graphviz<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> out_file<span class=\"token operator\">=</span>str_buffer<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> graph <span class=\"token operator\">=</span> pydot<span class=\"token punctuation\">.</span>graph_from_dot_data<span class=\"token punctuation\">(</span>str_buffer<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> graph<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.jpg\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这张图几乎难以辨认，但是这展示了一颗复杂的树，它可以使用非最优的决策树，作为结果生成。</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-2-1.jpg\" alt=\"\" /></p>\n<p>哇哦！这是个非常复杂的树，看上去对数据过拟合了。首先，让我们降低最大深度值：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>顺带一说，如果你想知道为什么能看到分号，通常是 <code>repr</code> ，它实际上是决策树的模型。例如 <code>fit</code>  函数实际上返回决策树对象，它允许链式调用：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，让我们返回正常的程序。</p>\n<p>由于我们会多次绘制它，我们创建一个函数。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">plot_dt</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       str_buffer <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tree<span class=\"token punctuation\">.</span>export_graphviz<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> out_file<span class=\"token operator\">=</span>str_buffer<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> graph <span class=\"token operator\">=</span> pydot<span class=\"token punctuation\">.</span>graph_from_dot_data<span class=\"token punctuation\">(</span>str_buffer<span class=\"token punctuation\">.</span>getvalue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> graph<span class=\"token punctuation\">.</span>write_jpg<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> plot_dt<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"myfile.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>会生成下面的图：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-2-2.jpg\" alt=\"\" /></p>\n<p>这棵树稍微简单了一些。让我们看看，如果我们将熵用作分割标准，会发生什么：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>criterion<span class=\"token operator\">=</span><span class=\"token string\">'entropy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                 max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> plot<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"entropy.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>会生成下面的图：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-2-3.jpg\" alt=\"\" /></p>\n<p>很容易看到，前两个分割是相同特征，之后的分割以相似总数分布。这是个良好的合理的检查。</p>\n<p>同样，注意第一个分割的熵是 0.999，但是使用基尼系数的时候是 0.5。我们需要弄清楚，决策树的分割的两种度量有什么不同。更多信息请见下面的工作原理一节。但是，如果我们想要使用熵穿件决策树，我们必须使用下列命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>min_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                criterion<span class=\"token operator\">=</span><span class=\"token string\">'entropy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                max_depth<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"工作原理-2\"><a class=\"anchor\" href=\"#工作原理-2\">#</a> 工作原理</h2>\n<p>决策树，通常容易出现过拟合。由于它的自身特性，决策树经常会过拟合，所以，我们需要思考，如何避免过拟合，这是为了避免复杂性。实战中，简单的模型通常会执行得更好。</p>\n<p>我们即将在实战中看到这个理念。随机森林会在简单模型的理念上构建。</p>\n<h1 id=\"使用许多决策树-随机森林\"><a class=\"anchor\" href=\"#使用许多决策树-随机森林\">#</a> 使用许多决策树 -- 随机森林</h1>\n<p>这个秘籍中，我们会将随机森林用于分类任务。由于随机森林对于过拟合非常健壮，并且在大量场景中表现良好，所以使用它。</p>\n<h2 id=\"准备-3\"><a class=\"anchor\" href=\"#准备-3\">#</a> 准备</h2>\n<p>我们会在工作原理一节中深入探索，但是随即森林通过构造大量浅层树，之后让每颗树为分类投票，再选取投票结果。这个想法在机器学习中十分有效。如果我们发现简单训练的分类器只有 60% 的准确率，我们可以训练大量分类器，它们通常是正确的，并且随后一起使用它们。</p>\n<h2 id=\"操作步骤-3\"><a class=\"anchor\" href=\"#操作步骤-3\">#</a> 操作步骤</h2>\n<p>训练随机森林分类器的机制在 Scikit 中十分容易。这一节中，我们执行以下步骤：</p>\n<ol>\n<li>\n<p>创建用于练习的样例数据集</p>\n</li>\n<li>\n<p>训练基本的随机森林对象</p>\n</li>\n<li>\n<p>看一看训练对象的一些属性</p>\n</li>\n</ol>\n<p>下一个秘籍中，我们会观察如何调整随机森林分类器，让我们以导入数据集来开始：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets</pre></td></tr></table></figure><p>之后，使用 1000 个样例创建数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们拥有了数据，我们可以创建分类器对象并训练它：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestClassifier</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们想做的第一件事，就是看看如何拟合训练数据。我们可以将 <code>predict </code> 方法用于这些东西：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"Accuracy:\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Accuracy<span class=\"token punctuation\">:</span>   <span class=\"token number\">0.993</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"Total Correct:\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Total </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Correct<span class=\"token punctuation\">:</span>   <span class=\"token number\">993</span></pre></td></tr></table></figure><p>现在，让我们查看一些属性和犯法。</p>\n<p>首先，我们查看一些实用属性。这里，由于我们保留默认值，它们是对象的默认值：</p>\n<ul>\n<li>\n<p><code>rf.criterion</code> ：这是决定分割的标准。默认是 <code>gini</code> 。</p>\n</li>\n<li>\n<p><code>rf.bootstrap</code> ：布尔值，表示在训练随机森林时是否使用启动样例</p>\n</li>\n<li>\n<p><code>rf.n_jobs</code> ：训练和预测的任务数量。如果你打算使用所有处理器，将其设置为 <code>-1</code> 。要记住，如果你的数据集不是非常大，使用过多任务通常会导致浪费，因为处理器之间需要序列化和移动。</p>\n</li>\n<li>\n<p><code>rf.max_features</code> ：这表示执行最优分割时，考虑的特征数量。在调参过程中这会非常方便。</p>\n</li>\n<li>\n<p><code>rf.conpute_importtances</code> ：这有助于我们决定，是否计算特征的重要性。如何使用它的信息，请见更多一节。</p>\n</li>\n<li>\n<p><code>rf.max_depth</code> ：这表示树的深度。</p>\n</li>\n</ul>\n<p>有许多属性需要注意，更多信息请查看官方文档。</p>\n<p>不仅仅是 <code>predect</code>  方法很实用，我们也可以从独立的样子获取概率。这是个非常实用的特性，用于理解每个预测的不确定性。例如，我们可以预测每个样例对于不同类的概率。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> probs <span class=\"token operator\">=</span> rf<span class=\"token punctuation\">.</span>predict_proba<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> probs_df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>probs<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span><span class=\"token operator\">></span> probs_df<span class=\"token punctuation\">[</span><span class=\"token string\">'was_correct'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> probs_df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>was_correct<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>kind<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> ax<span class=\"token operator\">=</span>ax<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy at 0 class probability\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"% Correct\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"% trees for 0\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-3-1.jpg\" alt=\"\" /></p>\n<h2 id=\"工作原理-3\"><a class=\"anchor\" href=\"#工作原理-3\">#</a> 工作原理</h2>\n<p>随机森轮实用预定义数量的弱决策树，并且使用数据的自己训练每一颗树。这对于避免过拟合至关重要。这也是 <code>bootstrap</code>  参数的原因。我们的每个树拥有下列东西：</p>\n<ul>\n<li>\n<p>票数最多的类</p>\n</li>\n<li>\n<p>输出，如果我们使用回归树</p>\n</li>\n</ul>\n<p>当然，它们是表现上的考量，这会在下一个秘籍中设计。但是出于礼节随机森林如何工作的目的，我们训练一些平均数，作为结果，获得了非常好的分类器。</p>\n<h2 id=\"更多\"><a class=\"anchor\" href=\"#更多\">#</a> 更多</h2>\n<p>特征重要性是随机森林的不错的副产品。这通常有助于回答一个问题：如果我们拥有 10 个特征，对于判断数据点的真实类别，哪个特征是最重要的？真实世界中的应用都易于观察。例如，如果一个事务是不真实的，我们可能想要了解，是否有特定的信号，可以用于更快弄清楚事务的类别。</p>\n<p>如果我们打算极端特征重要性，我们需要在我们创建对象时说明。如果你使用 scikit-learn 0.15，你可能会得到一个警告，说这不是必需的。在 0.16 中，警告会被移除。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span>compute_importances<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">.</span>feature_importances_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>            rf<span class=\"token punctuation\">.</span>feature_importances_<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Feature Importances\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面就是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-3-2.jpg\" alt=\"\" /></p>\n<p>我们可以看到，在判断结果是类 0 或者 1 时，特定的特征比其它特征重要。</p>\n<h1 id=\"调整随机森林模型\"><a class=\"anchor\" href=\"#调整随机森林模型\">#</a> 调整随机森林模型</h1>\n<p>在上一个秘籍中，我们学习了如何使用随机森林分类器。在这个秘籍中，我们会浏览如何通过调整参数来调整它的表现。</p>\n<h2 id=\"准备-4\"><a class=\"anchor\" href=\"#准备-4\">#</a> 准备</h2>\n<p>为了调整随机森林模型，我们首先需要创建数据集，它有一些难以预测。之后，我们修改参数并且做一些预处理来更好地拟合数据集。</p>\n<p>所以，让我们首先创建数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        n_features<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                        n_informative<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                        flip_y<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"操作步骤-4\"><a class=\"anchor\" href=\"#操作步骤-4\">#</a> 操作步骤</h2>\n<p>这个秘籍中，我们执行下列操作：</p>\n<ol>\n<li>\n<p>创建训练和测试集。和上个秘籍不同，如果不与训练集比较，调整模型就毫无用途。</p>\n</li>\n<li>\n<p>训练基本的随机森林，来评估原始算法有多好。</p>\n</li>\n<li>\n<p>用系统化的方式修改一些参数，之后观察拟合会发生什么变化。</p>\n</li>\n</ol>\n<p>好了，启动解释器并导入 NumPy：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> training <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                size<span class=\"token operator\">=</span>y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestClassifier</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> preds <span class=\"token operator\">=</span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"Accuracy:\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>preds <span class=\"token operator\">==</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Accuracy<span class=\"token punctuation\">:</span> <span class=\"token number\">0.652239557121</span></pre></td></tr></table></figure><p>我打算用一些花招，引入模型评估度量之一，我们会在这本书后面讨论它。准确率是第一个不错的度量，但是使用混淆矩阵会帮助我们理解发生了什么。</p>\n<p>让我们迭代 <code>max_features</code>  的推荐选项，并观察对拟合有什么影响。我们同事迭代一些浮点值，它们是所使用的特征的分数。使用下列命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> confusion_matrix</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> max_feature_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sqrt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.99</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_matrixes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> max_feature <span class=\"token keyword\">in</span> max_feature_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span>max_features<span class=\"token operator\">=</span>max_feature<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_matrixes<span class=\"token punctuation\">[</span>max_feature<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由于我使用了 <code>ravel</code>  方法，我们的二维数组现在变成了一维。</p>\n<p>现在，导入 Pandas 并查看刚刚创建的混淆矩阵：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>confusion_matrixes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> itertools </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>kind<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> ax<span class=\"token operator\">=</span>ax<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Guessed vs Correct (i, j) where i is the guess and j is the actual.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xticklabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Guessed vs Correct\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Correct\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-4-1.jpg\" alt=\"\" /></p>\n<p>虽然我们看不到表现中的任何真正的差异，对于你自己的项目来说，这是个非常简单的过程。让我们试一试 <code>n_estimator </code> 选项，但是使用原始的精确度。使用一些更多的选项，我们的图表就会变得很密集，难以使用。</p>\n<p>由于我们正在使用混淆矩阵，我们可以从混淆矩阵的迹除以总和来计算准确度。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> n_estimator_params <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_matrixes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> n_estimator <span class=\"token keyword\">in</span> n_estimator_params<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span>n_estimators<span class=\"token operator\">=</span>n_estimator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        confusion_matrixes<span class=\"token punctuation\">[</span>n_estimator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> confusion_matrix<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                          rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>training<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># here's where we'll update the confusion matrix with the operation we talked about   </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracy <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> confusion_matrixes<span class=\"token punctuation\">[</span>n_estimator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accuracy<span class=\"token punctuation\">(</span>confusion_matrixes<span class=\"token punctuation\">[</span>n_estimator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracy_series <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>confusion_matrixes<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> itertools </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracy_series<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>kind<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> ax<span class=\"token operator\">=</span>ax<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.75</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>grid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy by Number of Estimators\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># we want the full scope </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Accuracy\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of Estimators\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-4-2.jpg\" alt=\"\" /></p>\n<p>现在对于大多数部分，准确度是如何上升的呢？确实有一些随机性和准确度相关，但是图像从左到右是上升的。在下面的工作原理一节，我们会讨论随机森林和 bootstrap 之间的关系，以及哪个通常更好。</p>\n<h2 id=\"工作原理-4\"><a class=\"anchor\" href=\"#工作原理-4\">#</a> 工作原理</h2>\n<p>bootstarp 是个不错的技巧，用于扩展模型的其它部分。通常用于介绍 bootstarp 的案例是将标准误差与中位数相加。这里，我们估算了结果，并将估算聚集为概率。</p>\n<p>所以，通过简单增加估算器的数量，我们增加了子样本，产生了整体上更快的收敛。</p>\n<h2 id=\"更多-2\"><a class=\"anchor\" href=\"#更多-2\">#</a> 更多</h2>\n<p>我们可能打算加快训练过程。我之前提到了这个过程，但是同时，我们可以将 <code>n_jobs</code>  设为我们想要训练的树的数量。这应该大致等于机器的核数。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> RandomForestClassifier<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done  <span class=\"token number\">1</span> out of  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>  <span class=\"token number\">0.</span>3s remaining<span class=\"token punctuation\">:</span> <span class=\"token number\">0.</span>9s </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done  <span class=\"token number\">4</span> out of  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>  <span class=\"token number\">0.</span>3s finished</pre></td></tr></table></figure><p>这也可以并行预测：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done  <span class=\"token number\">1</span> out of  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>  <span class=\"token number\">0.</span>0s remaining<span class=\"token punctuation\">:</span>    <span class=\"token number\">0.</span>0s </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done  <span class=\"token number\">4</span> out of  <span class=\"token number\">4</span> <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>  <span class=\"token number\">0.</span>0s finished </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"使用支持向量机对数据分类\"><a class=\"anchor\" href=\"#使用支持向量机对数据分类\">#</a> 使用支持向量机对数据分类</h1>\n<p>支持向量机（SVM）是我们使用的技巧之一，它不能轻易用概率解释。SVM 背后的原理是，我们寻找一个平面，，它将数据集分割为组，并且是最优的。这里，分割的意思是，平面的选择使平面上最接近的点之间的间距最大。这些点叫做支持向量。</p>\n<h2 id=\"准备-5\"><a class=\"anchor\" href=\"#准备-5\">#</a> 准备</h2>\n<p>SVM 是我最喜欢的机器学习算法之一，它是我在学校中学习的第一批机器学习伏安法之一。所以，让我们获得一些数据并开始吧。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"操作步骤-5\"><a class=\"anchor\" href=\"#操作步骤-5\">#</a> 操作步骤</h2>\n<p>创建支持向量机分类器的机制非常简单。有许多可用的选项。所以，我们执行下列操作：</p>\n<ol>\n<li>\n<p>创建 SVC 对象，并训练一些伪造数据。</p>\n</li>\n<li>\n<p>使用 SVC 对象训练一些示例数据。</p>\n</li>\n<li>\n<p>稍微讨论一些 SVC 选项。</p>\n</li>\n</ol>\n<p>从支持向量机模块导入支持向量分类器（SVC）：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>svm <span class=\"token keyword\">import</span> SVC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> base_svm <span class=\"token operator\">=</span> SVC<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> base_svm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们看一些属性：</p>\n<ul>\n<li>\n<p><code>C</code> ：以防我们的数据集不是分离好的， <code>C</code>  会在间距上放大误差。随着 <code>C</code>  变大，误差的惩罚也会变大，SVM 会尝试寻找一个更窄的间隔，即使它错误分类了更多数据点。</p>\n</li>\n<li>\n<p><code>class_weight</code> ：这个表示问题中的每个类应该给予多少权重。这个选项以字典提供，其中类是键，值是与这些类关联的权重。</p>\n</li>\n<li>\n<p><code>gamma</code> ：这是用于核的 Gamma 参数，并且由 <code>rgb, sigmoid</code>  和 <code>ploy</code>  支持。</p>\n</li>\n<li>\n<p><code>kernel</code> ：这是所用的核，我们在下面使用 <code>linear</code>  核，但是 <code>rgb</code>  更流行，并且是默认选项。</p>\n</li>\n</ul>\n<h2 id=\"工作原理-5\"><a class=\"anchor\" href=\"#工作原理-5\">#</a> 工作原理</h2>\n<p>我们在准备一节中说过，SVM 会尝试寻找一个屏幕，它使两个类别最优分割。让我们查看带有两个特征的最简单示例，以及一个良好分割的结果。</p>\n<p>首先，让我们训练数据集，之后我们将其绘制出来。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_blobs<span class=\"token punctuation\">(</span>n_features<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>svm <span class=\"token keyword\">import</span> LinearSVC </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> svm <span class=\"token operator\">=</span> LinearSVC<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> svm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们训练了支持向量机，我们将图中每个点结果绘制出来。这会向我们展示近似的决策边界。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> namedtuple</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Point <span class=\"token operator\">=</span> namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">'Point'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'outcome'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> decision_boundary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> xmin<span class=\"token punctuation\">,</span> xmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ymin<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> xpt<span class=\"token punctuation\">,</span> ypt <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>xmin<span class=\"token operator\">-</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> xmax<span class=\"token operator\">+</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>ymin<span class=\"token operator\">-</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> ymax<span class=\"token operator\">+</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        p <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">(</span>xpt<span class=\"token punctuation\">,</span> ypt<span class=\"token punctuation\">,</span> svm<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>xpt<span class=\"token punctuation\">,</span> ypt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            decision_boundary<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> xpt<span class=\"token punctuation\">,</span> ypt<span class=\"token punctuation\">,</span> pt <span class=\"token keyword\">in</span> decision_boundary<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>xpt<span class=\"token punctuation\">,</span> ypt<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>pt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.15</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span>ymin<span class=\"token punctuation\">,</span> ymax<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span>xmin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"A well separated dataset\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-5-1.jpg\" alt=\"\" /></p>\n<p>让我们看看其他例子，但是这一次决策边界不是那么清晰：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_features<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                        n_classes<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>            </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        n_informative<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                        n_redundant<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们已经看到，这并不是用线性分类易于解决的问题。</p>\n<p>虽然我们不会将其用于实战，让我们看一看决策边界。首先，让我们使用新的数据点重新训练分类器。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> svm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> xmin<span class=\"token punctuation\">,</span> xmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ymin<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_points <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> xx<span class=\"token punctuation\">,</span> yy <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                           product<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>xmin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                           np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>ymin<span class=\"token punctuation\">,</span> ymax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_preds <span class=\"token operator\">=</span> svm<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_points<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_points<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> test_points<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>test_preds<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.25</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"A well separated dataset\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-5-2.jpg\" alt=\"\" /></p>\n<p>我们可以看到，决策边界并不完美，但是最后，这是我们获得的最好的线性 SVM。</p>\n<h2 id=\"更多-3\"><a class=\"anchor\" href=\"#更多-3\">#</a> 更多</h2>\n<p>随让我们可能不能获得更好的线性 SVM，Scikit 中的 SVC 分类器会使用径向基函数。我们之前看过这个函数，但是让我们观察它如何计算我们刚刚拟合的数据集的决策边界。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> radial_svm <span class=\"token operator\">=</span> SVC<span class=\"token punctuation\">(</span>kernel<span class=\"token operator\">=</span><span class=\"token string\">'rbf'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> radial_svm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> xmin<span class=\"token punctuation\">,</span> xmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ymin<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>percentile<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_points <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> xx<span class=\"token punctuation\">,</span> yy <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                           product<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>xmin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                           np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span>ymin<span class=\"token punctuation\">,</span> ymax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_preds <span class=\"token operator\">=</span> radial_svm<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_points<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>test_points<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> test_points<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>               color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>test_preds<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.25</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"SVM with a radial basis function\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-5-3.jpg\" alt=\"\" /></p>\n<p>我们可以看到，决策边界改变了。我们甚至可以传入我们自己的径向基函数，如果需要的话：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">test_kernel</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\" Test kernel that returns the exponentiation of the dot of the</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        X and y matrices.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        This looks an awful lot like the log hazards if you're familiar with survival analysis.    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_svc <span class=\"token operator\">=</span> SVC<span class=\"token punctuation\">(</span>kernel<span class=\"token operator\">=</span>test_kernel<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> test_svc<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SVC<span class=\"token punctuation\">(</span>C<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> cache_size<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> class_weight<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> coef0<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> degree<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gamma<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>   kernel<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>function test_kernel at <span class=\"token number\">0x121fdfb90</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    max_iter<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>   probability<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    shrinking<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span>   verbose<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"使用多类分类来归纳\"><a class=\"anchor\" href=\"#使用多类分类来归纳\">#</a> 使用多类分类来归纳</h1>\n<p>这个秘籍中，我们会了解多类分类。取决于你的算法选择，你可以轻松地实现多类分类，或者定义用于比较的模式。</p>\n<h2 id=\"准备-6\"><a class=\"anchor\" href=\"#准备-6\">#</a> 准备</h2>\n<p>在处理线性模型，例如逻辑回归时，我们需要使用 <code>OneVsRestClassifier</code> 。这个模式会为每个类创建一个分类器。</p>\n<h2 id=\"操作步骤-6\"><a class=\"anchor\" href=\"#操作步骤-6\">#</a> 操作步骤</h2>\n<p>首先，我们会查看一个决策树的粗略示例，用于拟合多类的数据集。我们之前讨论过，我们可以使用一些分类器获得多类，所以我们仅仅拟合示例来证明它可以工作，然后继续。</p>\n<p>其次，我们实际上将 <code>OneVsRestClassifier</code>  合并进我的模型中：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> n_classes<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                        n_informative<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>你可以看到，我们能够以最低努力来拟合分类器。</p>\n<p>现在，让我们转向多类分类器的案例中。这需要我们导入 <code>OneVsRestClassifier</code> 。我们也导入 <code>LogisticRegression </code> 。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>multiclass <span class=\"token keyword\">import</span> OneVsRestClassifier </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression</pre></td></tr></table></figure><p>现在，我们覆盖 <code>LogisticRegression</code>  分类器，同时，注意我们可以使其并行化。如果我们想知道 <code>OneVsRestClassifier</code>  分类器如何工作，它仅仅是训练单独的模型，之后比较它们。所以，我们可以同时单独训练数据。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mlr <span class=\"token operator\">=</span> OneVsRestClassifier<span class=\"token punctuation\">(</span>LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_jobs<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mlr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mlr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"工作原理-6\"><a class=\"anchor\" href=\"#工作原理-6\">#</a> 工作原理</h2>\n<p>如果我们打算快速时间我们自己的 <code>OneVsRestClassifier</code> ，应该怎么做呢？</p>\n<p>首先，我们需要构造一种方式，来迭代分类，并为每个分类训练分类器。之后，我们首先需要预测每个分类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">train_one_vs_rest</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> class_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        y_train <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> class_label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> y_train</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classifiers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> class_i <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>       l <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        y_train <span class=\"token operator\">=</span> train_one_vs_rest<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> class_i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        l<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        classifiers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好的，所以既然我们配置好了 OneVsRest 模式，我们需要做的所有事情，就是求出每个数据点对于每个分类器的可能性。我们之后将可能性最大的分类赋给数据点。</p>\n<p>例如，让我们预测 <code>X[0]</code> ：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> classifier <span class=\"token keyword\">in</span> classifiers </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span>  <span class=\"token keyword\">print</span> classifier<span class=\"token punctuation\">.</span>predict_proba<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.90443776</span>  <span class=\"token number\">0.09556224</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.03701073</span>  <span class=\"token number\">0.96298927</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.98492829</span>  <span class=\"token number\">0.01507171</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>你可以看到，第二个分类器（下标为 <code>1</code> ）拥有 “正” 的最大可能性，所以我们将这个点标为 <code>1</code> 。</p>\n<h1 id=\"将-lda-用于分类\"><a class=\"anchor\" href=\"#将-lda-用于分类\">#</a> 将 LDA 用于分类</h1>\n<p>线性判别分析（LDA）尝试拟合特征的线性组合，来预测结果变量。LDA 通常用作预处理步骤，我们会在这篇秘籍中涉及这两种方法。</p>\n<h2 id=\"准备-7\"><a class=\"anchor\" href=\"#准备-7\">#</a> 准备</h2>\n<p>这篇秘籍中，我们会做这些事情：</p>\n<ol>\n<li>\n<p>从雅虎获取股票数据</p>\n</li>\n<li>\n<p>将其重新排列为我们熟悉的形状</p>\n</li>\n<li>\n<p>创建 LDA 对象来拟合和预测类标签</p>\n</li>\n<li>\n<p>给出如何使用 LDA 来降维的示例</p>\n</li>\n</ol>\n<h2 id=\"操作步骤-7\"><a class=\"anchor\" href=\"#操作步骤-7\">#</a> 操作步骤</h2>\n<p>这个例子中，我们就执行一种分析，类似于 Altman 的 Z 规范化。在他的论文中，Altamn 基于多种金融度量，预测了公司两年内的违约可能性。从它的维基页面中，我们看到了下面这些东西：</p>\n<p>T1 = 流动资产 / 总资产。相对于公司规模来度量流动资产。</p>\n<p>T2 = 留存收益 / 总资产。度量反映公司年龄和盈利能力的收益率。</p>\n<p>T3 = 利息和税前的收益 / 总资产。度量税和杠杆系数之外的运作效率。它是运作收益，对于长期生存非常重要。</p>\n<p>T4 = 股权市值 / 总负债的账面价值。添加市场维度，可以将证券价格波动展示为危险信号。</p>\n<p>T5 = 营业额 / 总资产。总资产周转的标准度量（每个产业的变化都很大）。</p>\n<p>这段来自维基百科：</p>\n<p>[1] Altman, Edward I. (September 1968). &quot;&quot;Financial Ratios, Discriminant Analysis and the Prediction of Corporate Bankruptcy&quot;&quot;. Journal of Finance: 189–209.</p>\n<p>这个分析中，我们使用 Pandas 从雅虎抓取一些金融数据。我们尝试预测，股票是否在六个月内会涨，基于股票的当前属性。很显然没有比 Altman 的 Z 规范化更精妙的东西了。让我们使用一些汽车股票：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tickers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TM\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GM\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TSLA\"</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pandas<span class=\"token punctuation\">.</span>io <span class=\"token keyword\">import</span> data <span class=\"token keyword\">as</span> external_data </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> stock_panel <span class=\"token operator\">=</span> external_data<span class=\"token punctuation\">.</span>DataReader<span class=\"token punctuation\">(</span>tickers<span class=\"token punctuation\">,</span> <span class=\"token string\">\"yahoo\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个数据结构是 <code>panel</code> ，类似于 OLAP 立方体，或者三维的 <code>DataFrame</code> 。让我们看看这些数据，来熟悉一下收盘价，因为我们在比较时只考虑它。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> stock_df <span class=\"token operator\">=</span> stock_panel<span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> stock_df<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-7-1.jpg\" alt=\"\" /></p>\n<p>好的，所以现在我们需要将每支股票的价格和它六个月内的价格比较。如果更高，置为 1，否则置为 0。</p>\n<p>为此，我们只需要将其向前移动 180 天并比较：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#this dataframe indicates if the stock was higher in 180 days </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>stock_df<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> stock_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们需要做的下一件事，就是展开数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> stock_panel<span class=\"token punctuation\">.</span>to_frame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">.</span>unstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">.</span>swaplevel<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sort_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classes <span class=\"token operator\">=</span> classes<span class=\"token punctuation\">.</span>to_frame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> classes<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span>names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> data <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> data<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'is_higher'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> data<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-7-2.jpg\" alt=\"\" /></p>\n<p>好的，我们现在需要为 SciPy 创建矩阵。为此，我们会使用 <code>patsy</code>  库。这是一个非常棒的库，可以用于创建和 R 相似的决策矩阵。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> patsy </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> patsy<span class=\"token punctuation\">.</span>dmatrix<span class=\"token punctuation\">(</span>\"Open <span class=\"token operator\">+</span> High <span class=\"token operator\">+</span> Low <span class=\"token operator\">+</span> Close <span class=\"token operator\">+</span> Volume <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                       is_higher <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\"<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                       return_type<span class=\"token operator\">=</span><span class=\"token string\">'dataframe'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/4-7-3.jpg\" alt=\"\" /></p>\n<p><code>patsy</code>  是个非常强大的包。例如，假设我们打算使用第一章的一些预处理。在 <code>patsy</code>  中，可以像 R 一样，修改公式相当于修改决策矩阵。这里并不会这么做，但是如果我们打算将数据缩放为均值 0 和标准差 1，函数就是 <code>scale(open) + scale(high)</code> 。</p>\n<p>太棒了。所以现在我们得到了数据集。让我们训练 LDA 对象吧。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>lda <span class=\"token keyword\">import</span> LDA </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lda <span class=\"token operator\">=</span> LDA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lda<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以看到，数据集的预测并不是非常糟糕。确实，我们打算使用其他参数改进并测试模型：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> classification_report </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> classification_report<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                lda<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>             precision     recall    f1<span class=\"token operator\">-</span>score     support </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0.0</span>               <span class=\"token number\">0.63</span>       <span class=\"token number\">0.59</span>        <span class=\"token number\">0.61</span>        <span class=\"token number\">1895</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1.0</span>               <span class=\"token number\">0.60</span>       <span class=\"token number\">0.64</span>        <span class=\"token number\">0.62</span>        <span class=\"token number\">1833</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>avg <span class=\"token operator\">/</span> total       <span class=\"token number\">0.61</span>       <span class=\"token number\">0.61</span>        <span class=\"token number\">0.61</span>        <span class=\"token number\">3728</span></pre></td></tr></table></figure><p>这些度量以多种方式描述了模型如何拟合数据。</p>\n<ul>\n<li>\n<p>对于 <code>precision</code> （准确率），假设模型预测正值，多大比例这个是对的？（ <code>TP / (TP + FP)</code> ）</p>\n</li>\n<li>\n<p>对于 <code>recall</code> （召回率），假设某个类的状态是正确的，我们选取了多大的比例？由于召回率是搜索问题中的常见度量，所以我用 “选取”。例如，有一些潜在的网页和搜索术语相关，也就是返回的比例。（ <code>TP / (TP + FN)</code> ）</p>\n</li>\n<li>\n<p><code>f1-score</code>  参数尝试总结二者关系。（ <code>2 * p * r / (p + r)</code> ）</p>\n</li>\n</ul>\n<h2 id=\"工作原理-7\"><a class=\"anchor\" href=\"#工作原理-7\">#</a> 工作原理</h2>\n<p>LDA 实际上非常类似于我们之前做过的聚类。我们从数据训练线性模型。之后，一旦我们拥有了模型，我们尝试预测并比较每个类的数据的可能性。我们选择更加常见的选项。</p>\n<p>LDA 实际上是 QDA 的简化，我们会在下一节谈到它。这里，我们假设每个类的协方差都是一样的，但是 QDA 中，这个假设是不严格的。可以将它们的关系类比为 KNN 和 GMM。</p>\n<h1 id=\"使用-qda-非线性-lda\"><a class=\"anchor\" href=\"#使用-qda-非线性-lda\">#</a> 使用 QDA - 非线性 LDA</h1>\n<p>QDA 是一些通用技巧的推广，例如平方回归。它只是模型的推广，能够拟合更复杂的模型。但是，就像其它东西那样，当混入复杂性时，就更加困难了。</p>\n<h2 id=\"准备-8\"><a class=\"anchor\" href=\"#准备-8\">#</a> 准备</h2>\n<p>我们会扩展上一个秘籍，并通过 QDA 对象查看平方判别分析（QDA）。</p>\n<p>我们说过我们会根据模型的协方差做出假设。这里，我们会缓和这个假设。</p>\n<h2 id=\"操作步骤-8\"><a class=\"anchor\" href=\"#操作步骤-8\">#</a> 操作步骤</h2>\n<p>QDA 是 <code>qda</code>  模块的一个成员。使用下列命令来使用 QDA：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>qda <span class=\"token keyword\">import</span> QDA </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> qda <span class=\"token operator\">=</span> QDA<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> qda<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> predictions <span class=\"token operator\">=</span> qda<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> predictions<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2812.0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> classification_report </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> classification_report<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>ix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">,</span> predictions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              precision     recall     f1<span class=\"token operator\">-</span>score     support </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">0.0</span>                <span class=\"token number\">0.75</span>       <span class=\"token number\">0.36</span>        <span class=\"token number\">0.49</span>         <span class=\"token number\">1895</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1.0</span>                <span class=\"token number\">0.57</span>       <span class=\"token number\">0.88</span>        <span class=\"token number\">0.69</span>         <span class=\"token number\">1833</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>avg <span class=\"token operator\">/</span> total        <span class=\"token number\">0.66</span>       <span class=\"token number\">0.62</span>        <span class=\"token number\">0.59</span>         <span class=\"token number\">3728</span></pre></td></tr></table></figure><p>你可以看到，总体来说都差不多。如果我们回顾 LDA 秘籍，我们可以看到，与 QDA 相比，类 0 有很大变化，类 1 变化很小。</p>\n<h2 id=\"工作原理-8\"><a class=\"anchor\" href=\"#工作原理-8\">#</a> 工作原理</h2>\n<p>我们在上一个秘籍中提到过，我们本质上在这里比较可能性。所以，如何比较可能性呢？让我们使用价格来尝试对 <code>is_higher</code>  分类。</p>\n<p>我们假设收盘价服从对数正态分布。为了计算每个类的可能性，我们需要为每个类创建收盘价的子集，以及训练集和测试集。作为下一章的前瞻，我们使用内建的交叉验证方法：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation <span class=\"token keyword\">as</span> cv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">as</span> sp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> test<span class=\"token punctuation\">,</span> train <span class=\"token keyword\">in</span> cv<span class=\"token punctuation\">.</span>ShuffleSplit<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_iter<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        train_set <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        train_close <span class=\"token operator\">=</span> train_set<span class=\"token punctuation\">.</span>Close</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        train_0 <span class=\"token operator\">=</span> train_close<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">.</span>is_higher<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        train_1 <span class=\"token operator\">=</span> train_close<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">.</span>is_higher<span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>           </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        test_set <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        test_close <span class=\"token operator\">=</span> test_set<span class=\"token punctuation\">.</span>Close<span class=\"token punctuation\">.</span>values</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ll_0 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>test_close<span class=\"token punctuation\">,</span> train_0<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ll_1 <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>test_close<span class=\"token punctuation\">,</span> train_1<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们有了两个类的可能性，我们可以比较和分配类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>ll_0 <span class=\"token operator\">></span> ll_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.15588673621460505</span></pre></td></tr></table></figure><h1 id=\"使用随机梯度下降来分类\"><a class=\"anchor\" href=\"#使用随机梯度下降来分类\">#</a> 使用随机梯度下降来分类</h1>\n<p>我们在第二章中讨论过，随机梯度下降是个用于训练分类模型的基本技巧。这两种技巧之间有一些自然联系，因为名称就暗示了这一点。</p>\n<h2 id=\"准备-9\"><a class=\"anchor\" href=\"#准备-9\">#</a> 准备</h2>\n<p>在回归中，我们最小化了损失函数，它用于惩罚连续刻度上的不良选择。但是对于分类，我们会最小化损失函数，它用于乘法两个或更多情况。</p>\n<h2 id=\"操作步骤-9\"><a class=\"anchor\" href=\"#操作步骤-9\">#</a> 操作步骤</h2>\n<p>首先，让我们创建一些基本数据：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后创建 <code>SGDClassifier</code>  实例：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> linear_model </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sgd_clf <span class=\"token operator\">=</span> linear_model<span class=\"token punctuation\">.</span>SGDClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>像往常一样，我们训练模型：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sgd_clf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SGDClassifier<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> class_weight<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> epsilon<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> eta0<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> l1_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.15</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              learning_rate<span class=\"token operator\">=</span><span class=\"token string\">'optimal'</span><span class=\"token punctuation\">,</span> loss<span class=\"token operator\">=</span><span class=\"token string\">'hinge'</span><span class=\"token punctuation\">,</span> n_iter<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> penalty<span class=\"token operator\">=</span><span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> power_t<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> warm_start<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以设置 <code>class_weight</code>  参数来统计数据集中不平衡的变化总数。</p>\n<p>Hinge 损失函数定义为：</p>\n<pre><code>max(0, 1 - ty)\n</code></pre>\n<p>这里， <code>t</code>  是真正分类，+1 为一种情况，-1 为另一种情况。系数向量记为 <code>y</code> ，因为它是从模型中拟合出来的。 <code>x</code>  是感兴趣的值。这也是一种很好的度量方式。以另外一种形式表述：</p>\n<pre><code>t ∈ -1, 1\ny = βx + b\n</code></pre>\n<h1 id=\"使用朴素贝叶斯来分类数据\"><a class=\"anchor\" href=\"#使用朴素贝叶斯来分类数据\">#</a> 使用朴素贝叶斯来分类数据</h1>\n<p>朴素分页四是个非常有意思的模型。它类似于 KNN，做了一些假设来简化事实，但是仍然在许多情况下都很好。</p>\n<h2 id=\"准备-10\"><a class=\"anchor\" href=\"#准备-10\">#</a> 准备</h2>\n<p>这个秘籍中，我们会使用朴素贝叶斯来分类文档。我拥有个人经验的一个示例就是，使用会计学中的组成账户描述符的单词，例如应付账款，来判断它属于利润表、现金流转表、还是资产负债表。</p>\n<p>基本理念是使用来自带标签的测试语料库中的词频，来学习文档的分类。之后，我们可以将其用在训练集上来尝试预测标签。</p>\n<p>我们使用 Sklearn 中的 <code>newgroups </code> 数据集来玩转朴素贝叶斯模型。这是有价值的一组数据，所以我们抓取它而不是加载它。我们也将分类限制为 <code>rec.autos </code> 和 <code>rec.motorcycles</code> 。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> fetch_20newsgroups</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> categories <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rec.autos\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rec.motorcycles\"</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> newgroups <span class=\"token operator\">=</span> fetch_20newsgroups<span class=\"token punctuation\">(</span>categories<span class=\"token operator\">=</span>categories<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#take a look </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>newgroups<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>From<span class=\"token punctuation\">:</span> gregl@zimmer<span class=\"token punctuation\">.</span>CSUFresno<span class=\"token punctuation\">.</span>EDU <span class=\"token punctuation\">(</span>Greg Lewis<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Subject<span class=\"token punctuation\">:</span> Re<span class=\"token punctuation\">:</span> WARNING<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>please read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Keywords<span class=\"token punctuation\">:</span> BRICK<span class=\"token punctuation\">,</span> TRUCK<span class=\"token punctuation\">,</span> DANGER </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Nntp<span class=\"token operator\">-</span>Posting<span class=\"token operator\">-</span>Host<span class=\"token punctuation\">:</span> zimmer<span class=\"token punctuation\">.</span>csufresno<span class=\"token punctuation\">.</span>edu </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Organization<span class=\"token punctuation\">:</span> CSU Fresno </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Lines<span class=\"token punctuation\">:</span> <span class=\"token number\">33</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>…<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> newgroups<span class=\"token punctuation\">.</span>target_names<span class=\"token punctuation\">[</span>newgroups<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token string\">'rec.autos'</span></pre></td></tr></table></figure><p>既然我们拥有了 <code>newgroups</code> ，我们需要将每个文档表示为词频向量。这个表示就是朴素贝叶斯名称的来历。模型是 “朴素” 的，不按照任何文档间的单词协方差，来对文档进行分类。这可以认为是可以缺陷，但是朴素贝叶斯已经被证实相当可靠。</p>\n<p>我们需要将数据处理为词频矩阵。这是个稀疏矩阵，当某个单词出现在文档中时，这个单词就有条目。这个矩阵可能非常大，就像这样：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>feature_extraction<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> CountVectorizer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> count_vec <span class=\"token operator\">=</span> CountVectorizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bow <span class=\"token operator\">=</span> count_vec<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>newgroups<span class=\"token punctuation\">.</span>data</pre></td></tr></table></figure><p>这个矩阵是个稀疏矩阵，它的长度是文档数量乘以不同单词的数量。它的值是每个文档中每个单词的频率。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bow <span class=\"token operator\">&lt;</span>1192x19177 sparse matrix of <span class=\"token builtin\">type</span> <span class=\"token string\">'&lt;type '</span>numpy<span class=\"token punctuation\">.</span>int64<span class=\"token string\">'>'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token number\">164296</span> stored elements <span class=\"token keyword\">in</span> Compressed Sparse Row <span class=\"token builtin\">format</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>我们实际上需要将矩阵表示为密集数组，用于朴素贝叶斯对象。所以，让我们将其转换回来。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bow <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>bow<span class=\"token punctuation\">.</span>todense<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>显然，多数元素都是 0，但是我们可能打算重构文档的统计，作为合理性检查。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> words <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>count_vec<span class=\"token punctuation\">.</span>get_feature_names<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> words<span class=\"token punctuation\">[</span>bow<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">u'10pm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'1qh336innfl5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'33'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">u'93740'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">u'___________________________________________________________________'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dtype<span class=\"token operator\">=</span><span class=\"token string\">'&lt;U79'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，这些就是第一个文档的示例了？让我们使用下面的命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'10pm'</span> <span class=\"token keyword\">in</span> newgroups<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">True</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'1qh336innfl5'</span> <span class=\"token keyword\">in</span> newgroups<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token boolean\">True</span></pre></td></tr></table></figure><h2 id=\"操作步骤-10\"><a class=\"anchor\" href=\"#操作步骤-10\">#</a> 操作步骤</h2>\n<p>好的，所以需要比平常更多的时间来准备数据，因为我们处理的文本数据，并不是能够像之前的矩阵那样快速表示。</p>\n<p>但是，既然我们准备好了，我们启动分类器来训练我们的模型。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> naive_bayes </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> clf <span class=\"token operator\">=</span> naive_bayes<span class=\"token punctuation\">.</span>GaussianNB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在我们训练模型之前，让我们将数据集划分为训练集和测试集。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> clf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>bow<span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> newgroups<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> predictions <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>bow<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们在训练集训练了模型，之后预测测试集来尝试判断文章属于哪个分类，让我们获取准确率。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>predictions <span class=\"token operator\">==</span> newgroups<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.92446043165467628</span></pre></td></tr></table></figure><h2 id=\"工作原理-9\"><a class=\"anchor\" href=\"#工作原理-9\">#</a> 工作原理</h2>\n<p>朴素贝叶斯的基本原理，就是我们可以根据特征向量，来估计数据点属于分类的概率（ <code>P(Ci|X)</code> ）。</p>\n<p>这可以使用贝叶斯定期来变形，来变成特征向量的后验概率（ <code>P(X|Ci)</code> ）。如果特征向量的概率最大，那么后延估计就选择这个分类。</p>\n<h2 id=\"更多-4\"><a class=\"anchor\" href=\"#更多-4\">#</a> 更多</h2>\n<p>我们也可以将朴素贝叶斯扩展来执行多类分类。我们不适用高斯可能性，而是使用多项式可能性。</p>\n<p>首先，让我们获取第三个分类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> fetch_20newsgroups </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_categories <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rec.autos\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rec.motorcycles\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     <span class=\"token string\">\"talk.politics.guns\"</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_newgroups <span class=\"token operator\">=</span> fetch_20newsgroups<span class=\"token punctuation\">(</span>categories<span class=\"token operator\">=</span>mn_categories<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们需要将这些东西向量化。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_bow <span class=\"token operator\">=</span> count_vec<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>mn_newgroups<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_bow <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>mn_bow<span class=\"token punctuation\">.</span>todense<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们创建为训练集和测试集创建一个屏蔽数组。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mn_newgroups<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> multinom <span class=\"token operator\">=</span> naive_bayes<span class=\"token punctuation\">.</span>MultinomialNB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> multinom<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>mn_bow<span class=\"token punctuation\">[</span>mn_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mn_newgroups<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span>mn_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mn_predict <span class=\"token operator\">=</span> multinom<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>mn_bow<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mn_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mn_predict <span class=\"token operator\">==</span> mn_newgroups<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mn_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0.96594778660612934</span></pre></td></tr></table></figure><p>我们做的很好，完全不会惊讶。我们在两个分类的情况下表现不错，由于 <code>talk.politics.guns</code>  分类和其它两个正交，我们应该也表现不错。</p>\n<h1 id=\"标签传递半监督学习\"><a class=\"anchor\" href=\"#标签传递半监督学习\">#</a> 标签传递，半监督学习</h1>\n<p>标签传递是个半监督学习技巧，它利用带标签和不带标签的数据，来了解不带标签的数据。通常，受益于分类算法的数据是难以标注的。例如，标注数据的开销可能非常大，所以手动标注一个子集边角高效。也就是说，对于公司雇佣分类学家来说，存在可能较慢，但是在发展的支持。</p>\n<h2 id=\"准备-11\"><a class=\"anchor\" href=\"#准备-11\">#</a> 准备</h2>\n<p>另一个问题范围就是截尾数据。你可以想象一种情况，其中时间的边界会影响你收集数据的能力。也就是说，例如，你将试验药物给病人，并测量它们。有些时候，你能够测量药物的结果。如果碰巧足够快，但是你可能打算预测药物的结果，它们的反应时间较慢。这些药物可能对一些病人有致命的反应，并且需要采取救生措施。</p>\n<h2 id=\"操作步骤-11\"><a class=\"anchor\" href=\"#操作步骤-11\">#</a> 操作步骤</h2>\n<p>为了表示半监督或者截尾数据，我们需要做一些简单的数据处理。首先，我们会浏览一个简单的示例，之后转向一些更加困难的情况。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> d <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由于我们会将数据搞乱，我们做一个备份，并向标签名称数组的副本添加一个 <code>unlabeled</code>  成员。它会使数据的识别变得容易。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>target_names<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> names </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'setosa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'versicolor'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virginica'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       dtype<span class=\"token operator\">=</span><span class=\"token string\">'|S10'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在使用 <code>-1</code>  更新 <code>y</code> ，这就是未标注情况的记号。这也是我们将 <code>unlabeled</code>  添加到末尾的原因。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>我们的数据现在拥有一系列负值（ <code>-1</code> ），散布在真正数据当中：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> names<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'setosa'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token string\">'setosa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'setosa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'unlabeled'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       dtype<span class=\"token operator\">=</span><span class=\"token string\">'|S10'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们显然拥有一大堆未标注的数据，现在的目标是使用 <code>LabelPropagation </code> 来预测标签：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> semi_supervised </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lp <span class=\"token operator\">=</span> semi_supervised<span class=\"token punctuation\">.</span>LabelPropagation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lp<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LabelPropagation<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> gamma<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> kernel<span class=\"token operator\">=</span><span class=\"token string\">'rbf'</span><span class=\"token punctuation\">,</span> max_iter<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                 n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> preds <span class=\"token operator\">=</span> lp<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>preds <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">0.98666666666666669</span></pre></td></tr></table></figure><p>并不是太坏。我们使用了所有数据，所以这是一种作弊。并且， <code>iris</code>  数据集是个良好分隔的数据集。</p>\n<p>虽然我们完成了，让我们看看 <code>LabelSpreading</code> ，它是 <code>LabelPropagation</code>  的姐妹类。我们会在 “工作原理” 一节给出 <code>LabelSpreading</code>  和 <code>LabelPropagation</code>  的技术差异，但是很容易看出它们及其相似。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ls <span class=\"token operator\">=</span> semi_supervised<span class=\"token punctuation\">.</span>LabelSpreading<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>观察它的工作原理， <code>LabelSpreading </code> 更加健壮和嘈杂。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ls<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LabelSpreading<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> gamma<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> kernel<span class=\"token operator\">=</span><span class=\"token string\">'rbf'</span><span class=\"token punctuation\">,</span> max_iter<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>               n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> d<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0.96666666666666667</span></pre></td></tr></table></figure><p>不要认为标签传播算法丢失了几个指标，它就表现得更差了。关键是，我们可能提供一些预测训练集的能力，并且适用于更广泛的环境。</p>\n<h2 id=\"工作原理-10\"><a class=\"anchor\" href=\"#工作原理-10\">#</a> 工作原理</h2>\n<p>标签传递的原理是，创建数据点的图，每条边上的权重为：</p>\n<pre><code>wij(θ) = dij / θ^2\n</code></pre>\n<p>这个算法之后的原理是，数据点将它们的标签传递给未标记的数据点。这个传递部分由边的权重决定。</p>\n<p>边上的权重可以放在转移概率矩阵中。我们可以迭代来估计实际的标签。</p>\n",
            "tags": [
                "计算机科学",
                "机器学习",
                "Scikit-learn Cookbook",
                "机器学习",
                "Scikit-learn Cookbook"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC3%E7%AB%A0%20%E4%BD%BF%E7%94%A8%E8%B7%9D%E7%A6%BB%E5%90%91%E9%87%8F%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B/",
            "url": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC3%E7%AB%A0%20%E4%BD%BF%E7%94%A8%E8%B7%9D%E7%A6%BB%E5%90%91%E9%87%8F%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B/",
            "title": "第3章 使用距离向量构建模型",
            "date_published": "2021-12-03T10:44:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd2l6YXJkZm9yY2VsL3NrbGVhcm4tY2I=\">https://gitee.com/wizardforcel/sklearn-cb</span><br />\n 未经作者的许可，此代码仅用于学习，不能用于其他用途。</p>\n</div>\n<h1 id=\"第三章-使用距离向量构建模型\"><a class=\"anchor\" href=\"#第三章-使用距离向量构建模型\">#</a> 第三章 使用距离向量构建模型</h1>\n<p>这一章中，我们会涉及到聚类。聚类通常和非监督技巧组合到一起。这些技巧假设我们不知道结果变量。这会使结果模糊，以及实践客观。但是，聚类十分有用。我们会看到，我们可以使用聚类，将我们的估计在监督设置中 “本地化”。这可能就是聚类非常高效的原因。它可以处理很大范围的情况，通常，结果也不怎么正常。</p>\n<p>这一章中我们会浏览大量应用，从图像处理到回归以及离群点检测。通过这些应用，我们会看到聚类通常可以通过概率或者优化结构来观察。不同的解释会导致不同的权衡。我们会看到，如何训练模型，以便让工具尝试不同模型，在面对聚类问题的时候。</p>\n<h2 id=\"使用-kmeans-对数据聚类\"><a class=\"anchor\" href=\"#使用-kmeans-对数据聚类\">#</a> 使用 KMeans 对数据聚类</h2>\n<p>聚类是个非常实用的技巧。通常，我们在采取行动时需要分治。考虑公司的潜在客户列表。公司可能需要将客户按类型分组，之后为这些分组划分职责。聚类可以使这个过程变得容易。</p>\n<p>KMeans 可能是最知名的聚类算法之一，并且也是最知名的无监督学习技巧之一。</p>\n<h3 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h3>\n<p>首先，让我们看一个非常简单的聚类，之后我们再讨论 KMeans 如何工作。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> blobs<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样，由于我们绘制一些图表，导入 <code>matplotlib</code> ，像这样：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr></table></figure><h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<p>我们打算浏览一个简单的例子，它对伪造数据进行聚类。之后我们会稍微谈论一下，KMeans 如何工作，来寻找最优的块数量。</p>\n<p>看一看我们的数据块，我们可以看到，有三个不同的簇。</p>\n<pre><code>&gt;&gt;&gt; f, ax = plt.subplots(figsize=(7.5, 7.5)) \n&gt;&gt;&gt; ax.scatter(blobs[:, 0], blobs[:, 1], color=rgb[classes]) \n&gt;&gt;&gt; rgb = np.array(['r', 'g', 'b']) \n&gt;&gt;&gt; ax.set_title(&quot;Blobs&quot;)\n</code></pre>\n<p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-1-1.jpg\" alt=\"\" /></p>\n<p>现在我们可以使用 KMeans 来寻找这些簇的形心。第一个例子中，我们假装知道有三个形心。</p>\n<pre><code>&gt;&gt;&gt; from sklearn.cluster import KMeans \n&gt;&gt;&gt; kmean = KMeans(n_clusters=3) \n&gt;&gt;&gt; kmean.fit(blobs) \nKMeans(copy_x=True, init='k-means++', max_iter=300, n_clusters=3,\n       n_init=10, n_jobs=1, precompute_distances=True,\n       random_state=None, tol=0.0001, verbose=0)\n\n&gt;&gt;&gt; kmean.cluster_centers_ array([[ 0.47819567,  1.80819197],\n\n[ 0.08627847,  8.24102715], \n[ 5.2026125 ,  7.86881767]])\n\n&gt;&gt;&gt; f, ax = plt.subplots(figsize=(7.5, 7.5)) \n&gt;&gt;&gt; ax.scatter(blobs[:, 0], blobs[:, 1], color=rgb[classes]) \n&gt;&gt;&gt; ax.scatter(kmean.cluster_centers_[:, 0],\n               kmean.cluster_centers_[:, 1], marker='*', s=250,\n               color='black', label='Centers')\n&gt;&gt;&gt; ax.set_title(&quot;Blobs&quot;) \n&gt;&gt;&gt; ax.legend(loc='best')\n</code></pre>\n<p>下面的截图展示了输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-1-2.jpg\" alt=\"\" /></p>\n<p>其它属性也很实用。例如， <code>labels_</code> 属性会产生每个点的预期标签。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmean<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>int32<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以检查，例如， <code>labels_</code> 是否和类别相同，但是由于 KMeans 不知道类别是什么，它不能给两个类别分配相同的索引值：</p>\n<pre><code>&gt;&gt;&gt; classes[:5] \narray([0, 0, 2, 2, 0])\n</code></pre>\n<p>将类别中的 <code>1</code>  变成 <code>0</code>  来查看是否与 <code>labels_</code> 匹配。</p>\n<p><code>transform</code>  函数十分有用，它会输出每个点到形心的距离。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmean<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">6.47297373</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.39043536</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">6.4936008</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">6.78947843</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.51914705</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.67659072</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">7.24414567</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">5.42840092</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.76940367</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">8.56306214</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">5.78156881</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.89062961</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">7.32149254</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.89737788</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">5.12246797</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"工作原理\"><a class=\"anchor\" href=\"#工作原理\">#</a> 工作原理</h3>\n<p>KMeans 实际上是个非常简单的算法，它使簇中的点到均值的距离的平方和最小。</p>\n<p>首先它会设置一个预定义的簇数量 <code>K</code> ，之后执行这些事情：</p>\n<ul>\n<li>将每个数据点分配到最近的簇中。</li>\n<li>通过计算初中每个数据点的均值，更新每个形心。</li>\n</ul>\n<p>直到满足特定条件。</p>\n<h2 id=\"优化形心数量\"><a class=\"anchor\" href=\"#优化形心数量\">#</a> 优化形心数量</h2>\n<p>形心难以解释，并且也难以判断是否数量正确。理解你的数据是否是未分类的十分重要，因为这会直接影响我们可用的评估手段。</p>\n<h3 id=\"准备-2\"><a class=\"anchor\" href=\"#准备-2\">#</a> 准备</h3>\n<p>为无监督学习评估模型表现是个挑战。所以，在了解真实情况的时候， <code>sklearn</code>  拥有多种方式来评估聚类，但在不了解时就很少。</p>\n<p>我们会以一个简单的簇模型开始，并评估它的相似性。这更多是出于机制的目的，因为测量一个簇的相似性在寻找簇数量的真实情况时显然没有用。</p>\n<h3 id=\"操作步骤-2\"><a class=\"anchor\" href=\"#操作步骤-2\">#</a> 操作步骤</h3>\n<p>为了开始，我们会创建多个数据块，它们可用于模拟数据簇。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> blobs<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> KMeans </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmean <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmean<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>KMeans<span class=\"token punctuation\">(</span>copy_x<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> init<span class=\"token operator\">=</span><span class=\"token string\">'k-means++'</span><span class=\"token punctuation\">,</span> max_iter<span class=\"token operator\">=</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       n_init<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> precompute_distances<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>首先，我们查看轮廓（Silhouette）距离。轮廓距离是簇内不相似性、最近的簇间不相似性、以及这两个值最大值的比值。它可以看做簇间分离程度的度量。</p>\n<p>让我们看一看数据点到形心的距离分布，理解轮廓距离非常有用。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> metrics </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> silhouette_samples <span class=\"token operator\">=</span> metrics<span class=\"token punctuation\">.</span>silhouette_samples<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                         kmean<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>column_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> silhouette_samples<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.87617292</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.89082363</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.88544994</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.91478369</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.91308287</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hist of Silhouette Samples\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>silhouette_samples<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-2-1.jpg\" alt=\"\" /></p>\n<p>要注意，通常接近 1 的系数越高，分数就越高。</p>\n<h3 id=\"工作原理-2\"><a class=\"anchor\" href=\"#工作原理-2\">#</a> 工作原理</h3>\n<p>轮廓系数的均值通常用于描述整个模型的拟合度。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> silhouette_samples<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.57130462953339578</span></pre></td></tr></table></figure><p>这十分普遍，事实上， <code>metrics</code>  模块提供了一个函数来获得刚才的值。</p>\n<p>现在，让我们训练多个簇的模型，并看看平均得分是什么样：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># first new ground truth </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> blobs<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sillhouette_avgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># this could take a while </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       kmean <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       sillhouette_avgs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">.</span>silhouette_score<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                               kmean<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>sillhouette_avgs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-2-2.jpg\" alt=\"\" /></p>\n<p>这个绘图表明，轮廓均值随着形心数量的变化情况。我们可以看到最优的数量是 3，根据所生成的数据。但是最优的数量看起来是 6 或者 7。这就是聚类的实际情况，十分普遍，我们不能获得正确的簇数量，我们只能估计簇数量的近似值。</p>\n<h2 id=\"评估聚类的正确性\"><a class=\"anchor\" href=\"#评估聚类的正确性\">#</a> 评估聚类的正确性</h2>\n<p>我们之前讨论了不知道真实情况的条件下的聚类评估。但是，我们还没有讨论簇已知条件下的 KMeans 评估。在许多情况下，这都是不可知的，但是如果存在外部的标注，我们就会知道真实情况，或者至少是代理。</p>\n<h3 id=\"准备-3\"><a class=\"anchor\" href=\"#准备-3\">#</a> 准备</h3>\n<p>所以，让我们假设有一个世界，其中我们有一些外部代理，向我们提供了真实情况。</p>\n<p>我们会创建一个简单的数据集，使用多种方式评估相对于真实庆康的正确性。之后讨论它们。</p>\n<h3 id=\"操作步骤-3\"><a class=\"anchor\" href=\"#操作步骤-3\">#</a> 操作步骤</h3>\n<p>在我们开始度量之前，让我们先查看数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       p <span class=\"token operator\">=</span> blobs<span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       label<span class=\"token operator\">=</span><span class=\"token string\">\"Cluster &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cluster With Ground Truth\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"9485OS_03-16\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-3-1.jpg\" alt=\"\" /></p>\n<p>既然我们已经训练了模型，让我们看看簇的形心：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       p <span class=\"token operator\">=</span> blobs<span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>        label<span class=\"token operator\">=</span><span class=\"token string\">\"Cluster &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               color<span class=\"token operator\">=</span><span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               label<span class=\"token operator\">=</span><span class=\"token string\">'Centers'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Cluster With Ground Truth\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"9485OS_03-17\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-3-2.jpg\" alt=\"\" /></p>\n<p>既然我们能够将聚类表现看做分类练习，在其语境中有用的方法在这里也有用：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>labels_ <span class=\"token operator\">==</span> ground_truth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0.0778443113772</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0.990990990991</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0.0570570570571</span></pre></td></tr></table></figure><p>很显然我们有一些错乱的簇。所以让我们将其捋直，之后我们查看准确度。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_ground_truth <span class=\"token operator\">=</span> ground_truth<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_ground_truth<span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_ground_truth<span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>labels_ <span class=\"token operator\">==</span> new_ground_truth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>ground_truth <span class=\"token operator\">==</span> i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">0.919161676647</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0.990990990991</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">0.90990990991</span></pre></td></tr></table></figure><p>所以我们 90% 的情况下都是正确的。第二个相似性度量是互信息（ mutual information score）得分。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> metrics</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> metrics<span class=\"token punctuation\">.</span>normalized_mutual_info_score<span class=\"token punctuation\">(</span>ground_truth<span class=\"token punctuation\">,</span> kmeans<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0.78533737204433651</span></pre></td></tr></table></figure><p>分数靠近 0，就说明标签的分配可能不是按照相似过程生成的。但是分数靠近 1，就说明两个标签有很强的一致性。</p>\n<p>例如，让我们看一看互信息分数自身的情况：</p>\n<pre><code>&gt;&gt;&gt; metrics.normalized_mutual_info_score(ground_truth, ground_truth)\n\n1.0 \n</code></pre>\n<p>通过名称，我们可以分辨出可能存在未规范化的 <code> mutual_info_score</code> ：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> metrics<span class=\"token punctuation\">.</span>mutual_info_score<span class=\"token punctuation\">(</span>ground_truth<span class=\"token punctuation\">,</span> kmeans<span class=\"token punctuation\">.</span>labels_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0.78945287371677486</span></pre></td></tr></table></figure><p>这非常接近了。但是，规范化的互信息是互信息除以每个真实值和标签的熵的乘积的平方根。</p>\n<h3 id=\"更多\"><a class=\"anchor\" href=\"#更多\">#</a> 更多</h3>\n<p>有一个度量方式我们尚未讨论，并且不依赖于真实情况，就是惯性（inertia）度量。当前，它作为一种度量并没有详细记录。但是，它是 KMeans 中最简单的度量。</p>\n<p>惯性是每个数据点和它所分配的簇的平方差之和。我们可以稍微使用 NumPy 来计算它：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmeans<span class=\"token punctuation\">.</span>inertia_</pre></td></tr></table></figure><h2 id=\"使用-minibatch-kmeans-处理更多数据\"><a class=\"anchor\" href=\"#使用-minibatch-kmeans-处理更多数据\">#</a> 使用 MiniBatch KMeans 处理更多数据</h2>\n<p>KMeans 是一个不错的方法，但是不适用于大量数据。这是因为 KMenas 的复杂度。也就是说，我们可以使用更低的算法复杂度来获得近似解。</p>\n<h3 id=\"准备-4\"><a class=\"anchor\" href=\"#准备-4\">#</a> 准备</h3>\n<p>MiniBatch Kmeans 是 KMeans 的更快实现。KMeans 的计算量非常大，问题是 NPH 的。</p>\n<p>但是，使用 MiniBatch KMeans，我们可以将 KMeans 加速几个数量级。这通过处理多个子样本来完成，它们叫做 MiniBatch。如果子样本是收敛的，并且拥有良好的初始条件，就得到了常规 KMeans 的近似解。</p>\n<h3 id=\"操作步骤-4\"><a class=\"anchor\" href=\"#操作步骤-4\">#</a> 操作步骤</h3>\n<p>让我们对 MiniBatch 聚类做一个概要的性能分析。首先，我们观察总体的速度差异，之后我们会观察估计中的误差。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> blobs<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> KMeans<span class=\"token punctuation\">,</span> MiniBatchKMeans</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmeans <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span><span class=\"token operator\">></span> minibatch <span class=\"token operator\">=</span> MiniBatchKMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>要理解这些度量的目的是暴露问题。所以，需要多加小心，来确保跑分的高精度性。这个话题还有大量可用的信息。如果你真的希望了解，MiniBatch KMeans 为何在粒度上更具优势，最好还是要阅读它们。</p>\n</blockquote>\n<p>既然准备已经完成，我们可以测量时间差异：</p>\n<pre><code>&gt;&gt;&gt; %time kmeans.fit(blobs) #IPython Magic CPU times: user 8.17 s, sys: 881 ms, total: 9.05 s Wall time: 9.97 s\n\n&gt;&gt;&gt; %time minibatch.fit(blobs) CPU times: user 4.04 s, sys: 90.1 ms, total: 4.13 s Wall time: 4.69 s \n</code></pre>\n<p>CPU 时间上有很大差异。聚类性能上的差异在下面展示：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1.10522173</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5.59610761</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8.35565134</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> minibatch<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1.12071187</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5.61215116</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">8.32015587</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可能要问的下一个问题就是，两个形心距离多远。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> pairwise </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                 minibatch<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.03305309</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>看起来十分接近了。对角线包含形心的差异：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span>pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             minibatch<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.04191979</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.03133651</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.04342707</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"工作原理-3\"><a class=\"anchor\" href=\"#工作原理-3\">#</a> 工作原理</h3>\n<p>这里的批次就是关键。批次被迭代来寻找批次均值。对于下一次迭代来说，前一个批次的均值根据当前迭代来更新。有多种选项，用于控制 KMeans 的通用行为，和决定 MiniBatch KMeans 的参数。</p>\n<p><code> batch_size</code>  参数决定批次应为多大。只是玩玩的话，我们可以运行  MiniBatch，但是，此时我们将批次数量设置为和数据集大小相同。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> minibatch <span class=\"token operator\">=</span> MiniBatchKMeans<span class=\"token punctuation\">(</span>batch_size<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">%</span>time minibatch<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>blobs<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CPU times<span class=\"token punctuation\">:</span> user <span class=\"token number\">34.6</span> s<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">:</span> <span class=\"token number\">3.17</span> s<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">:</span> <span class=\"token number\">37.8</span> s Wall time<span class=\"token punctuation\">:</span> <span class=\"token number\">44.6</span> s</pre></td></tr></table></figure><p>显然，这就违背了问题的核心，但是这的确展示了重要东西。选择差劲的初始条件可能影响我们的模型，特别是聚类模型的收敛。使用 MiniBatch KMeans，全局最优是否能达到，是不一定的。</p>\n<h2 id=\"使用-kmeans-聚类来量化图像\"><a class=\"anchor\" href=\"#使用-kmeans-聚类来量化图像\">#</a> 使用 KMeans 聚类来量化图像</h2>\n<p>图像处理是个重要的话题，其中聚类有一些应用。值得指出的是，Python 中有几种非常不错的图像处理库。Scikit-image 是 Scikit-learn 的 “姐妹” 项目。如果你打算做任何复杂的事情，都值得看一看它。</p>\n<h3 id=\"准备-5\"><a class=\"anchor\" href=\"#准备-5\">#</a> 准备</h3>\n<p>我们在这篇秘籍中会有一些乐趣。目标是使用聚类来把图像变模糊。</p>\n<p>首先，我们要利用 SciPy 来读取图像。图像翻译为三维数组， <code>x</code>  和 <code>y</code>  坐标描述了高度和宽度，第三个维度表示每个图像的 RGB 值。</p>\n<pre><code># in your terminal \n$ wget http://blog.trenthauck.com/assets/headshot.jpg\n</code></pre>\n<h3 id=\"操作步骤-5\"><a class=\"anchor\" href=\"#操作步骤-5\">#</a> 操作步骤</h3>\n<p>现在，让我们在 Python 中读取图像：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> ndimage </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> img <span class=\"token operator\">=</span> ndimage<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"headshot.jpg\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面就是图像：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-5-1.jpg\" alt=\"\" /></p>\n<p>嘿，这就是（年轻时期的）作者。</p>\n<p>既然我们已经有了图像，让我们检查它的维度：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> img<span class=\"token punctuation\">.</span>shape </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">420</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了实际量化图像，我们需要将其转换为二维数组，长为 <code>420x420</code> ，宽为 RGB 值。思考它的更好的方法，是拥有一堆三维空间中的数据点，并且对点进行聚类来降低图像中的不同颜色的数量 -- 这是一个简单的量化方式。</p>\n<p>首先，让我们使数组变形，它是个 NumPy 数组，所以非常简单：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>shape </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> long_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> long_img<span class=\"token punctuation\">.</span>shape <span class=\"token punctuation\">(</span><span class=\"token number\">176400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在我们开始聚类过程。首先，让我们导入聚类模块，并创建 KMeans 对象。我们传入 <code>n_clusters=5</code> ，使我们拥有 5 个簇，或者实际上是 5 个不同颜色。</p>\n<p>这是个不错的秘籍，我们使用前面提到的轮廓距离：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cluster </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> k_means <span class=\"token operator\">=</span> cluster<span class=\"token punctuation\">.</span>KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> k_means<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>long_img<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们已经训练了 KMeans 对象，让我们看看我们的眼色：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> centers <span class=\"token operator\">=</span> k_means<span class=\"token punctuation\">.</span>cluster_centers_ </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> centers </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">142.58775848</span><span class=\"token punctuation\">,</span> <span class=\"token number\">206.12712986</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">226.04416873</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">[</span>  <span class=\"token number\">86.29356543</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">68.86312505</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">54.04770507</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">194.36182899</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">172.19845258</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">149.65603813</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">[</span>  <span class=\"token number\">24.67768412</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">20.45778933</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">16.19698314</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">149.27801776</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">132.19850659</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">115.32729167</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"工作原理-4\"><a class=\"anchor\" href=\"#工作原理-4\">#</a> 工作原理</h3>\n<p>既然我们拥有了形心，我们需要的下一个东西就是标签。它会告诉我们，哪个点关联哪个簇。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> labels <span class=\"token operator\">=</span> k_means<span class=\"token punctuation\">.</span>labels_ </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> labels<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>int32<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这个时候，我们需要最简的 NumPy 操作，之后是一个变形，我们就拥有的新的图像：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>centers<span class=\"token punctuation\">[</span>labels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面就是产生的图像：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-5-2.jpg\" alt=\"\" /></p>\n<h2 id=\"寻找特征空间中的最接近对象\"><a class=\"anchor\" href=\"#寻找特征空间中的最接近对象\">#</a> 寻找特征空间中的最接近对象</h2>\n<p>有时，最简单的事情就是求出两个对象之间的距离。我们刚好需要寻找一些距离的度量，计算成对（Pairwise）距离，并将结果与我们的预期比较。</p>\n<h3 id=\"准备-6\"><a class=\"anchor\" href=\"#准备-6\">#</a> 准备</h3>\n<p>Scikit-learn 中，有个叫做 <code>sklearn.metrics.pairwise</code>  的底层工具。它包含一些服务函数，计算矩阵 <code>X</code>  中向量之间的距离，或者 <code>X</code>  和 <code>Y</code>  中的向量距离。</p>\n<p>这对于信息检索来说很实用。例如，提供一组客户信息，带有属性 <code>X</code> ，我们可能希望选取有个客户代表，并找到与这个客户最接近的客户。实际上，我们可能希望将客户按照相似性度量的概念，使用距离函数来排序。相似性的质量取决于特征空间选取，以及我们在空间上所做的任何变换。</p>\n<h3 id=\"操作步骤-6\"><a class=\"anchor\" href=\"#操作步骤-6\">#</a> 操作步骤</h3>\n<p>我们会使用 <code>pairwise_distances</code>  函数来判断对象的接近程度。要记住，接近程度就像我们用于聚类 / 分类的距离函数。</p>\n<p>首先，让我们从 <code>metric</code>  模块导入 <code>pairwise_distances</code>  函数，并创建用于操作的数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> pairwise </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> points<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>用于检查距离的最简单方式是 <code>pairwise_distances</code> ：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> distances <span class=\"token operator\">=</span> pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>distances</code>  是个  <code>NxN</code>  的矩阵，对角线为 0。在最简单的情况中，让我们先看看每个点到第一个点的距离：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在我们可以查找最接近于第一个点的点：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> distances<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.82643041</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.23751545</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.17612135</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14.61927874</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>将点按照接近程度排序，很容易使用 <code>np.argsort</code>  做到：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ranks <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ranks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>argsort</code>  的好处是，现在我们可以排序我们的 <code>points</code>  矩阵，来获得真实的点。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> points<span class=\"token punctuation\">[</span>ranks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">8.96147382</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.90405304</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">8.75417014</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.76289919</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">8.78902665</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2.27859923</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">8.59694131</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2.10057667</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">8.70949958</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2.30040991</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>观察接近的点是什么样子，可能十分有用。结果在意料之中：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-6-1.jpg\" alt=\"\" /></p>\n<h3 id=\"工作原理-5\"><a class=\"anchor\" href=\"#工作原理-5\">#</a> 工作原理</h3>\n<p>给定一些距离函数，每个点都以成对函数来度量。通常为欧几里得距离，它是：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-6-2.jpg\" alt=\"\" /></p>\n<p>详细来说，它计算了两个向量每个分量的差，计算它们的平方，求和，之后计算它的平方根。这看起来很熟悉，因为在计算均方误差的时候，我们使用的东西很相似。如果我们计算了平方根，就一样了。实际上，经常使用的度量是均方根误差（RMSE），它就是距离函数的应用。</p>\n<p>在 Python 中，这看起来是：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">euclid_distances</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> euclid_distances<span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">11.826430406213145</span></pre></td></tr></table></figure><p>Scikit-learn 中存在一些其他函数，但是 Scikit-learn 也会使用 SciPy 的距离函数。在本书编写之时，Scikit-learn 距离函数支持稀疏矩阵。距离函数的更多信息请查看 SciPy 文档。</p>\n<ul>\n<li><code>cityblock</code></li>\n<li><code>cosine</code></li>\n<li><code>euclidean</code></li>\n<li><code>l1</code></li>\n<li><code>l2</code></li>\n<li><code>manhattan</code></li>\n</ul>\n<p>我们现在可以解决问题了。例如，如果我们站在原点处的格子上，并且线是街道，为了到达点 <code>(5,5)</code> ，我们需要走多远呢？</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> metric<span class=\"token operator\">=</span><span class=\"token string\">'cityblock'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">10</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"更多-2\"><a class=\"anchor\" href=\"#更多-2\">#</a> 更多</h3>\n<p>使用成对距离，我们可以发现位向量之间的相似性。这是汉明距离的事情，它定义为：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-6-3.jpg\" alt=\"\" /></p>\n<p>使用下列命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>binomial<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>  <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> metric<span class=\"token operator\">=</span><span class=\"token string\">'hamming'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span>  <span class=\"token number\">0.25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token punctuation\">[</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"使用高斯混合模型的概率聚类\"><a class=\"anchor\" href=\"#使用高斯混合模型的概率聚类\">#</a> 使用高斯混合模型的概率聚类</h2>\n<p>在 KMeans 中，我们假设簇的方差是相等的。这会导致空间的细分，这决定了簇如何被分配。但是，如果有一种场景，其中方差不是相等的，并且每个簇中的点拥有一个与之相关的概率，会怎么样？</p>\n<h3 id=\"准备-7\"><a class=\"anchor\" href=\"#准备-7\">#</a> 准备</h3>\n<p>有一种更加概率化的方式，用于查看 KMeans 聚类。KMeans 聚类相当于将协方差矩阵 <code>S</code>  应用于高斯混合模型，这个矩阵可以分解为单位矩阵成误差。对于每个簇，协方差结构是相同的。这就产生了球形聚类。</p>\n<p>但是，如果我们允许 <code>S</code>  变化，就可以估计 GMM，并将其用于预测。我们会以单变量的角度看到它的原理，之后扩展为多个维度。</p>\n<h3 id=\"操作步骤-7\"><a class=\"anchor\" href=\"#操作步骤-7\">#</a> 操作步骤</h3>\n<p>首先，我们需要创建一些数据。例如，让我们模拟女性和男性的身高。我们会在整个秘籍中使用这个例子。这是个简单的例子，但是会展示出我们在 N 维空间中想要完成的东西，这比较易于可视化：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> in_m <span class=\"token operator\">=</span> <span class=\"token number\">72</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> in_w <span class=\"token operator\">=</span> <span class=\"token number\">66</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s_m <span class=\"token operator\">=</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s_w <span class=\"token operator\">=</span> s_m</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span>in_m<span class=\"token punctuation\">,</span> s_m<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span>in_w<span class=\"token punctuation\">,</span> s_w<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of Heights\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Men\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Women\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-7-1.jpg\" alt=\"\" /></p>\n<p>下面，我们的兴趣是，对分组二次抽样，训练分布，之后预测剩余分组。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> random_sample <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>m<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_test <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>random_sample<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_train <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>random_sample<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_test <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>random_sample<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_train <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>random_sample<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>现在我们需要获得男性和女性高度的经验分布，基于训练集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> stats </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_pdf <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>m_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_pdf <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>w_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> w_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>对于测试集，我们要计算，基于数据点从每个分布中生成的概率，并且最可能的分布会分配合适的标签。当然，我们会看到有多么准确。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.043532673457165431</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">9.2341848872766183e-07</span></pre></td></tr></table></figure><p>要注意概率中的差异。</p>\n<p>假设当男性的概率更高时，我们会猜测，但是如果女性的概率更高，我们会覆盖它。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_m <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>m_test<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_m<span class=\"token punctuation\">[</span>m_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>m_test<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> w_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>m_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>显然，问题就是我们有多么准确。由于正确情况下 <code>guesses_m</code>  为 1，否则为 0，我们计算向量的均值来获取准确度。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_m<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.93775100401606426</span></pre></td></tr></table></figure><p>不是太糟。现在，来看看我们在女性的分组中做的有多好，使用下面的命令：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_w <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>w_test<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_w<span class=\"token punctuation\">[</span>m_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>w_test<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> w_pdf<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>w_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> guesses_w<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0.93172690763052213</span></pre></td></tr></table></figure><p>让我们允许两组间的方差不同。首先，创建一些新的数组：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s_m <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s_w <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span>in_m<span class=\"token punctuation\">,</span> s_m<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span>in_w<span class=\"token punctuation\">,</span> s_w<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>之后，创建训练集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_test <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>random_sample<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_train <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>random_sample<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_test <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>random_sample<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_train <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>random_sample<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of Heights\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>m_train<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Men\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>w_train<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Women\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们看看男性和女性之间的方差差异：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-7-2.jpg\" alt=\"\" /></p>\n<p>现在我们可以创建相同的 PDF：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> m_pdf <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>m_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> w_pdf <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>w_train<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> w_train<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-7-3.jpg\" alt=\"\" /></p>\n<p>你可以在多维空间中想象他：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> class_A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> class_B <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>class_A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> class_A<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>class_B<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> class_B<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-7-3.jpg\" alt=\"\" /></p>\n<h3 id=\"工作原理-6\"><a class=\"anchor\" href=\"#工作原理-6\">#</a> 工作原理</h3>\n<p>好的，所以既然我们看过了，我们基于分布对点分类的方式，让我们看看如何在 Scikit 中首先：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>mixture <span class=\"token keyword\">import</span> GMM </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gmm <span class=\"token operator\">=</span> GMM<span class=\"token punctuation\">(</span>n_components<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>row_stack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>class_A<span class=\"token punctuation\">,</span> class_B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>由于我们是小巧的数据科学家，我们创建训练集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gmm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> GMM<span class=\"token punctuation\">(</span>covariance_type<span class=\"token operator\">=</span><span class=\"token string\">'diag'</span><span class=\"token punctuation\">,</span> init_params<span class=\"token operator\">=</span><span class=\"token string\">'wmc'</span><span class=\"token punctuation\">,</span> min_covar<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     n_components<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n_init<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n_iter<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span><span class=\"token string\">'wmc'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>   thresh<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>训练和预测的完成方式，和 Scikit-learn 的其它对象相同。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gmm<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gmm<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然模型已经训练了，有一些值得一看的其它方法。</p>\n<p>例如，使用 <code>score_examples</code> ，我们实际上可以为每个标签获得每个样例的可能性。</p>\n<h2 id=\"将-kmeans-用于离群点检测\"><a class=\"anchor\" href=\"#将-kmeans-用于离群点检测\">#</a> 将 KMeans 用于离群点检测</h2>\n<p>这一章中，我们会查看 Kmeans 离群点检测的机制和正义。它对于隔离一些类型的错误很实用，但是使用时应多加小心。</p>\n<h3 id=\"准备-8\"><a class=\"anchor\" href=\"#准备-8\">#</a> 准备</h3>\n<p>这个秘籍中，我们会使用 KMeans，对簇中的点执行离群点检测。要注意，提及离群点和离群点检测时有很多 “阵营”。以便面，我们可能通过移除离群点，来移除由数据生成过程生成的点。另一方面，离群点可能来源于测量误差或一些其它外部因素。</p>\n<p>这就是争议的重点。这篇秘籍的剩余部分有关于寻找离群点。我们的假设是，我们移除离群点的选择是合理的。</p>\n<p>离群点检测的操作是，查找簇的形心，之后通过点到形心的距离来识别潜在的离群点。</p>\n<h3 id=\"操作步骤-8\"><a class=\"anchor\" href=\"#操作步骤-8\">#</a> 操作步骤</h3>\n<p>首先，我们会生成 100 个点的单个数据块，之后我们会识别 5 个离形心最远的点。它们就是潜在的离群点。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_blobs </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> make_blobs<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> centers<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr></table></figure><p>非常重要的是，Kmeans 聚类只有一个形心。这个想法类似于用于离群点检测的单类 SVM。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cluster <span class=\"token keyword\">import</span> KMeans </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmeans <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kmeans<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，让我们观察绘图。对于那些远离中心的点，尝试猜测哪个点会识别为五个离群点之一：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Blob\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Points'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                label<span class=\"token operator\">=</span><span class=\"token string\">'Centroid'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面就是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-8-1.jpg\" alt=\"\" /></p>\n<p>现在，让我们识别五个最接近的点：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> distances <span class=\"token operator\">=</span> kmeans<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># argsort returns an array of indexes which will sort the array in ascending order </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># so we reverse it via [::-1] and take the top five with [:5] </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sorted_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>distances<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>现在，让我们看看哪个点离得最远：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Single Cluster\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Points'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                label<span class=\"token operator\">=</span><span class=\"token string\">'Centroid'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>sorted_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span>sorted_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                label<span class=\"token operator\">=</span><span class=\"token string\">'Extreme Value'</span><span class=\"token punctuation\">,</span> edgecolors<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                facecolors<span class=\"token operator\">=</span><span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-8-2.jpg\" alt=\"\" /></p>\n<p>如果我们喜欢的话，移除这些点很容易。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> sorted_idx<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样，移除这些点之后，形心明显变化了。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_kmeans <span class=\"token operator\">=</span> KMeans<span class=\"token punctuation\">(</span>n_clusters<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_kmeans<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>new_X<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们将旧的和新的形心可视化：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Extreme Values Removed\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>new_X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> new_X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Pruned Points'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Old Centroid'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>               color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>new_kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               new_kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'New Centroid'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               color<span class=\"token operator\">=</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面是输出：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-8-3.jpg\" alt=\"\" /></p>\n<p>显然，形心没有移动多少，仅仅移除五个极端点时，我们的预期就是这样。这个过程可以重复，知道我们对数据表示满意。</p>\n<h3 id=\"工作原理-7\"><a class=\"anchor\" href=\"#工作原理-7\">#</a> 工作原理</h3>\n<p>我们已经看到，高斯分布和 KMeans 聚类之间有本质联系。让我们基于形心和样本的协方差矩阵创建一个经验高斯分布，并且查看每个点的概率 -- 理论上是我们溢出的五个点。这刚好展示了，我们实际上溢出了拥有最低可能性的值。距离和可能性之间的概念十分重要，并且在你的机器学习训练中会经常出现。</p>\n<p>使用下列命令来创建经验高斯分布：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> scipy <span class=\"token keyword\">import</span> stats </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> emp_dist <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>multivariate_normal<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>               kmeans<span class=\"token punctuation\">.</span>cluster_centers_<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lowest_prob_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>emp_dist<span class=\"token punctuation\">.</span>pdf<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>sorted_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> X<span class=\"token punctuation\">[</span>lowest_prob_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure><h2 id=\"将-knn-用于回归\"><a class=\"anchor\" href=\"#将-knn-用于回归\">#</a> 将 KNN 用于回归</h2>\n<p>回归在这本书的其它地方有所设计，但是我们可能打算在特征空间的 “口袋” 中运行回归。我们可以认为，我们的数据集要经过多道数据处理工序。如果是这样，只训练相似数据点是个不错的想法。</p>\n<h3 id=\"准备-9\"><a class=\"anchor\" href=\"#准备-9\">#</a> 准备</h3>\n<p>我们的老朋友，回归，可以用于聚类的上下文中。回归显然是个监督学习技巧，所以我们使用 KNN 而不是 KMeans。</p>\n<p>对于 KNN 回归来说，我们使用特征空间中的 K 个最近点，来构建回归，而不像常规回归那样使用整个特征空间。</p>\n<h3 id=\"操作步骤-9\"><a class=\"anchor\" href=\"#操作步骤-9\">#</a> 操作步骤</h3>\n<p>对于这个秘籍，我们使用 <code>iris</code>  数据集。如果我们打算预测一些东西，例如每朵花的花瓣宽度，根据 <code>iris</code>  物种来聚类可能会给我们更好的结果。KNN 回归不会根据物种来聚类，但我们的假设是，相同物种的 X 会接近，或者这个案例中，是花瓣长度。</p>\n<p>对于这个秘籍，我们使用 <code>iris</code>  数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> iris <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>load_iris<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> iris<span class=\"token punctuation\">.</span>feature_names <span class=\"token punctuation\">[</span><span class=\"token string\">'sepal length (cm)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sepal width (cm)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'petal length (cm)'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'petal width (cm)'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们尝试基于萼片长度和宽度来预测花瓣长度。我们同时训练一个线性回归，来对比观察 KNN 回归有多好。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LinearRegression </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lr <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"The MSE is: &#123;:.2&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>The MSE <span class=\"token keyword\">is</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.15</span></pre></td></tr></table></figure><p>现在，对于 KNN 回归，使用下列代码：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>neighbors <span class=\"token keyword\">import</span> KNeighborsRegressor </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> knnr <span class=\"token operator\">=</span> KNeighborsRegressor<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> knnr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"The MSE is: &#123;:.2&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> knnr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>The MSE <span class=\"token keyword\">is</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.069</span></pre></td></tr></table></figure><p>让我们看看，当我们让它使用最接近的 10 个点用于回归时，KNN 回归会做什么？</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>nrows<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Predictions\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span>lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>'LR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Predictions<span class=\"token string\">', color='</span>c<span class=\"token string\">', edgecolors='</span>black'<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span>knnr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>'k<span class=\"token operator\">-</span>NN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Predictions<span class=\"token string\">', color='</span>m<span class=\"token string\">', edgecolors='</span>black'<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/3-9-1.jpg\" alt=\"\" /></p>\n<p>很显然，预测大部分都是接近的。但是让我们与实际情况相比，看看 Setosa 物种的预测：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> setosa_idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>iris<span class=\"token punctuation\">.</span>target_names<span class=\"token operator\">==</span><span class=\"token string\">'setosa'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> setosa_mask <span class=\"token operator\">=</span> iris<span class=\"token punctuation\">.</span>target <span class=\"token operator\">==</span> setosa_idx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y<span class=\"token punctuation\">[</span>setosa_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> knnr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>setosa_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.28</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.17</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.21</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.2</span> <span class=\"token punctuation\">,</span>  <span class=\"token number\">0.31</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>setosa_mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.44636645</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.53893889</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.29846368</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.27338255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.32612885</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再次观察绘图，Setosa 物种（左上方的簇）被线性回归估计过高，但是 KNN 非常接近真实值。</p>\n<h3 id=\"工作原理-8\"><a class=\"anchor\" href=\"#工作原理-8\">#</a> 工作原理</h3>\n<p>KNN 回归非常简单，它计算被测试点的 K 个最接近点的均值。</p>\n<p>让我们手动预测单个点：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> example_point <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token number\">0</span></pre></td></tr></table></figure><p>现在，我们需要获取离我们的 <code>our_example_point</code>  最近的 10 个点：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> pairwise </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> distances_to_example <span class=\"token operator\">=</span> pairwise<span class=\"token punctuation\">.</span>pairwise_distances<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ten_closest_points <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>distances_to_example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ten_closest_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>argsort<span class=\"token punctuation\">(</span>distances_to_example<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ten_closest_y<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0.28000</span></pre></td></tr></table></figure><p>我们可以看到它非常接近预期。</p>\n",
            "tags": [
                "计算机科学",
                "机器学习",
                "Scikit-learn Cookbook",
                "机器学习",
                "Scikit-learn Cookbook"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC5%E7%AB%A0%20%E6%A8%A1%E5%9E%8B%E5%90%8E%E5%A4%84%E7%90%86/",
            "url": "https://hazuki.cn/computer-science/machine-learing/Scikit-learn-Cookbook/%E7%AC%AC5%E7%AB%A0%20%E6%A8%A1%E5%9E%8B%E5%90%8E%E5%A4%84%E7%90%86/",
            "title": "第5章 模型后处理",
            "date_published": "2021-12-03T10:44:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vd2l6YXJkZm9yY2VsL3NrbGVhcm4tY2I=\">https://gitee.com/wizardforcel/sklearn-cb</span><br />\n 未经作者的许可，此代码仅用于学习，不能用于其他用途。</p>\n</div>\n<h1 id=\"第五章-模型后处理\"><a class=\"anchor\" href=\"#第五章-模型后处理\">#</a> 第五章 模型后处理</h1>\n<h2 id=\"k-fold-交叉验证\"><a class=\"anchor\" href=\"#k-fold-交叉验证\">#</a> K-fold 交叉验证</h2>\n<p>这个秘籍中，我们会创建交叉验证，它可能是最重要的模型后处理验证练习。我们会在这个秘籍中讨论 k-fold 交叉验证。有几种交叉验证的种类，每个都有不同的随机化模式。K-fold 可能是一种最熟知的随机化模式。</p>\n<h3 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h3>\n<p>我们会创建一些数据集，之后在不同的在不同的折叠上面训练分类器。值得注意的是，如果你可以保留一部分数据，那是最好的。例如，我们拥有 <code>N = 1000</code>  的数据集，如果我们保留 200 个数据点，之后使用其他 800 个数据点之间的交叉验证，来判断最佳参数。</p>\n<h3 id=\"工作原理\"><a class=\"anchor\" href=\"#工作原理\">#</a> 工作原理</h3>\n<p>首先，我们会创建一些伪造数据，之后测试参数，最后，我们会看看结果数据集的大小。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> holdout <span class=\"token operator\">=</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_regression </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们拥有了数据，让我们保留 200 个点，之后处理折叠模式。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X_h<span class=\"token punctuation\">,</span> y_h <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>holdout<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>holdout<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X_t<span class=\"token punctuation\">,</span> y_t <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>holdout<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>holdout<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cross_validation <span class=\"token keyword\">import</span> KFold</pre></td></tr></table></figure><p>K-fold 给了我们一些选项，来选择我们想要多少个折叠，是否让值为下标或者布尔值，是否打算打乱数据集，最后是随机状态（主要出于再现性）。下标实际上会在之后的版本中溢出。假设它为 <code>True</code> 。</p>\n<p>让我们创建交叉验证对象：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kfold <span class=\"token operator\">=</span> KFold<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_folds<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，我们可以迭代 k-fold 对象：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> output_string <span class=\"token operator\">=</span> <span class=\"token string\">\"Fold: &#123;&#125;, N_train: &#123;&#125;, N_test: &#123;&#125;\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>kfold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span> output_string<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_t<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y_t<span class=\"token punctuation\">[</span>test<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Fold<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N_train<span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> N_test<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Fold<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N_train<span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> N_test<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Fold<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> N_train<span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> N_test<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Fold<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> N_train<span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> N_test<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span></pre></td></tr></table></figure><p>每个迭代都应该返回相同的分割大小。</p>\n<h3 id=\"工作原理-2\"><a class=\"anchor\" href=\"#工作原理-2\">#</a> 工作原理</h3>\n<p>可能很清楚，但是 k-fold 的原理是迭代折叠，并保留 <code> 1/n_folds * N</code>  个数据，其中 <code>N</code>  是我们的 <code>len(y_t)</code> 。</p>\n<p>从 Python 的角度看，交叉验证对象拥有一个迭代器，可以通过 <code>in</code>  运算符来访问。通常，对于编写交叉验证对象的包装器来说比较实用，它会迭代数据的子集。例如我们可能拥有一个数据集，它拥有数据点的重复度量，或者我们可能拥有一个病人的数据集，每个病人都拥有度量。</p>\n<p>我们打算将它们组合起来，并对其使用 Pandas。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> patients <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> measurements <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'patient_id'</span><span class=\"token punctuation\">:</span> patients<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                   <span class=\"token string\">'ys'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们拥有了数据，我们仅仅打算保留特定的顾客，而不是数据点。</p>\n<pre><code>&gt;&gt;&gt; custids = np.unique(measurements.patient_id) \n&gt;&gt;&gt; customer_kfold = KFold(custids.size, n_folds=4)\n\n&gt;&gt;&gt; output_string = &quot;Fold: &#123;&#125;, N_train: &#123;&#125;, N_test: &#123;&#125;&quot;\n\n&gt;&gt;&gt; for i, (train, test) in enumerate(customer_kfold):\n        train_cust_ids = custids[train]\n        training = measurements[measurements.patient_id.isin(\n                   train_cust_ids)]\n        testing = measurements[~measurements.patient_id.isin(\n                   train_cust_ids)]\n\n        print output_string.format(i, len(training), len(testing))\n\nFold: 0, N_train: 600, N_test: 200 \nFold: 1, N_train: 600, N_test: 200 \nFold: 2, N_train: 600, N_test: 200 \nFold: 3, N_train: 600, N_test: 200 \n</code></pre>\n<h2 id=\"自动化交叉验证\"><a class=\"anchor\" href=\"#自动化交叉验证\">#</a> 自动化交叉验证</h2>\n<p>我们会查看如何使用 Sklearn 自带的交叉验证，但是我们也可以使用一个辅助函数，来自动化执行交叉验证。这类似于 Sklearn 中其它对象，如何被辅助函数和流水线包装。</p>\n<h3 id=\"准备-2\"><a class=\"anchor\" href=\"#准备-2\">#</a> 准备</h3>\n<p>首先，我们需要创建样例分类器，它可以是任何东西，决策树、随机森林，以及其他。对我们来说，它是随机森林。我们之后会创建数据集，并使用交叉验证函数。</p>\n<h3 id=\"工作原理-3\"><a class=\"anchor\" href=\"#工作原理-3\">#</a> 工作原理</h3>\n<p>首先导入 <code>ensemble </code> 模块来开始：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> ensemble </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> ensemble<span class=\"token punctuation\">.</span>RandomForestRegressor<span class=\"token punctuation\">(</span>max_features<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好的，所以现在，让我们创建一些回归数据：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们拥有了数据，我们可以导入 <code>cross_validation</code>  模块，并获取我们将要使用的函数：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> scores <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>cross_val_score<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> scores</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span> <span class=\"token number\">0.86823874</span>  <span class=\"token number\">0.86763225</span>  <span class=\"token number\">0.86986129</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"工作原理-4\"><a class=\"anchor\" href=\"#工作原理-4\">#</a> 工作原理</h2>\n<p>很大程度上，它会委托给交叉验证对象。一个不错的事情是，函数会并行处理交叉验证。</p>\n<p>我们可开启详细模式：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> scores <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>cross_val_score<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             cv<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>             </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">0.872866</span> <span class=\"token operator\">-</span>   <span class=\"token number\">0.</span>7s </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">0.873679</span> <span class=\"token operator\">-</span>   <span class=\"token number\">0.</span>6s </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">0.878018</span> <span class=\"token operator\">-</span>   <span class=\"token number\">0.</span>7s </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>CV<span class=\"token punctuation\">]</span> no parameters to be <span class=\"token builtin\">set</span><span class=\"token punctuation\">,</span> score<span class=\"token operator\">=</span><span class=\"token number\">0.871598</span> <span class=\"token operator\">-</span>   <span class=\"token number\">0.</span>6s</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done   <span class=\"token number\">1</span> jobs       <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>    <span class=\"token number\">0.</span>7s </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>Parallel<span class=\"token punctuation\">(</span>n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Done   <span class=\"token number\">4</span> out of   <span class=\"token number\">4</span> <span class=\"token operator\">|</span> elapsed<span class=\"token punctuation\">:</span>    <span class=\"token number\">2.</span>6s finished</pre></td></tr></table></figure><p>我们可以看到，在每次迭代中，我们都调用函数来获得得分。我们也知道了模型如何运行。</p>\n<p>同样值得了解是的，我们可以对我们尝试拟合的模型，获取预测得分。我们也会讨论如何创建你自己的评分函数。</p>\n<h2 id=\"使用-shufflesplit-交叉验证\"><a class=\"anchor\" href=\"#使用-shufflesplit-交叉验证\">#</a> 使用 ShuffleSplit 交叉验证</h2>\n<p><code>ShuffleSplit</code>  是最简单的交叉验证技巧之一。这个交叉验证技巧只是将数据的样本用于指定的迭代数量。</p>\n<h3 id=\"准备-3\"><a class=\"anchor\" href=\"#准备-3\">#</a> 准备</h3>\n<p><code>ShuffleSplit</code>  是另一个简单的交叉验证技巧。我们会指定数据集中的总元素，并且它会考虑剩余部分。我们会浏览一个例子，估计单变量数据集的均值。这有点类似于重采样，但是它说明了一个原因，为什么我们在展示交叉验证的时候使用交叉验证。</p>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<p>首先，我们需要创建数据集。我们使用 NumPy 来创建数据集，其中我们知道底层的均值。我们会对半个数据集采样，来估计均值，并看看它和底层的均值有多接近。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> true_loc <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> true_scale <span class=\"token operator\">=</span> <span class=\"token number\">10</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dataset <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span>true_loc<span class=\"token punctuation\">,</span> true_scale<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> histtype<span class=\"token operator\">=</span><span class=\"token string\">'stepfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Histogram of dataset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"978-1-78398-948-5_06_06.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>NumPy 输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-3-1.jpg\" alt=\"\" /></p>\n<p>现在，让我们截取前一半数据集，并猜测均值：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> holdout_set <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">500</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fitting_set <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> estimate <span class=\"token operator\">=</span> fitting_set<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>N<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"True Mean vs Regular Estimate\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>vlines<span class=\"token punctuation\">(</span>true_loc<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> lw<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'true mean'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>vlines<span class=\"token punctuation\">(</span>estimate<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> lw<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'regular estimate'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\"978-1-78398-948-5_06_07.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-3-2.jpg\" alt=\"\" /></p>\n<p>现在，我们可以使用 <code>ShuffleSplit </code> 在多个相似的数据集上拟合估计值。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>cross_validation <span class=\"token keyword\">import</span> ShuffleSplit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuffle_split <span class=\"token operator\">=</span> ShuffleSplit<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>fitting_set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mean_p <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> _ <span class=\"token keyword\">in</span> shuffle_split<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mean_p<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>fitting_set<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        shuf_estimate <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mean_p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>vlines<span class=\"token punctuation\">(</span>true_loc<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> lw<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'true mean'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>vlines<span class=\"token punctuation\">(</span>estimate<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> lw<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'regular estimate'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>vlines<span class=\"token punctuation\">(</span>shuf_estimate<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> linestyles<span class=\"token operator\">=</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> lw<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              alpha<span class=\"token operator\">=</span><span class=\"token number\">.65</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'shufflesplit estimate'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"All Estimates\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xlim<span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-3-3.jpg\" alt=\"\" /></p>\n<p>我们可以看到，我们得到了类似于预期的估计值，但是我们可能使用多个样本来获取该值。</p>\n<h2 id=\"分层的-k-fold\"><a class=\"anchor\" href=\"#分层的-k-fold\">#</a> 分层的 k-fold</h2>\n<p>这个秘籍中，我们会快速查看分层的 k-fold 估值。我们会浏览不同的秘籍，其中分类的表示在某种程度上是不平衡的。分层的 k-fold 非常不错，因为他的模式特地为维持分类的比例而设计。</p>\n<h3 id=\"准备-4\"><a class=\"anchor\" href=\"#准备-4\">#</a> 准备</h3>\n<p>我们打算创建一个小型的数据集。这个数据集中，我们随后会使用分层的 k-fold 验证。我们想让它尽可能小，以便我们查看变化。对于更大的样本，可能并不是特别好。</p>\n<p>我们之后会绘制每一步的分类比例，来展示如何维护分类比例。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           weights<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们检查分类的总体权重分布：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.90300000000000002</span></pre></td></tr></table></figure><p>90.5% 的样本都是 1，其余为 0。</p>\n<h3 id=\"操作步骤-2\"><a class=\"anchor\" href=\"#操作步骤-2\">#</a> 操作步骤</h3>\n<p>让我们创建分层 k-fold 对象，并通过每个折叠来迭代。我们会度量为 1 的 <code>verse </code> 比例。之后，我们会通过分割数字来绘制分类比例，来看看是否以及如何发生变化。这个代码展示了为什么它非常好。我们也会对基本的 <code>ShuffleSplit</code>  绘制这个代码。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> n_folds <span class=\"token operator\">=</span> <span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> strat_kfold <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>StratifiedKFold<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  n_folds<span class=\"token operator\">=</span>n_folds<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff_split <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>ShuffleSplit<span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  n_iter<span class=\"token operator\">=</span>n_folds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> kfold_y_props <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff_y_props <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k_train<span class=\"token punctuation\">,</span> k_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s_train<span class=\"token punctuation\">,</span> s_test<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>strat_kfold<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff_split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>         </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        kfold_y_props<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>k_train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        shuff_y_props<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>s_train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，让我们绘制每个折叠上的比例：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_folds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> shuff_y_props<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"ShuffleSplit\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_folds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kfold_y_props<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"Stratified\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> ls<span class=\"token operator\">=</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Comparing class proportions.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-4-1.jpg\" alt=\"\" /></p>\n<p>我们可以看到，分层的 k-fold 的每个折叠的比例，在每个折叠之间是稳定的。</p>\n<h3 id=\"工作原理-5\"><a class=\"anchor\" href=\"#工作原理-5\">#</a> 工作原理</h3>\n<p>分层 k-fold 的原理是选取 <code>y</code>  值。首先，获取所有分类的比例，之后将训练集和测试集按比例划分。这可以推广到多个标签：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> three_classes <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    size<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> itertools <span class=\"token keyword\">as</span> it</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> test <span class=\"token keyword\">in</span> cross_validation<span class=\"token punctuation\">.</span>StratifiedKFold<span class=\"token punctuation\">(</span>three_classes<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span> np<span class=\"token punctuation\">.</span>bincount<span class=\"token punctuation\">(</span>three_classes<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>  <span class=\"token number\">90</span> <span class=\"token number\">314</span> <span class=\"token number\">395</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>  <span class=\"token number\">90</span> <span class=\"token number\">314</span> <span class=\"token number\">395</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>  <span class=\"token number\">90</span> <span class=\"token number\">314</span> <span class=\"token number\">395</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>  <span class=\"token number\">91</span> <span class=\"token number\">315</span> <span class=\"token number\">395</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>  <span class=\"token number\">91</span> <span class=\"token number\">315</span> <span class=\"token number\">396</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们可以看到，我们得到了每个分类的样例大小，正好是训练集合测试集的比例。</p>\n<h2 id=\"菜鸟的网格搜索\"><a class=\"anchor\" href=\"#菜鸟的网格搜索\">#</a> 菜鸟的网格搜索</h2>\n<p>这个秘籍中，我们打算使用 Python 来介绍基本的网格搜索，并且使用 Sklearn 来处理模型，以及 Matplotlib 来可视化。</p>\n<h3 id=\"准备-5\"><a class=\"anchor\" href=\"#准备-5\">#</a> 准备</h3>\n<p>这个秘籍中，我们会执行下面这些东西：</p>\n<ul>\n<li>\n<p>在参数空间中设计基本的搜索网格。</p>\n</li>\n<li>\n<p>迭代网格并检查数据集的参数空间中的每个点的损失或评分函数。</p>\n</li>\n<li>\n<p>选取参数空阿基那种的点，它使评分函数最大或者最小。</p>\n</li>\n</ul>\n<p>同样，我们训练的模型是个基本的决策树分类器。我们的参数空间是 2 维的，有助于我们可视化。</p>\n<pre><code>criteria = &#123;gini, entropy&#125;\nmax_features = &#123;auto, log2, None&#125;\n</code></pre>\n<p>参数空间是 <code>criteria</code>  和 <code>max_features</code>  的笛卡尔积。</p>\n<p>我们会了解如何使用 <code>itertools</code>  来迭代这个空间。</p>\n<p>让我们创建数据集来开始：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span>n_samples<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"操作步骤-3\"><a class=\"anchor\" href=\"#操作步骤-3\">#</a> 操作步骤</h3>\n<p>之前我们说，我们使用网格搜索来调整两个参数 --  <code>criteria</code>  和 <code>max_features``criteria</code>  和 <code>max_features</code> 。我们需要将其表示为 Python 集合，之后使用 <code>itertools.product</code>  来迭代它们。</p>\n<p>不错，所以既然我们拥有了参数空间，让我们迭代它并检查每个模型的准确率，它们由参数指定。之后，我们保存这个准确率，便于比较不同的参数空间。我们也会使用以 <code>50, 50</code>  划分的测试和训练集。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>train_set <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeClassifier </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>accuracies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> criterion<span class=\"token punctuation\">,</span> max_feature <span class=\"token keyword\">in</span> parameter_space<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    dt <span class=\"token operator\">=</span> DecisionTreeClassifier<span class=\"token punctuation\">(</span>criterion<span class=\"token operator\">=</span>criterion<span class=\"token punctuation\">,</span>                </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         max_features<span class=\"token operator\">=</span>max_feature<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">[</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    accuracies<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>criterion<span class=\"token punctuation\">,</span> max_feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                         <span class=\"token operator\">==</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train_set<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> accuracies </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entropy'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.974609375</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'entropy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.9736328125</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'entropy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.962890625</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.9677734375</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.9638671875</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'log2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.96875</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以现在我们拥有了准确率和它的表现。让我们可视化它的表现。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> cm </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> cmap <span class=\"token operator\">=</span> cm<span class=\"token punctuation\">.</span>RdBu_r </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_xticklabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>criteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_yticklabels<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>max_features<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> plot_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> max_feature <span class=\"token keyword\">in</span> max_features<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> criterion <span class=\"token keyword\">in</span> criteria<span class=\"token punctuation\">:</span>       </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        m<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>accuracies<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>criterion<span class=\"token punctuation\">,</span> max_feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        plot_array<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> ax<span class=\"token punctuation\">.</span>matshow<span class=\"token punctuation\">(</span>plot_array<span class=\"token punctuation\">,</span> vmin<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>accuracies<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span> vmax<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>accuracies<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span>cmap<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>colorbar<span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-5-1.jpg\" alt=\"\" /></p>\n<p>很容易看到哪个表现最好。单元你可以使用爆破方式看到它如何进一步处理。</p>\n<h3 id=\"工作原理-6\"><a class=\"anchor\" href=\"#工作原理-6\">#</a> 工作原理</h3>\n<p>原理很简单，我们只需要执行下列步骤：</p>\n<ol>\n<li>选取一系列参数</li>\n<li>迭代它们并求得每一步的准确率</li>\n<li>通过可视化来寻找最佳的表现</li>\n</ol>\n<h2 id=\"爆破网格搜索\"><a class=\"anchor\" href=\"#爆破网格搜索\">#</a> 爆破网格搜索</h2>\n<p>这个秘籍中，我们会使用 Sklearn 做一个详细的网格搜索。这基本和上一章的事情相同，但是我们使用内建方法。</p>\n<p>我们也会浏览一个执行随机化优化的示例。这是个用于爆破搜索的替代方案。本质上，我们花费一些计算周期，来确保搜索了整个空间。我们在上一个秘籍中比较冷静，但是，你可以想想拥有多个步骤的模型，首先对缺失数据进行估算，之后使用 PCA 降低维度来分类。你的参数空间可能非常大，非常块，因此，搜索一部分空间是有利的。</p>\n<h3 id=\"准备-6\"><a class=\"anchor\" href=\"#准备-6\">#</a> 准备</h3>\n<p>我们需要下列步骤来开始：</p>\n<ol>\n<li>\n<p>创建一些数据集</p>\n</li>\n<li>\n<p>之后创建 <code>LogisticRegression </code> 对象，训练我们的模型</p>\n</li>\n<li>\n<p>之后，我们创建搜索对象， <code>GridSearch </code> 和 <code>RandomizedSearchCV</code></p>\n</li>\n</ol>\n<h3 id=\"工作原理-7\"><a class=\"anchor\" href=\"#工作原理-7\">#</a> 工作原理</h3>\n<p>执行下列代码来创建一些分类数据</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">import</span> make_classification</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_classification<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> n_features<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，我们创建逻辑回归对象：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> LogisticRegression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lr <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span>class_weight<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们需要指定打算搜索的参数。对于 <code>GridSearch</code> ，我们可以指定所关心的范围，但是对于 <code>RandomizedSearchCV</code> ，我们实际上需要指定相同空间上的分布：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LogisticRegression<span class=\"token punctuation\">(</span>C<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> class_weight<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> dual<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> intercept_scaling<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                   penalty<span class=\"token operator\">=</span><span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> grid_search_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们需要做的唯一一个修改，就是将 <code>C</code>  参数描述为概率分布。我们现在使其保持简单，虽然我们使用 <code>scipy</code>  来描述这个分布。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">as</span> st <span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> random_search_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> st<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"工作原理-8\"><a class=\"anchor\" href=\"#工作原理-8\">#</a> 工作原理</h2>\n<p>现在，我们要训练分类器了。原理是将 <code>lr</code>  作为参数传给搜索对象。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>grid_search <span class=\"token keyword\">import</span> GridSearchCV<span class=\"token punctuation\">,</span> RandomizedSearchCV</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gs <span class=\"token operator\">=</span> GridSearchCV<span class=\"token punctuation\">(</span>lr<span class=\"token punctuation\">,</span> grid_search_params<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>GridSearchCV </code> 实现了和其他方法相同的 API：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gs<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GridSearchCV<span class=\"token punctuation\">(</span>cv<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> estimator<span class=\"token operator\">=</span>LogisticRegression<span class=\"token punctuation\">(</span>C<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            class_weight<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> dual<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            intercept_scaling<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> penalty<span class=\"token operator\">=</span><span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            tol<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fit_params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> iid<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> loss_func<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> param_grid<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> pre_dispatch<span class=\"token operator\">=</span><span class=\"token string\">'2*n_jobs'</span><span class=\"token punctuation\">,</span> refit<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            score_func<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> scoring<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以看到， <code> param_grid</code>  参数中的 <code>penalty </code> 和 <code>C</code>  都是数组。</p>\n<p>为了评估得分，我们可以使用网格搜索的 <code>grid_scores_ </code> 属性。我们也打算寻找参数的最优集合。我们也可以查看网格搜索的边际表现。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gs<span class=\"token punctuation\">.</span>grid_scores_</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90300</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01192</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90100</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01258</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90200</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01117</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90100</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01258</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90200</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01117</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90100</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01258</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90100</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01258</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90100</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01258</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们可能打算获取最大得分：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> gs<span class=\"token punctuation\">.</span>grid_scores_<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.90100000000000002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>gs<span class=\"token punctuation\">.</span>grid_scores_<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mean<span class=\"token punctuation\">:</span> <span class=\"token number\">0.90300</span><span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">:</span> <span class=\"token number\">0.01192</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'penalty'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'l1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>获取的参数就是我们的逻辑回归的最佳选择。</p>\n<h2 id=\"使用伪造的估计器来比较结果\"><a class=\"anchor\" href=\"#使用伪造的估计器来比较结果\">#</a> 使用伪造的估计器来比较结果</h2>\n<p>这个秘籍关于创建伪造的估计其。这并不是一个漂亮或有趣的东西，但是我们值得为最后构建的模型创建一个参照点。</p>\n<h3 id=\"准备-7\"><a class=\"anchor\" href=\"#准备-7\">#</a> 准备</h3>\n<p>这个秘籍中，我们会执行下列任务：</p>\n<ol>\n<li>\n<p>创建一些随机数据</p>\n</li>\n<li>\n<p>训练多种伪造的估计器</p>\n</li>\n</ol>\n<p>我们会对回归数据和分类数据来执行这两个步骤。</p>\n<h3 id=\"操作步骤-4\"><a class=\"anchor\" href=\"#操作步骤-4\">#</a> 操作步骤</h3>\n<p>首先，我们创建随机数据：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_regression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> dummy</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span>DummyRegressor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DummyRegressor<span class=\"token punctuation\">(</span>constant<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> strategy<span class=\"token operator\">=</span><span class=\"token string\">'mean'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通常，估计器仅仅使用数据的均值来做预测。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">2.23297907</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.23297907</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.23297907</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">2.23297907</span><span class=\"token punctuation\">,</span>         <span class=\"token number\">2.23297907</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以尝试另外两种策略。我们可以提供常数来做预测（就是上面命令中的 <code>constant=None</code> ），也可以使用中位值来预测。</p>\n<p>如果策略是 <code>constant</code> ，才会使用提供的常数。</p>\n<p>让我们看一看：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> predictors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mean\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"median\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"constant\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> strategy<span class=\"token punctuation\">,</span> constant <span class=\"token keyword\">in</span> predictors<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dumdum <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span>DummyRegressor<span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">=</span>strategy<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                 constant<span class=\"token operator\">=</span>constant<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"strategy: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          dumdum<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> mean <span class=\"token number\">2.23297906733</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.23297906733</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.23297906733</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.23297906733</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span> <span class=\"token number\">.23297906733</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> median <span class=\"token number\">20.38535248</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.38535248</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.38535248</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.38535248</span><span class=\"token punctuation\">,</span><span class=\"token number\">20.38535</span> <span class=\"token number\">248</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> constant <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10.0</span></pre></td></tr></table></figure><p>我们实际上有四种分类器的选项。这些策略类似于连续情况，但是适用于分类问题：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> predictors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"constant\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"stratified\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"uniform\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"most_frequent\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们也需要创建一些分类数据：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_classification<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> strategy<span class=\"token punctuation\">,</span> constant <span class=\"token keyword\">in</span> predictors<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        dumdum <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span>DummyClassifier<span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">=</span>strategy<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 constant<span class=\"token operator\">=</span>constant<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dumdum<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span> <span class=\"token string\">\"strategy: &#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>strategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              dumdum<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> constant <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> stratified <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> uniform <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>strategy<span class=\"token punctuation\">:</span> most_frequent <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"工作原理-9\"><a class=\"anchor\" href=\"#工作原理-9\">#</a> 工作原理</h3>\n<p>最好在最简单的模型上测试你的模型，这就是伪造的估计器的作用。例如，在一个模型中，5% 的数据是伪造的。所以，我们可能能够训练出一个漂亮的模型，而不需要猜测任何伪造。</p>\n<p>我们可以通过使用分层（ <code>stratified</code> ）策略来床架买模型，使用下面的命令。我们也可以获取一个不错的示例，关于为什么分类的不均等会导致问题：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> make_classification<span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">.95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">.</span>DummyClassifier<span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">=</span><span class=\"token string\">'most_frequent'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dumdum<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DummyClassifier<span class=\"token punctuation\">(</span>constant<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> strategy<span class=\"token operator\">=</span><span class=\"token string\">'most_ frequent'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> accuracy_score</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span> accuracy_score<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> dumdum<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">0.94575</span></pre></td></tr></table></figure><p>我们实际上经常是正确的，但关键不是这个。关键是，这就是我们的基线。如果我们不能为伪造数据创建模型，并且比这个更准确，它就不值得我们花时间。</p>\n<h2 id=\"回归模型评估\"><a class=\"anchor\" href=\"#回归模型评估\">#</a> 回归模型评估</h2>\n<p>我们已经学过了如何量化分类中的误差，现在我们讨论连续问题中的误差。例如，我们尝试预测年龄而不是性别。</p>\n<h3 id=\"准备-8\"><a class=\"anchor\" href=\"#准备-8\">#</a> 准备</h3>\n<p>像分类一样，我们伪造一些数据，之后绘制变化。我们开始会很简单，之后逐步变复杂。数据是模拟的线性模型。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> m <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> b</pre></td></tr></table></figure><p>同时，导入我们的模块：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> metrics</pre></td></tr></table></figure><h3 id=\"操作步骤-5\"><a class=\"anchor\" href=\"#操作步骤-5\">#</a> 操作步骤</h3>\n<p>我们会执行下列操作：</p>\n<ol>\n<li>\n<p>使用 <code>y</code>  来生成 <code>y_actual</code></p>\n</li>\n<li>\n<p>使用 <code>y_actual</code>  加上一些 <code>err</code>  生成 <code>y_prediction'</code></p>\n</li>\n<li>\n<p>绘制差异</p>\n</li>\n<li>\n<p>遍历不同的度量并绘制它们</p>\n</li>\n</ol>\n<p>让我们同时关注步骤 1 和 2，并且创建一个函数来帮助我们。这与我们刚刚看的相同，但是我们添加一些功能来指定误差（如果是个常量则为偏差）。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">data</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> m<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"         </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Args:           </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x: The x value           </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            m: Slope           </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            b: Intercept           </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            e: Error, optional, True will give random error       </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \"\"\"</span>           </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> e <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            e_i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>       </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">elif</span> e <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e_i <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            e_i <span class=\"token operator\">=</span> e</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> m <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> e_i</pre></td></tr></table></figure><p>既然我们已经拥有了函数，让我们定义 <code>y_hat</code>  和 <code>y_actual</code> 。我们会以便利的方法来实现：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> N <span class=\"token operator\">=</span> <span class=\"token number\">100</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> xs <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y_pred_gen <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span>xs<span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y_true_gen <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=</span>xs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y_pred <span class=\"token operator\">=</span> y_pred_gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> y_true <span class=\"token operator\">=</span> y_true_gen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Plotting the fit vs the underlying process.\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">r'$\\hat&#123;y&#125;$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> y_true<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">r'$y$'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-8-1.jpg\" alt=\"\" /></p>\n<p>仅仅为了验证输出，我们要计算经典的残差。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> e_hat <span class=\"token operator\">=</span> y_pred <span class=\"token operator\">-</span> y_true</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Residuals\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>e_hat<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">.5</span><span class=\"token punctuation\">,</span> histtype<span class=\"token operator\">=</span><span class=\"token string\">'stepfilled'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-8-2.jpg\" alt=\"\" /></p>\n<p>看起来不错。</p>\n<h3 id=\"工作原理-10\"><a class=\"anchor\" href=\"#工作原理-10\">#</a> 工作原理</h3>\n<p>现在让我们看看度量。</p>\n<p>首先，一种度量就是均方误差。</p>\n<pre><code>MSE(y_trus, y_pred) = E((y_trus - y_pred)^2)\n</code></pre>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y_trus <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>你可以使用下面的代码来计算均方误差值：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">93.342352628475368</span></pre></td></tr></table></figure><p>要注意，这个代码会惩罚更大误差。要注意，我们这里所做的是，将模型的可能的损失函数应用于测试数据。</p>\n<p>另一个萱萱个就是平均绝对差。我们需要计算差异的绝对值。如果我们不这么做，我们的值就可能接近于零，也就是分布的均值：</p>\n<pre><code>MAD(y_trus, y_pred) = E(|y_trus - y_pred|)\n</code></pre>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mad <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>y_trus <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>最终的选项是 R 平方，它是 1 减去拟合模型的均方误差，与整体均值的军方误差的比值。随着比值接近于 0，R 平方接近于 1。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rsq <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y_trus <span class=\"token operator\">-</span> y_pred<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y_trus <span class=\"token operator\">-</span> y_trus<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> metrics<span class=\"token punctuation\">.</span>r2_score<span class=\"token punctuation\">(</span>y_true<span class=\"token punctuation\">,</span> y_pred<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0.9729312117010761</span></pre></td></tr></table></figure><p>R 平方是描述性的，它不提供模型准确性的清晰感觉。</p>\n<h2 id=\"特征选取\"><a class=\"anchor\" href=\"#特征选取\">#</a> 特征选取</h2>\n<p>这个秘籍以及后面那个都关于自动特征选取。我喜欢将其看做参数调整的特征替换。就像我们做交叉验证来寻找合适的通用参数，我们可以寻找合适的特征通用子集。这涉及到几种不同方式。</p>\n<p>最简单的想法就是到那边了选取。其它方法涉及到处理特征的组合。</p>\n<p>特征选取的一个额外好处就是，它可以减轻数据收集的负担。想象你已经在一个很小的数据子集上构建了模型。如果一切都很好，你可能打算扩展来预测数据的整个子集。如果是这样，你可以减少数据收集的工作量。</p>\n<h3 id=\"准备-9\"><a class=\"anchor\" href=\"#准备-9\">#</a> 准备</h3>\n<p>在单变量选取中，评分函数又出现了。这次，它们会定义比较度量，我们可以用它来去掉一些特征。</p>\n<p>这个秘籍中，我们会训练带有 10000 个特征的回归模型，但是只有 1000 个点。我们会浏览多种单变量特征选取方式。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>既然我们拥有了数据，我们会使用多种方式来比较特征。当你进行文本分析，或者一些生物信息学分析时，这是个非常常见的情况。</p>\n<h3 id=\"操作步骤-6\"><a class=\"anchor\" href=\"#操作步骤-6\">#</a> 操作步骤</h3>\n<p>首先，我们需要导入 <code>feature_selection</code>  模块。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> feature_selection </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> p <span class=\"token operator\">=</span> feature_selection<span class=\"token punctuation\">.</span>f_regression<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里， <code>f</code>  就是和每个线性模型的特征之一相关的 f 分数。我们之后可以比较这些特征，并基于这个比较，我们可以筛选特征。 <code>p</code>  是 <code>f</code>  值对应的 p 值。</p>\n<p>在统计学中， <code>p</code>  值是一个值的概率，它比检验统计量的当前值更极端。这里 <code>f</code>  值检验统计量。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>  <span class=\"token number\">1.06271357e-03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.91136869e+00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.01886922e+00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token number\">2.22483130e+00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.67624756e-01</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> p<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0.97400066</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.08826831</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.31303204</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1361235</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.49424067</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以看到，许多 <code>p</code>  值都太大了。我们更想让 <code>p</code>  值变小。所以我们可以将 NumPy 从工具箱中取出来，并且选取小于 <code>.05</code>  的 <code>p</code>  值。这些就是我们用于分析的特征。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> idx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> features_to_keep <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">[</span>p <span class=\"token operator\">&lt;</span> <span class=\"token number\">.05</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>features_to_keep<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">501</span></pre></td></tr></table></figure><p>你可以看到，我们实际上保留了相当大的特征总量。取决于模型的上下文，我们可以减少 <code>p</code>  至。这会减少保留的特征数量。</p>\n<p>另一个选择是使用 <code>VarianceThreshold </code> 对象。我们已经了解一些了。但是重要的是理解，我们训练模型的能力，基本上是基于特征所产生的变化。如果没有变化，我们的特征就不能描述独立变量的变化。根据文档，良好的特征可以用于非监督案例，因为它并不是结果变量。</p>\n<p>我们需要设置起始值来筛选特征。为此，我们选取并提供特征方差的中位值。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> var_threshold <span class=\"token operator\">=</span> feature_selection<span class=\"token punctuation\">.</span>VarianceThreshold<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>median<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    var<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> var_threshold<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>shape</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4835</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以看到，我们筛选了几乎一半的特征，或多或少就是我们的预期。</p>\n<h3 id=\"工作原理-11\"><a class=\"anchor\" href=\"#工作原理-11\">#</a> 工作原理</h3>\n<p>通常，所有这些方式的原理都是使用单个特征来训练基本的模型。取决于它是分类问题还是回归问题，我们可以使用合适的评分函数。</p>\n<p>让我们观察一个更小的问题，并可视化特征选取如何筛选特定的特征。我们使用第一个示例的相同评分函数，但是仅仅有 20 个特征。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> p <span class=\"token operator\">=</span> feature_selection<span class=\"token punctuation\">.</span>f_regression<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，让我们绘制特征的 <code>p</code>  值，我们可以看到筛选和保留哪个特征：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ax<span class=\"token punctuation\">.</span>set_title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Feature p values\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>输出如下：</p>\n<p><img data-src=\"/assets/computer-science/machine-learing/Scikit-learn-Cookbook/5-9-1.jpg\" alt=\"\" /></p>\n<p>我们可以看到，许多特征没有保留，但是保留了一些特征。</p>\n<h2 id=\"l1-范数上的特征选取\"><a class=\"anchor\" href=\"#l1-范数上的特征选取\">#</a> L1 范数上的特征选取</h2>\n<p>我们打算实现一些相似的理念，我们在套索回归的秘籍中见过他们。在那个米几种，我们查看了含有 0 系数的特征数量。</p>\n<p>现在我们打算更进一步，并使用 L1 范数来预处理特征。</p>\n<h3 id=\"准备-10\"><a class=\"anchor\" href=\"#准备-10\">#</a> 准备</h3>\n<p>我们要使用糖尿病数据集来拟合回归。首先，我们要使用 <code>ShuffleSplit </code> 交叉验证来训练基本的 <code>LinearRegression </code> 模型，之后，我们使用 <code>LassoRegression </code> 来寻找 L1 惩罚为 0 的系数。我们希望它能帮助我们避免过拟合，也就是说这个模型非常特定于所训练的数据。换句话说，如果过拟合的话，模型并不能推广到外围的数据。</p>\n<p>我们打算执行下列步骤：</p>\n<ol>\n<li>\n<p>加载数据集</p>\n</li>\n<li>\n<p>训练基本的线性回归模型</p>\n</li>\n<li>\n<p>使用特征选取来移除不提供信息的特征</p>\n</li>\n<li>\n<p>重新训练线性回归，并与特征完整的模型相比，它拟合得多好。</p>\n</li>\n</ol>\n<h3 id=\"操作步骤-7\"><a class=\"anchor\" href=\"#操作步骤-7\">#</a> 操作步骤</h3>\n<p>首先加载数据集：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> sklearn<span class=\"token punctuation\">.</span>datasets <span class=\"token keyword\">as</span> ds </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> diabetes <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>load_diabetes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们导入度量模块的 <code>mean_squared_error</code>  函数，以及 <code>cross_validation</code>  模块的 <code> ShuffleSplit</code>  交叉验证函数。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> metrics </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>ShuffleSplit<span class=\"token punctuation\">(</span>diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>size</pre></td></tr></table></figure><p>现在训练模型，我们会跟踪 <code>ShuffleSplit</code>  每次迭代中的均方误差。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> test <span class=\"token keyword\">in</span> shuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        train_X <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        train_y <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        test_X <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        test_y <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mses<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>test_y<span class=\"token punctuation\">,</span>               </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mses<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">2856.366626198198</span></pre></td></tr></table></figure><p>所以既然我们做了常规拟合，让我们在筛选系数为 0 的特征之后再检查它。让我们训练套索回归：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> feature_selection </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> cross_validation</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> cv <span class=\"token operator\">=</span> linear_model<span class=\"token punctuation\">.</span>LassoCV<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> cv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> cv<span class=\"token punctuation\">.</span>coef_</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">226.2375274</span> <span class=\"token punctuation\">,</span>  <span class=\"token number\">526.85738059</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">314.44026013</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token number\">196.92164002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.48742026</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">151.78054083</span><span class=\"token punctuation\">,</span> <span class=\"token number\">106.52846989</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token number\">530.58541123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64.50588257</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们会移除第一个特征。我使用 NumPy 数组来表示模块中包含的列。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> columns <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>cv<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> columns array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>好的，所以现在我们使用特定的特征来训练模型（请见下面代码中的列）：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> l1mses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> test <span class=\"token keyword\">in</span> shuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        train_X <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        train_y <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        test_X <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        test_y <span class=\"token operator\">=</span> diabetes<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>           l1mses<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>test_y<span class=\"token punctuation\">,</span>            </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                      lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>l1mses<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2861.0763924492171</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>l1mses<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mses<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4.7097662510191185</span></pre></td></tr></table></figure><p>我们可以看到，即使我们移除了不提供信息的特征，模型依然不怎么样。这种情况不是始终发生。下一部分中，我们会比较模型间的拟合，其中有很多不提供信息的特征。</p>\n<h3 id=\"工作原理-12\"><a class=\"anchor\" href=\"#工作原理-12\">#</a> 工作原理</h3>\n<p>首先，我们打算创建回归数据集，带有很多不提供信息的特征：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>make_regression<span class=\"token punctuation\">(</span>noise<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>让我们训练普通的回归：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>ShuffleSplit<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> test <span class=\"token keyword\">in</span> shuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        train_X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        train_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        test_X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        test_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>           mses<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>test_y<span class=\"token punctuation\">,</span>              </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mses<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">879.75447864034209</span></pre></td></tr></table></figure><p>现在我们可以以相同个过程来使用套索回归：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> cv<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LassoCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> copy_X<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> cv<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> eps<span class=\"token operator\">=</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> max_iter<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> n_alphas<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> normalize<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> positive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> precompute<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        tol<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们会再次创建列。这是个很好的模式，让我们能够制定要包含的列。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> columns <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>cv<span class=\"token punctuation\">.</span>coef_ <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> columns<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> mses <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shuff <span class=\"token operator\">=</span> cross_validation<span class=\"token punctuation\">.</span>ShuffleSplit<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> train<span class=\"token punctuation\">,</span> test <span class=\"token keyword\">in</span> shuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        train_X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        train_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        test_X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        test_y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>train<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        lr<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        mses<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>metrics<span class=\"token punctuation\">.</span>mean_squared_error<span class=\"token punctuation\">(</span>test_y<span class=\"token punctuation\">,</span>              </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    lr<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>test_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>mses<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">15.755403220117708</span></pre></td></tr></table></figure><p>我们可以看到，我们在模型的训练中获得了极大的提升。这刚好解释了，我们需要承认，不是所有特征都需要或者应该放进模型中。</p>\n<h2 id=\"使用-joblib-保存模型\"><a class=\"anchor\" href=\"#使用-joblib-保存模型\">#</a> 使用 joblib 保存模型</h2>\n<p>这个秘籍中，我们打算展示如何保存模型，便于以后使用。例如，你可能打算实际使用模型来预测结果，并自动做出决策。</p>\n<h3 id=\"准备-11\"><a class=\"anchor\" href=\"#准备-11\">#</a> 准备</h3>\n<p>这个秘籍中，我们会执行下列任务：</p>\n<ol>\n<li>\n<p>训练我们要保存的模型</p>\n</li>\n<li>\n<p>导入 joblib 并保存模型</p>\n</li>\n</ol>\n<h3 id=\"操作步骤-8\"><a class=\"anchor\" href=\"#操作步骤-8\">#</a> 操作步骤</h3>\n<p>为了使用 joblib 保存我们的模型，可以使用下面的代码：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> datasets<span class=\"token punctuation\">,</span> tree</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> X<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>make_classification<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">.</span>DecisionTreeClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> dt<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DecisionTreeClassifier<span class=\"token punctuation\">(</span>compute_importances<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> criterion<span class=\"token operator\">=</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                       max_depth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> max_features<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                       max_leaf_nodes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> min_density<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                       min_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> min_samples_split<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                       random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> splitter<span class=\"token operator\">=</span><span class=\"token string\">'best'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                       </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>externals <span class=\"token keyword\">import</span> joblib</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> joblib<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtree.clf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'dtree.clf'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token string\">'dtree.clf_01.npy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token string\">'dtree.clf_02.npy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token string\">'dtree.clf_03.npy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token string\">'dtree.clf_04.npy'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"工作原理-13\"><a class=\"anchor\" href=\"#工作原理-13\">#</a> 工作原理</h3>\n<p>上面的下面的原理是，保存对象状态，可以重新加载进 Sklearn 对象。要注意，对于不同的模型类型，模型的状态拥有不同的复杂度级别。</p>\n<p>出于简单的因素，将我们要保存的东西看做一种方式，我们提供出入来预测结果。对于回归来说很简单，简单的线性代数就足以。但是，对于像是随机森林的模型，我们可能拥有很多颗树。这些树可能拥有不同的复杂度级别，比较困难。</p>\n<h3 id=\"更多\"><a class=\"anchor\" href=\"#更多\">#</a> 更多</h3>\n<p>我们可以简单随机森林模型的大小：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> sklearn <span class=\"token keyword\">import</span> ensemble</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf <span class=\"token operator\">=</span> ensemble<span class=\"token punctuation\">.</span>RandomForestClassifier<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> rf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>RandomForestClassifier<span class=\"token punctuation\">(</span>bootstrap<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> compute_importances<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        criterion<span class=\"token operator\">=</span><span class=\"token string\">'gini'</span><span class=\"token punctuation\">,</span> max_depth<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        max_features<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> max_leaf_nodes<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        min_density<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> min_samples_leaf<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        min_samples_split<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n_estimators<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        n_jobs<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> oob_score<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        random_state<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我打算省略输出，但是总之，我的机器上一共有 52 个输出文件。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> joblib<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rf.clf\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'rf.clf'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token string\">'rf.clf_01.npy'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token string\">'rf.clf_02.npy'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token string\">'rf.clf_03.npy'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token string\">'rf.clf_04.npy'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token string\">'rf.clf_05.npy'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token string\">'rf.clf_06.npy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             <span class=\"token punctuation\">]</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "机器学习",
                "Scikit-learn Cookbook",
                "机器学习",
                "Scikit-learn Cookbook"
            ]
        },
        {
            "id": "https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/",
            "url": "https://hazuki.cn/hexo/Theme.Shoka/01_Shoka/",
            "title": "Shoka主题：修改切换标签时更换标题",
            "date_published": "2021-12-02T05:54:40.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>Shoka 主题默认在进行标签切换时，会将标题修改为 <code class=\"red\">(´Д｀)大変だ！</code> ，同时修改图标，虽然挺可爱 hh，但是当标签页多了想来回切换时不方便定位。</p>\n<p>为此，对 Shoka 主题进行了小的修改：</p>\n<ol>\n<li>切换标签时不再将标题修改为 <code class=\"red\">(´Д｀)大変だ！</code> ，同时修改图标也是不必要的了；</li>\n<li>保留切换回来时显示的 <code class=\"red\">（●´3｀●）やれやれだぜ</code> 。</li>\n</ol>\n<h1 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h1>\n<p>找到 <code>themes/shoka/source/js/_app/global.js</code> ，定位到 <code>visibilityListener</code>  函数（130 行）。</p>\n<p>修改 <code>case 'hidden':</code>  下的代码（见代码标亮部分）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">visibilityListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'visibilitychange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>visibilityState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">'hidden'</span><span class=\"token operator\">:</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[rel=\"icon\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> statics <span class=\"token operator\">+</span> <span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// document.title = LOCAL.favicon.hide;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          Loader<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// clearTimeout(titleTime);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">'visible'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[rel=\"icon\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> statics <span class=\"token operator\">+</span> <span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token constant\">LOCAL</span><span class=\"token punctuation\">.</span>favicon<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">.</span>switch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          Loader<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        titleTime <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> originTitle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里就完成啦。</p>\n<div class=\"note success no-icon\">\n<p>注：配置了 <code>jsDelivr加速</code> 的话，需要刷新 jsDelivr 缓存才能看到效果。</p>\n</div>\n",
            "tags": [
                "Hexo博客搭建",
                "Shoka主题",
                "Shoka主题"
            ]
        },
        {
            "id": "https://hazuki.cn/computer-science/computer-network/application-layer/",
            "url": "https://hazuki.cn/computer-science/computer-network/application-layer/",
            "title": "第2章 应用层",
            "date_published": "2021-11-30T15:50:57.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记和习题整理<br />\n课程：哈尔滨工业大学 计算机网络<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVVwNDExWjdoQz9zaGFyZV9zb3VyY2U9Y29weV93ZWI=\"> https://www.bilibili.com/video/BV1Up411Z7hC?share_source=copy_web</span></p>\n</div>\n<hr />\n<p><strong class=\"blue\">网络应用</strong>与单机应用的本质不同：</p>\n<div class=\"note primary\">\n<p>网络应用需要有 <code>网络的基础环境</code> ，一部分软件运行在自己机器上（如浏览器），另一部分软件（或数据信息）运行在互联网的某个地方（如某些服务器），两部分软件需要 <code>进行交互</code> ，才共同构成了网络应用。</p>\n</div>\n<p>既然网络应用是由不同的部分构成的，那么它就存在一个 <code>结构</code> 。</p>\n<h1 id=\"网络应用的体系结构\"><a class=\"anchor\" href=\"#网络应用的体系结构\">#</a> 网络应用的体系结构</h1>\n<p>现代网络应用中，有两种主流的体系结构。</p>\n<h2 id=\"客户机服务器结构\"><a class=\"anchor\" href=\"#客户机服务器结构\">#</a> 客户机 / 服务器结构</h2>\n<p><strong class=\"red\">主从式架构</strong>（英语：<em>Client–server model</em>）也称 <code class=\"blue\">客户端/服务器架构</code> 、 <code class=\"pink\">C/S架构</code> ，是一种网络架构，它把客户端（Client，通常是一个采用图形用户界面的程序），与服务器（Server）区分开来。每一个客户端软件的实例都可以向一个服务器或应用程序服务器发出请求。有很多不同类型的服务器，例如文件服务器、游戏服务器等。</p>\n<ul>\n<li>服务器 (server)\n<ol>\n<li><code class=\"aqua\">7 * 24小时</code> 提供服务</li>\n<li><code class=\"red\">永久性</code> 访问地址 / 域名</li>\n<li>利用大量服务器实现可扩展性（<span class=\"pink\">数据中心</span>，能够处理大量的并发请求）</li>\n</ol>\n</li>\n<li>客户端 (client)\n<ol>\n<li>与服务器通信，使用服务器提供的服务</li>\n<li><code class=\"red\">间歇性</code> 接入网络</li>\n<li>可能使用 <code class=\"aqua\">动态IP地址</code></li>\n<li>不会与其他 “客户机” 直接通信</li>\n</ol>\n</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>主从式架构通过不同的途径应用于很多不同类型的应用程序，最常见就是目前在因特网上用的 <code>网页</code> 。例如，当你在维基百科阅读文章时，你的电脑和网页浏览器就被当做一个 <code>客户端</code> ，同时，组成维基百科的电脑、数据库和应用程序就被当做 <code>服务器</code> 。当你的网页浏览器向维基百科请求一个指定的文章时，维基百科服务器从维基百科的数据库中找出所有该文章需要的信息，结合成一个网页，再发送回你的浏览器。</p>\n</div>\n<h2 id=\"点对点结构\"><a class=\"anchor\" href=\"#点对点结构\">#</a> 点对点结构</h2>\n<p><strong class=\"blue\">对等式网络</strong>（英语：<em>peer-to-peer</em>， 简称  <code class=\"aqua\">P2P</code> ），又称 <code class=\"orange\">点对点技术</code> ，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。</p>\n<ul>\n<li>P2P 架构的特点\n<ol>\n<li>没有永远在线的服务器</li>\n<li>任意端系统 / 节点之间可以 “直接” 通讯</li>\n<li>节点间歇性接入网络</li>\n<li>节点可能改变 IP 地址</li>\n</ol>\n</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>P2P 节点能遍布整个互联网，也给包括开发者在内的任何人、组织或政府带来监控难题。P2P 在 <code>网络隐私要求高</code> 和 <code>文件共享</code> 领域中，得到了广泛的应用。使用一般型 P2P 技术的网络系统有比特币、Gnutella 或自由网等。另外，P2P 技术也被使用在类似 VoIP 等实时媒体业务的数据通信中。有些网络（如  <code>Napster</code> 、OpenNAP、IRC @find）使用 <code>客户端-服务器结构</code> 实现包括搜索的一些功能，而使用 <code>P2P结构</code> 来实现另外一些功能。这种网络设计模型不同于客户端 - 服务器模型，在客户端 - 服务器模型中通信通常来往于一个中央服务器。</p>\n</div>\n<h2 id=\"混合结构hybrid\"><a class=\"anchor\" href=\"#混合结构hybrid\">#</a> 混合结构（Hybrid）</h2>\n<p>将两种结构混合在一起使用，利用两者的优点同时规避两者的缺点。如  <code>Napster</code> 。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_0.png\" alt=\"Untitled\" width=\"700px\" /></p>\n<h1 id=\"网络应用进程通信\"><a class=\"anchor\" href=\"#网络应用进程通信\">#</a> 网络应用进程通信</h1>\n<h2 id=\"进程间通信\"><a class=\"anchor\" href=\"#进程间通信\">#</a> 进程间通信</h2>\n<p>进程间通信是网络应用的基础，而 <code>进程</code> 是主机上运行的 <code>程序</code> ，</p>\n<ul>\n<li>\n<p>运行在 <code class=\"blue\">同一主机上</code> 的进程之间通过由操作系统提供的 <code class=\"aqua\">进程间通信机制</code> 进行通信；</p>\n</li>\n<li>\n<p>运行在 <code class=\"red\">不同主机上</code> 的进程之间通过 <code class=\"orange\">消息交换（报文交换）</code> 进行通信。<span class=\"red\">（★）</span></p>\n<div class=\"note danger no-icon\">\n<p>在<span class=\"red\">任一特定的情景</span>下，互相通信的一对进程总是可以被分为</p>\n<ul>\n<li>客户机进程 (<em>client process</em>)： <code class=\"red\">发起通信</code> 的进程；</li>\n<li>服务器进程 (<em>server process</em>)： <code class=\"aqua\">等待通信请求</code> 的进程。</li>\n</ul>\n</div>\n<div class=\"note success no-icon\">\n<p>采用 <code>P2P架构</code> 的应用也需要通过 “消息交换”，同样存在客户机进程与服务器进程之分。</p>\n</div>\n</li>\n</ul>\n<h2 id=\"消息交换的实现\"><a class=\"anchor\" href=\"#消息交换的实现\">#</a> 消息交换的实现</h2>\n<div class=\"note primary no-icon\">\n<p>网络应用的信息交换实际上是 <code>进程间的消息交换</code> （通过 socket 套接口），需要实现对 <code>进程的寻址</code> （IP 地址 + 端口号），消息的具体交换遵循的是 <code>应用层协议</code> （如 HTTP、SMTP）。</p>\n</div>\n<ol>\n<li>\n<p>Socket 套接字：进程间通信利用 <code>socket</code>  发送 / 接受信息实现<span class=\"red\">（★）</span>。</p>\n<ol>\n<li>\n<p>可以类比于寄信，socket 套接字接口是 <code class=\"aqua\">“门”</code> ，而硬件基础设施、网络协议栈（传输层及以下）等是 “门外” 的 <code class=\"orange\">传输基础设施</code> ，</p>\n<ul>\n<li>发送方将消息送到门外邮箱</li>\n<li>发送方依赖（门外的）传输基础设施将消息传到接收方所在主机，并送到接收方的门外</li>\n<li>接收方从门外获取消息</li>\n</ul>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_1.png\" alt=\"Untitled\" /></p>\n</li>\n<li>\n<p><code class=\"purple\">操作系统</code> 向进程提供 API（应用编程接口，即套接字 socket）</p>\n</li>\n<li>\n<p>应用程序员能控制<span class=\"blue\"> socket 应用层端</span> 的所有细节，但对于<span class=\"orange\"> socket 传输层端</span> 只有很少的控制，其支持</p>\n<ul>\n<li><code class=\"aqua\">传输层协议</code> 的选择（TCP 或 UDP）<span class=\"red\">（★）</span></li>\n<li>可能有的几个 <code class=\"pink\">传输层参数</code> 的设置（如最大缓冲区、最大  <code>segment</code>  长度）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>进程寻址：实现不同主机上的进程间通信，每个进程必须拥有 <code class=\"aqua\">标识符</code> 。</p>\n<ul>\n<li>网络层上的 <code>IP地址</code> ，能唯一标识 Internet 上的一台主机；</li>\n<li>操作系统为主机上每个需要通信的进程分配了一个 <code>端口号（Port number）</code> 。</li>\n</ul>\n<p>因此，进程的标识符由  <code>IP 地址 + 端口号</code> 组成，能唯一标识一个 “网络上的进程”。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_2.png\" alt=\"Untitled\" /></p>\n<div class=\"note success no-icon\">\n<p>使用特定知名协议的应用，有其约定的端口号，不能随便使用（其他 0~65536 可用来做自己的网络应用）。</p>\n<ul>\n<li><code>HTTP Server</code> ：80（Web 应用）</li>\n<li><code>Mail Server</code> ：25</li>\n</ul>\n</div>\n</li>\n<li>\n<p>应用层协议：网络应用需遵循应用层协议，完成消息的具体交换。<br />\n网络应用可根据所使用的协议分为两类，</p>\n<ol>\n<li><code class=\"aqua\">公开协议</code> ：由 <code>RFC(Request For Comments)</code>  定义，公开的标准、规范，允许互操作。如  <code>HTTP</code> , <code>SMTP</code>  等</li>\n<li><code class=\"pink\">私有协议</code> ：多数 P2P 文件共享应用</li>\n</ol>\n<ul>\n<li>应用层协议的内容：（协议三要素）\n<ul>\n<li>消息的 <code class=\"aqua\">类型（type）</code> ：如请求消息 / 响应消息？</li>\n<li>消息的 <code class=\"pink\">语法（syntax）</code> ：消息中有哪些字段（fields）？每个字段如何描述？</li>\n<li>字段的 <code class=\"blue\">语义（semantics）</code> ：字段中信息的含义。</li>\n<li><code class=\"orange\">规则（rules）</code> ：进程何时发送 / 响应消息，进程如何发送 / 响应消息。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"传输层所提供的服务\"><a class=\"anchor\" href=\"#传输层所提供的服务\">#</a> 传输层所提供的服务</h1>\n<div class=\"note info no-icon\">\n<p>消息交换不是应用层自己做的， <code>传输层</code> 及之下的各层共同完成传输服务。</p>\n</div>\n<h2 id=\"网络应用对传输服务的需求\"><a class=\"anchor\" href=\"#网络应用对传输服务的需求\">#</a> 网络应用对传输服务的需求</h2>\n<p>传输层可提供的服务大致地可分为三类：</p>\n<ol>\n<li><code class=\"orange\">可靠数据传输(reliable data transfer)</code>\n<ul>\n<li>某些网络应用能够容忍一定的数据丢失。\n<ul>\n<li>网络电话，网络视频</li>\n</ul>\n</li>\n<li>某些网络应用要求 100% 可靠的数据传输。\n<ul>\n<li>文件传输，telnet</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"aqua\">时间(timing)</code>\n<ul>\n<li>有些应用只有在延迟足够低时才 “有效”。\n<ul>\n<li>网络电话，网络游戏</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"blue\">吞吐量(throughput)</code>\n<ul>\n<li>某些应用只有在带宽达到最低要求时才 “有效”。如网络视频</li>\n<li>某些应用能够适应任何带宽 ——  <code>弹性应用（elastic）</code> 。如 email，为异步应用，没有太多时间上的要求。</li>\n</ul>\n</li>\n<li><code class=\"pink\">安全性(security)</code></li>\n</ol>\n<h2 id=\"internet-提供的传输服务\"><a class=\"anchor\" href=\"#internet-提供的传输服务\">#</a> Internet 提供的传输服务</h2>\n<ul>\n<li>TCP 服务\n<ul>\n<li><code class=\"red\">面向连接</code> ：客户机 / 服务器进程间需要建立连接（全双工）</li>\n<li><code class=\"blue\">可靠传输</code> ：能够把底层的不可靠转变为可靠。</li>\n<li><code class=\"aqua\">流量控制</code> ：发送方不会发送速度过快，超过接收方的处理能力</li>\n<li><code class=\"orange\">拥塞控制</code> ：当网络负载过重时能够限制发送方的发送速度（对整个网络起作用）</li>\n<li>不提供时间 / 延迟保障</li>\n<li>不提供最小带宽保障</li>\n</ul>\n</li>\n<li>UDP 服务\n<ul>\n<li><code class=\"red\">无连接</code></li>\n<li><code class=\"blue\">不可靠的数据传输</code></li>\n<li>不提供：可靠性保障、流量控制、拥塞控制、延迟保障、带宽保障</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>UDP 这么多功能都不提供，为什么使用？</p>\n<p>答：UDP 服务做了任何一个传输层服务都要做的基本的事，除此之外不做任何事。它提供了最大的 “自由”，即网络层基本的服务穿透过来了，留给 “应用程序” 发挥的空间，即掌控数据传输的能力。（后面会学到的 <code>QUIC</code>  协议便是基于 UDP 的）</p>\n</div>\n<h1 id=\"web-应用\"><a class=\"anchor\" href=\"#web-应用\">#</a> Web 应用</h1>\n<h2 id=\"万维网world-wide-web\"><a class=\"anchor\" href=\"#万维网world-wide-web\">#</a> 万维网（World Wide Web）</h2>\n<p>最基本的构成要素是 <code class=\"aqua\">网页(Web Page)</code> ，所有的网页之间<span class=\"pink\">互相链接</span>。网页包含多个 <code class=\"orange\">对象(objects)</code> ，其构成为</p>\n<ul>\n<li><code class=\"orange\">对象</code> ：HTML 文件、JPEG 图片、视频文件、动态脚本等，丰富多彩；</li>\n<li><code class=\"purple\">基本HTML文件</code> ：包含对其他对象 <code>引用</code> 的链接，是每个网页都有的。</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>对象的寻址通过 <code>URL(Uniform Resoure Locator, 统一资源定位器)</code> 。</p>\n<ul>\n<li>\n<p>基本格式： <code>Scheme://host:port/path</code> ， <code>Scheme</code>  为协议，省略时默认为  <code>http://</code> ，host 为主机 (域名 / IP 地址)，port 为端口号，path 为路径。</p>\n</li>\n<li>\n<p>URL 提供了一种机制，使得万维网上所有的资源都有了 <code>唯一的标识符</code> ，由此它们之间可以互相链接。</p>\n</li>\n</ul>\n</div>\n<h2 id=\"http-协议\"><a class=\"anchor\" href=\"#http-协议\">#</a> HTTP 协议</h2>\n<p>万维网应用所遵循的协议，称为 <code class=\"blue\">超文本传输协议(HyperText Transfer Protocol)</code> 。协议采用的是 <code class=\"purple\">客户机/服务器架构</code> ，其</p>\n<ul>\n<li><span class=\"blue\">客户端</span>： <code class=\"aqua\">浏览器(Browser)</code> ，请求、接收、展示 Web 对象；</li>\n<li><span class=\"red\">服务器</span>： <code class=\"pink\">Web Server</code> ，响应客户的请求，发送对象。</li>\n</ul>\n<h3 id=\"http-使用的传输层协议tcp\"><a class=\"anchor\" href=\"#http-使用的传输层协议tcp\">#</a> HTTP 使用的传输层协议：TCP</h3>\n<p>浏览器 (HTTP 客户端) 与服务器 (HTTP 服务器) 的通信过程：</p>\n<ol>\n<li>服务器在 <code class=\"red\">80 端口</code> 等待客户的请求</li>\n<li><code class=\"aqua\">浏览器发起</code> 到服务器的 TCP 连接</li>\n<li><code class=\"pink\">服务器接受</code> 来自浏览器的 TCP 连接</li>\n<li>浏览器与 Web 服务器<span class=\"blue\">交换 HTTP 消息</span></li>\n<li><span class=\"red\">关闭 TCP 连接</span></li>\n</ol>\n<div class=\"note info no-icon\">\n<p>HTTP 应用协议是一个 <code>无状态协议</code> ：服务器不维护任何有关客户端过去所发请求的信息。</p>\n<p>有状态的协议更复杂：</p>\n<ul>\n<li>需维护状态（历史信息）；</li>\n<li>如果 client 或 server 失效，会产生状态的不一致，解决这种不一致代价高。</li>\n</ul>\n</div>\n<h3 id=\"http-连接的两种类型\"><a class=\"anchor\" href=\"#http-连接的两种类型\">#</a> HTTP 连接的两种类型</h3>\n<p>对 TCP 的两种使用方法：</p>\n<ul>\n<li><code class=\"aqua\">非持久性连接(Nonpersistent HTTP)</code> ：每个 TCP 连接 <code class=\"blue\">最多允许传输一个对象</code> ，HTTP 1.0 版本使用非持久性连接。</li>\n<li><code class=\"red\">持久性连接(Persistent HTTP)</code> ：每个 TCP 连接 <code class=\"orange\">允许传输多个对象</code> ，HTTP 1.1 版本默认使用持久性连接。</li>\n</ul>\n<h4 id=\"非持久性连接过程\"><a class=\"anchor\" href=\"#非持久性连接过程\">#</a> 非持久性连接过程</h4>\n<p>假定用户在浏览器中输入 URL  <code class=\"pink\">http://www.someschool.edu/someDepartment/home.index</code> ， <code class=\"orange\">home.index</code>  包含文本和  <code>10</code>  个 指向 jpeg 图片的链接。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_3.png\" alt=\"Untitled\" /></p>\n<h4 id=\"响应时间分析与建模\"><a class=\"anchor\" href=\"#响应时间分析与建模\">#</a> 响应时间分析与建模</h4>\n<p>定义 <code>往返时间 RTT (Round Trip Time)</code>  为从客户端发送一个 <code class=\"aqua\">很小的数据包</code> 到服务器并返回所经历的时间（包括分组的传输时延、排队时延和处理时延）。则从浏览器输入 URL 回车（发送请求）到最后得到文件的 <code class=\"purple\">响应时间 (Response time)</code>  包括：</p>\n<ul>\n<li>发起、建立  <code class=\"aqua\">TCP 连接</code> ：1 个 RTT</li>\n<li><code>发送 HTTP 请求消息</code> 到 HTTP 响应消息的 <code>前几个字节到达</code> ：1 个 RTT</li>\n<li>响应消息中所含的文件 / 对象传输时间</li>\n</ul>\n<p>于是，总的响应时间为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>t</mi><mtext>total </mtext></msub><mo>=</mo><mn>2</mn><mo>×</mo><mi>R</mi><mi>T</mi><mi>T</mi><mo>+</mo><mtext> 文件发送时间 </mtext></mrow><annotation encoding=\"application/x-tex\">t_{\\text {total }}=2 \\times R T T+\\text { 文件发送时间 }\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">total </span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\"> </span><span class=\"mord cjk_fallback\">文件发送时间</span><span class=\"mord\"> </span></span></span></span></span></span></p>\n<h3 id=\"非持久性连接的问题\"><a class=\"anchor\" href=\"#非持久性连接的问题\">#</a> 非持久性连接的问题</h3>\n<ul>\n<li><span class=\"red\">每个对象</span>需要 <code>2个RTT</code>\n<ul>\n<li>理论上，该问题总共需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>10</mn><mo>×</mo><mn>2</mn><mo>=</mo><mn>22</mn></mrow><annotation encoding=\"application/x-tex\">2 + 10 \\times 2  = 22</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">2</span></span></span></span> 个 RTT</li>\n</ul>\n</li>\n<li><span class=\"aqua\">操作系统</span>需要为每个 TCP 连接 <code class=\"blue\">开销资源</code> （overhead）</li>\n<li>浏览器会打开多个 <code class=\"orange\">并行</code> 的 TCP 连接以获取网页所需对象，但这会给服务器带来巨大的负担。</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>TCP 连接是 <code>宝贵的资源</code> ，建立 TCP 连接是有代价的。</p>\n</div>\n<h3 id=\"持久性连接\"><a class=\"anchor\" href=\"#持久性连接\">#</a> 持久性连接</h3>\n<p>发送响应后，服务器<span class=\"red\">保持 TCP 连接</span>的打开，后续的 HTTP 消息可以通过这个连接发送。</p>\n<p>按照是否采用 <code class=\"blue\">流水机制（pipelining）</code> ，持久性连接可分为：</p>\n<ul>\n<li>\n<p><code class=\"orange\">无流水机制</code> 的持久性连接：客户端只有<span class=\"purple\">收到前一个响应后</span>才发送新的请求， <code class=\"red\">每个被引用的对象</code> 耗时 1 个 RTT。</p>\n<ul>\n<li>理论上，该问题总共需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>10</mn><mo>×</mo><mn>1</mn><mo>=</mo><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">2 + 10 \\times 1  = 12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> 个 RTT</li>\n</ul>\n</li>\n<li>\n<p><code class=\"aqua\">带有流水机制</code> 的持久性连接：客户端<span class=\"blue\">只要遇到一个引用对象</span>就尽快发出请求，HTTP 1.1 的默认选项。</p>\n<div class=\"note primary no-icon\">\n<p>理想情况下，收到所有的引用对象只需耗时约  <code>1个RTT</code> 。</p>\n</div>\n<ul>\n<li>理论上，该问题总共需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">2 + 1  = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> 个 RTT</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http-的消息格式\"><a class=\"anchor\" href=\"#http-的消息格式\">#</a> HTTP 的消息格式</h2>\n<p>HTTP 协议有两类消息： <code class=\"aqua\">请求消息</code> 和 <code class=\"pink\">响应消息</code> ，均采用  <code>ASCII</code>  码编写，供人类直接阅读。</p>\n<h3 id=\"请求消息-request\"><a class=\"anchor\" href=\"#请求消息-request\">#</a> 请求消息 (request)</h3>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_4.png\" alt=\"Untitled\" width=\"600px\" /></p>\n<ol>\n<li>\n<p><code class=\"aqua\">Request line</code>  请求行：各版本的  <code>method</code>  方法，</p>\n<ul>\n<li>HTTP/1.0： <code>GET</code> 、 <code>POST</code> 、 <code>HEAD</code></li>\n<li>HTTP/1.1：除上述三种外，增加了  <code>PUT</code>  和  <code>DELETE</code></li>\n</ul>\n<div class=\"note info no-icon\">\n<ul>\n<li>\n<p><code>HEAD</code> ：请求服务器不要将所请求的对象放入响应消息中；（用作测试）</p>\n</li>\n<li>\n<p><code>PUT</code> ：将消息体中的文件上传到 URL 字段所指定的路径；</p>\n</li>\n<li>\n<p><code>DELETE</code> ：删除 URL 字段所指定的文件。</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code class=\"blue\">Header lines</code>  头部行</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_5.png\" alt=\"Untitled\" width=\"600px\" /></p>\n</li>\n<li>\n<p><code class=\"red\">Entity body</code>  消息体</p>\n<div class=\"note success no-icon\">\n<p>上传输入的方法：从客户端（cilent）到服务器（server）</p>\n<ul>\n<li>POST 方法：在请求消息的 <code>消息体 (entity body) </code> 中上传客户端的输入。</li>\n<li>URL 方法：使用 GET 方法，输入信息通过 request line 的  <code>URL 字段</code> 上传，适用于信息较少的情况。</li>\n</ul>\n</div>\n</li>\n</ol>\n<h3 id=\"响应消息-response\"><a class=\"anchor\" href=\"#响应消息-response\">#</a> 响应消息 (response)</h3>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_6.png\" alt=\"Untitled\" width=\"600px\" /></p>\n<ol>\n<li>\n<p><code class=\"aqua\">Status line</code>  状态行： <code>status code</code>  响应状态代码。</p>\n</li>\n<li>\n<p><code class=\"purple\">Header lines</code>  头部行</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_8.png\" alt=\"Untitled\" width=\"600px\" /></p>\n</li>\n</ol>\n<h2 id=\"cookie-技术客户端状态信息\"><a class=\"anchor\" href=\"#cookie-技术客户端状态信息\">#</a> Cookie 技术：客户端状态信息</h2>\n<p>HTTP 是无状态协议，但很多应用需要服务器掌握客户端的状态（会话状态，如网上购物）。</p>\n<div class=\"note info no-icon\">\n<p>Cookie 是某些网站为了 <code>辨别用户身份</code> 、进行 <code>session 跟踪</code> ，而存储在用户本地终端上的数据（通常经过加密）。</p>\n</div>\n<ol>\n<li>Cookie 的组件（架设在 HTTP 上）\n<ol>\n<li>\n<p>HTTP 响应消息的 cookie 头部行</p>\n</li>\n<li>\n<p>HTTP 请求消息的 cookie 头部行</p>\n<div class=\"note success no-icon\">\n<p>可见，HTTP 消息的头部行是 <code>可扩展的</code> 。</p>\n</div>\n</li>\n<li>\n<p>保存在客户端主机上的 <span class=\"aqua\">cookie 文件</span>，由浏览器管理</p>\n</li>\n<li>\n<p>Web 服务器端的<span class=\"purple\">后台数据库</span></p>\n</li>\n</ol>\n</li>\n<li>Cookie 的原理（通信过程）<br />\n服务器端将在客户端初次访问时为其创建 cookie ID（存放在后台数据库），并在返回的响应中增加 Set-cookie 头部行。之后客户端的每次请求中，都带有 cookie 的头部行，服务器收到含有 cookie 头部行的请求，将执行 cookie-specific 即用户特定的动作，以根据客户的状态提供相应的信息。cookie 存储在用户本地终端上，所以一段时间后再次和服务器通信时，服务器仍能读取该客户端的状态。</li>\n</ol>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_9.png\" alt=\"Untitled\" /></p>\n<ol start=\"3\">\n<li>Cookie 的作用：身份认证，保留购物车、推荐等用户会话状态信息。</li>\n</ol>\n<h2 id=\"web-缓存代理服务器技术\"><a class=\"anchor\" href=\"#web-缓存代理服务器技术\">#</a> Web 缓存 / 代理服务器技术</h2>\n<p>在<span class=\"red\">不访问服务器</span>的前提下满足客户端的 HTTP 请求。</p>\n<div class=\"note info no-icon\">\n<p>为什么要发明这种技术？（性能角度，而 cookie 是从功能角度）</p>\n<ul>\n<li>缩短客户请求的响应时间</li>\n<li>减少机构 / 组织的流量</li>\n<li>在大范围内（Internet）实现有效的内容分发</li>\n</ul>\n</div>\n<ol>\n<li>\n<p>客户端使用代理服务器的过程：<br />\n<img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_10.png\" alt=\"Untitled\" width=\"800px\" /></p>\n<ul>\n<li>用户设定浏览器通过 <code class=\"aqua\">缓存（代理服务器）</code> 进行 Web 访问</li>\n<li>浏览器向代理服务器发送 <code class=\"red\">所有的HTTP请求</code>\n<ul>\n<li>如果所请求对象在缓存中（称为 <code class=\"blue\">缓存命中</code> ），缓存返回对象</li>\n<li>否则，缓存服务器向 <code class=\"orange\">原始服务器</code> 发送 HTTP 请求，获取对象，然后返回给客户端并<span class=\"red\">保存该对象</span></li>\n</ul>\n</li>\n</ul>\n<div class=\"note success no-icon\">\n<p>代理服务器（缓存）既充当 <code>客户端</code> ，也充当 <code>服务器</code> 。一般由组织或 ISP（Internet 服务提供商）架设。</p>\n</div>\n</li>\n<li>\n<p>性能分析<br />\n<img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_11.png\" alt=\"Untitled\" /></p>\n<div class=\"note info no-icon\">\n<p>代理服务器，也是计算机领域中广泛使用的 <code class=\"auqa\">缓存技术</code> （具有普遍性的设计思想）的一种实现。</p>\n</div>\n</li>\n<li>\n<p>解决同步问题（存放在代理服务器的对象副本可能是陈旧的）</p>\n<p>HTTP 协议中的 <code class=\"aqua\">条件GET (conditional GET)</code>  方法：如果缓存有最新的版本，则不需要发送请求对象</p>\n<ul>\n<li><span class=\"blue\">代理服务器</span>：在 HTTP 请求消息中声明 <code class=\"orange\">所持有版本</code> 的日期。\n<ul>\n<li><code>If-modified-since: &lt;date&gt;</code></li>\n</ul>\n</li>\n<li><span class=\"purple\">原始服务器</span>：如果缓存的版本是最新的，则响应消息中 <code class=\"red\">不包含对象</code> 。\n<ul>\n<li><code>HTTP/1.0 304 Not Modified</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"email-应用\"><a class=\"anchor\" href=\"#email-应用\">#</a> Email 应用</h1>\n<h2 id=\"email-应用的构成组件\"><a class=\"anchor\" href=\"#email-应用的构成组件\">#</a> Email 应用的构成组件</h2>\n<ol>\n<li>\n<p><span class=\"aqua\">邮件客户端 (user agent)</span></p>\n<ul>\n<li>读、写 Email 消息（网络应用，也有  <code>Web 形式</code> 的客户端，如 QQ-Mail）</li>\n<li>与服务器交互，收、发 Email 消息</li>\n</ul>\n</li>\n<li>\n<p><span class=\"blue\">邮件服务器 (Mail server)</span></p>\n<ul>\n<li>\n<p><code class=\"orange\">邮箱</code> ：存储发给该用户的 Email</p>\n<p>不在线仍然可以发邮件，存储在邮件服务器</p>\n</li>\n<li>\n<p><code class=\"purple\">消息队列(message queue)</code> ：存储等待发送的 Email</p>\n</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>采用 Mail Server ，而不是客户端之间直接发送 Email 的原因：</p>\n<ul>\n<li>邮件客户端（手机 / 电脑）不能保证 7 * 24 小时在线</li>\n<li>给别人发送可能失败</li>\n</ul>\n</div>\n<div class=\"note success no-icon\">\n<p>Email 应用是典型的  <code>“异步” 应用</code> ，即 <code>发送方发送</code> 和 <code>接收方接受</code> 并不需要同时。</p>\n</div>\n</li>\n<li>\n<p><span class=\"red\">SMTP 协议 (Simple Mail Transfer Protocol)</span></p>\n<ul>\n<li><code class=\"aqua\">邮件服务器</code> 之间传递消息所使用的协议<span class=\"red\">（★）</span>\n<ul>\n<li><span class=\"blue\">客户端</span>：发送消息的服务器</li>\n<li><span class=\"red\">服务器</span>：接收消息的服务器</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"smtp-协议\"><a class=\"anchor\" href=\"#smtp-协议\">#</a> SMTP 协议</h2>\n<p>使用  <code>TCP</code>  进行 Email 消息的可靠传输（端口 25）</p>\n<ul>\n<li>\n<p>传输过程的三个阶段：<span class=\"blue\">握手</span> → <span class=\"orange\">消息的传输</span> → <span class=\"aqua\">关闭</span></p>\n</li>\n<li>\n<p><span class=\"red\">命令 / 响应</span>交互模式</p>\n<ul>\n<li>\n<p><code class=\"aqua\">命令（command）</code> ：ASCII 文本</p>\n<p>由于历史原因，Email 消息只能包含 7 位  <code>ASCII码</code> 。</p>\n<div class=\"note success no-icon\">\n<p>Email 是非常古老的应用，在设计之初并没有多媒体，只有文本。</p>\n</div>\n</li>\n<li>\n<p><code class=\"pink\">响应(response)</code> ：状态代码和语句</p>\n</li>\n</ul>\n<p>服务器与客户端交互过程示例：<br />\n<img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_12.png\" alt=\"Untitled\" /></p>\n<ol>\n<li>\n<p>SMTP 协议的特点：</p>\n<ul>\n<li>使用 <code>持久性连接</code> （TCP 协议）</li>\n<li>要求消息必须由 7 位  <code>ASCII 码</code> 构成</li>\n<li>SMTP 服务器利用  <code>CRLF.CRLF</code>  确定消息的结束</li>\n</ul>\n</li>\n<li>\n<p>STMP 与 HTTP 对比：</p>\n<ul>\n<li>都使用 <code class=\"orange\">命令/ 响应</code> 交互模式 ，命令和状态代码都是 ASCII 码</li>\n<li>HTTP 协议： <code class=\"blue\">拉式（pull）</code> ，把网页 “拉” 回本地；每个对象封装在独立的响应消息中。</li>\n<li>SMTP 协议： <code class=\"aqua\">推式（push）</code> ，发出 Email 邮件信息；多个对象在由多个部分构成的消息中发送。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"email-的消息格式\"><a class=\"anchor\" href=\"#email-的消息格式\">#</a> Email 的消息格式</h2>\n<ul>\n<li>\n<p>SMTP 协议：Email 消息的传输 / 交换协议（RFC 822：文本消息格式标准）</p>\n<ul>\n<li><code>头部行(header)</code> ：<span class=\"blue\">To</span>、<span class=\"orange\">From</span>、<span class=\"aqua\">Subject（邮件主题）</span>，与 SMTP 命令不同</li>\n<li><code>消息体(body)</code> ：消息本身，只能是 ASCII 字符</li>\n</ul>\n</li>\n<li>\n<p>MIME 协议：<span class=\"pink\">多媒体邮件扩展</span>（RFC 2045, 2056）</p>\n<ul>\n<li>\n<p>通过在邮件头部 <code class=\"aqua\">增加额外的行</code> 以声明 MIME 的内容类型</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_13.png\" alt=\"Untitled\" width=\"500px\" /></p>\n</li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>回顾 MIME 协议以及 cookie 的实现：</p>\n<ul>\n<li>通过在消息的 <code>头部行</code> 中，增加新的行实现对应用的 <code>拓展</code> 。</li>\n<li>计算机领域中， <code>编码解码</code> 应用也在网络中被普遍使用。</li>\n</ul>\n</div>\n</li>\n</ul>\n<h2 id=\"邮件访问协议从服务器获取邮件\"><a class=\"anchor\" href=\"#邮件访问协议从服务器获取邮件\">#</a> 邮件访问协议：从服务器获取邮件</h2>\n<div class=\"note success no-icon\">\n<p>一个应用可以使用 <code>不止一个协议</code> ：</p>\n<ul>\n<li>邮件客户端向邮件服务器 <code>发送邮件</code> ：使用 SMPT</li>\n<li>邮件客户端从邮件服务器 <code>接收邮件</code> ：使用 “邮件访问协议”。</li>\n</ul>\n</div>\n<ol>\n<li>\n<p>POP 协议（无状态协议）： <code class=\"aqua\">邮局协议（Post Office Protocol）</code> ，是 TCP/IP 协议族中的一员。</p>\n<ul>\n<li>\n<p>主要用于支持使用客户端远程管理在服务器上的电子邮件。（认证 / 授权和下载，<span class=\"red\">认证过程</span> → <span class=\"blue\">事务阶段</span>）</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_14.png\" alt=\"Untitled\" width=\"600px\" /></p>\n</li>\n<li>\n<p>POP 支持 <code>离线邮件处理</code> ，其具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。</p>\n<div class=\"note primary no-icon\">\n<ul>\n<li>\n<p>这种离线访问模式是一种 <code>存储转发</code> 服务，将邮件从邮件服务器端送到个人终端机器上，一般是 PC 机或 Mac。</p>\n<p>一旦邮件下载到 PC 机或 Mac 上，邮件服务器上的邮件将会 <code>被删除</code> 。</p>\n</li>\n<li>\n<p>但目前的  <code>POP3</code>  邮件服务器大都可以  <code>“只下载邮件，服务器端并不删除”</code> ，也就是改进的 POP3 协议。</p>\n<ul>\n<li>“下载并删除” 模式：用户如果换了客户端软件，无法重读该邮件</li>\n<li>“下载并保持” 模式：不同客户端都可以保留消息的拷贝</li>\n</ul>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p>最新版本为  <code>POP3</code> 。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>IMAP 协议（有状态协议）： <code class=\"pink\">因特网信息访问协议</code> （<em>Internet Mail Access Protocol</em>），是一个应用层协议，用来从 <code class=\"aqua\">本地邮件客户端</code> （如 Microsoft Outlook、Foxmail）访问远程服务器上的邮件。</p>\n<p>相较于 POP3，更多功能、更加复杂、能够操纵服务器上存储的消息。</p>\n<ul>\n<li>所有消息统一保存在一个地方：服务器</li>\n<li>允许用户利用文件夹组织消息</li>\n<li>IMAP 支持跨会话（Session）的用户状态</li>\n</ul>\n</li>\n<li>\n<p>HTTP 协议：浏览器本身也是一种邮件客户端，基于 Web 的 email 应用如 163、QQ Mail 等。</p>\n</li>\n</ol>\n<h1 id=\"dns-服务\"><a class=\"anchor\" href=\"#dns-服务\">#</a> DNS 服务</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><strong class=\"blue\">域名系统</strong>（英语：<em>Domain Name System</em>，缩写： <code>DNS</code> ）是互联网的一项服务，它作为将 <code class=\"blue\">域名</code> 和  <code class=\"red\">IP 地址</code> 相互映射的一个 <code class=\"aqua\">分布式数据库</code> ，能够使人更方便地访问互联网。（IP 地址本身是数字，不易于人类使用，而域名相对来说可读性更好）</p>\n<ul>\n<li>DNS 域名解析系统，是由<span class=\"pink\">多层命名服务器</span>构成的 <code class=\"red\">分布式数据库</code></li>\n<li>DNS 本身也是 <code class=\"blue\">应用层协议</code> ，由应用层上的软件负责完成名字的解析，\n<ul>\n<li>Internet 的核心功能，用应用层协议实现</li>\n<li>网络边界复杂，分布式而不使用集中式的原因：<br />\n集中式存在单点失败问题、流量问题、距离问题和维护性问题，不可伸缩，不适合。</li>\n</ul>\n</li>\n<li>DNS 提供的服务：\n<ul>\n<li><span class=\"blue\">域名</span>向 <span class=\"red\">IP 地址</span>的翻译</li>\n<li><span class=\"aqua\">别名服务</span>：主机别名、邮件服务器别名</li>\n<li><span class=\"purple\">负载均衡</span>：Web 服务器，提供多个映射</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分布式层次式数据库\"><a class=\"anchor\" href=\"#分布式层次式数据库\">#</a> 分布式层次式数据库</h2>\n<p>客户端想要查询  <code>www.amazon.com</code>  的 IP 地址：</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_15.png\" alt=\"Untitled\" /></p>\n<ol>\n<li>客户端查询 <code class=\"aqua\">根服务器</code> ，找到 com 域名解析服务器</li>\n<li>客户端查询  <code class=\"red\">com 域名解析服务器</code> ，找到 <span class=\"exturl\" data-url=\"aHR0cDovL2FtYXpvbi5jb20=\">amazon.com</span> 域名解析服务器</li>\n<li>客户端查询  <code class=\"purple\">amazon.com 域名解析服务器</code> ，获得 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hbWF6b24uY29t\">www.amazon.com</span> 的 IP 地址</li>\n</ol>\n<ul>\n<li>\n<p><span class=\"orange\">根域名服务器 (Root DNS servers)</span></p>\n<ul>\n<li><code class=\"blue\">本地域名解析服务器</code> 无法解析域名时，访问 <code class=\"red\">根域名服务器</code> 。</li>\n<li>根域名服务器如果不知道映射，则访问权威域名服务器获得映射，再向本地域名服务器返回映射。</li>\n</ul>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_16.png\" alt=\"Untitled\" width=\"800px\" /></p>\n</li>\n<li>\n<p><span class=\"aqua\">顶级域名服务器 TLD (<em>Top-Level Domain</em>)</span><br />\n 负责  <code>com</code> 、 <code>org</code> 、 <code>net</code> 、 <code>edu</code>  等顶级域名和  <code>cn, uk, fr</code>  等国家顶级域名</p>\n<ul>\n<li><code>Network Solutions</code>  维护 com 顶级域名服务器</li>\n<li><code>Educause</code>  维护 edu 顶级域名服务器</li>\n</ul>\n</li>\n<li>\n<p><span class=\"pink\">权威 (Authoritative) 域名服务器</span>：组织的域名解析服务器，提供组织内部服务器 (本地化，自治) 的解析服务。</p>\n<ul>\n<li>组织自己负责维护，或委托</li>\n<li>服务提供商负责维护</li>\n</ul>\n</li>\n<li>\n<p><span class=\"blue\">本地域名解析服务器</span>（ <code>不严格属于</code> 层级体系）</p>\n<ul>\n<li>由 ISP 提供，每个 ISP 都有一个本地域名服务器，又称默认域名解析服务器</li>\n<li>当主机进行 DNS 查询时，查询被发送到本地域名服务器，作为代理将查询转发给 (层级式) 域名解析服务器系统，或利用缓存</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dns-查询\"><a class=\"anchor\" href=\"#dns-查询\">#</a> DNS 查询</h2>\n<p>存在两种查询方式：</p>\n<ol>\n<li>\n<p><span class=\"blue\">迭代查询</span>：被查询服务器返回域名解析服务器的名字</p>\n</li>\n<li>\n<p><span class=\"red\">递归查询</span>：将域名解析的任务交给所联系的服务器</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_18.png\" alt=\"Untitled\" height=\"500px\" /></p>\n</li>\n</ol>\n<h2 id=\"dns-记录缓存和更新\"><a class=\"anchor\" href=\"#dns-记录缓存和更新\">#</a> DNS 记录缓存和更新</h2>\n<p>只要域名解析服务器获得 <code class=\"aqua\">域名-IP 映射</code> ，即 <code class=\"red\">缓存</code> 这一映射</p>\n<ul>\n<li>一段时间过后，缓存条目失效（删除）</li>\n<li><code class=\"blue\">本地域名服务器</code> 一般会缓存顶级域名服务器的映射，因此根域名服务器 <code class=\"orange\">不经常被访问</code> 。</li>\n</ul>\n<h2 id=\"dns-记录和消息格式\"><a class=\"anchor\" href=\"#dns-记录和消息格式\">#</a> DNS 记录和消息格式</h2>\n<ul>\n<li>\n<p><span class=\"purple\">资源记录 (RR, <em>resource records</em>)</span>： <code class=\"aqua\">RR format: (name, value, type, ttl)</code></p>\n<p>不同的类型对  <code>name</code>  和  <code>value</code>  的解释不同：</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>解释</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>最基本的主机到 IP 地址的映射</td>\n<td>主机域名</td>\n<td>IP 地址</td>\n</tr>\n<tr>\n<td>NS</td>\n<td>权威域名解析服务器</td>\n<td>域（如 <span class=\"exturl\" data-url=\"aHR0cDovL2VkdS5jbg==\">edu.cn</span>）</td>\n<td>该域权威域名解析服务器的主机域名</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>实现别名服务</td>\n<td>某一真实域名的别名</td>\n<td>Value：真实域名</td>\n</tr>\n<tr>\n<td>MX</td>\n<td>邮件服务器</td>\n<td></td>\n<td>与 name 相对应的邮件服务器</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>消息格式</p>\n<ul>\n<li>DNS 协议： <code class=\"blue\">查询/回复</code> 模式，查询（query）和回复（reply）的 <code class=\"orange\">消息格式相同</code></li>\n<li>消息头部\n<ul>\n<li>\n<p><code>Identification</code> ：16 位查询编号，回复使用相同的编号</p>\n</li>\n<li>\n<p><code>flags</code> ：查询或回复、期望递归、递归可用、权威回答</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_19.png\" alt=\"Untitled\" width=\"600px\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"p2p-应用\"><a class=\"anchor\" href=\"#p2p-应用\">#</a> P2P 应用</h1>\n<h2 id=\"文件分发场景\"><a class=\"anchor\" href=\"#文件分发场景\">#</a> 文件分发场景</h2>\n<p><code>C/S 架构</code>  v.s.  <code>P2P 架构</code> ：从一个服务器向 N 个节点分发一个文件需要多长时间？</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_21.png\" alt=\"Untitled\" width=\"500px\" /></p>\n<ol>\n<li>\n<p><code class=\"aqua\">C/S 架构</code> ：服务器 <code>串行地</code> 发送 N 个副本</p>\n<ul>\n<li>完成文件分发所需的时间：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mi>c</mi><mi>s</mi></mrow></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mrow><mo fence=\"true\">{</mo><mfrac><mrow><mi>N</mi><mi>F</mi></mrow><msub><mi>u</mi><mi>s</mi></msub></mfrac><mo separator=\"true\">,</mo><mfrac><mi>F</mi><msub><mi>d</mi><mi>min</mi><mo>⁡</mo></msub></mfrac><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">D_{c s}=\\max \\left\\{\\frac{N F}{u_{s}}, \\frac{F}{d_{\\min }}\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.80002em;vertical-align:-0.65002em;\"></span><span class=\"mop\">max</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">{</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3340428571428572em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">}</span></span></span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><code class=\"pink\">P2P 架构</code> ：服务器必须发送一个副本。而<span class=\"aqua\">拥有该文件的一部分</span>的结点可以 <code>共同协助</code> 将文件上传到 Internet 上。</p>\n<ul>\n<li>完成文件分发所需的时间：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>D</mi><mrow><mi mathvariant=\"normal\">P</mi><mn>2</mn><mi mathvariant=\"normal\">P</mi></mrow></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mrow><mo fence=\"true\">{</mo><mfrac><mi>F</mi><msub><mi>u</mi><mi>s</mi></msub></mfrac><mo separator=\"true\">,</mo><mfrac><mi>F</mi><msub><mi>d</mi><mi>min</mi><mo>⁡</mo></msub></mfrac><mo separator=\"true\">,</mo><mfrac><mrow><mi>N</mi><mi>F</mi></mrow><mrow><msub><mi>u</mi><mi>s</mi></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></msubsup><msub><mi>u</mi><mi>i</mi></msub></mrow></mfrac><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">D_{\\mathrm{P} 2 \\mathrm{P}}=\\max \\left\\{\\frac{F}{u_{s}}, \\frac{F}{d_{\\min }}, \\frac{N F}{u_{s}+\\sum_{i=1}^{N} u_{i}}\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">P</span></span><span class=\"mord mtight\">2</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">P</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.804672em;vertical-align:-0.654672em;\"></span><span class=\"mop\">max</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">{</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3340428571428572em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">m</span><span class=\"mtight\">i</span><span class=\"mtight\">n</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.570335em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mop mtight\"><span class=\"mop op-symbol small-op mtight\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8852357142857143em;\"><span style=\"top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-2.8971428571428572em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32143857142857146em;\"><span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.19516666666666668em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">F</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.654672em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">}</span></span></span></span></span></span></li>\n</ul>\n<div class=\"note primary no-icon\">\n<p>随着网络中连接的结点数 N 的增大， <code>C/S 架构</code> 所需的时间线性增长，而  <code>P2P 架构</code> 则越往后越 “平”，存在上界。</p>\n<p>可见， <code>文件分发场景</code> 适合使用  <code>P2P 架构</code> 。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_22.png\" alt=\"Untitled\" width=\"500px\" /></p>\n</div>\n</li>\n</ol>\n<h2 id=\"索引技术\"><a class=\"anchor\" href=\"#索引技术\">#</a> 索引技术</h2>\n<p>P2P 系统的索引，即 <code>信息</code> 到 <code>节点位置(IP地址+端口号)</code>  的映射。</p>\n<ul>\n<li>\n<p><code class=\"blue\">集中式索引</code> ：内容和文件传输是分布式的，但是内容定位是高度集中式的（由一台中央目录服务器负责索引）。</p>\n<p>存在的问题：单点失效问题、性能瓶颈、版权问题</p>\n</li>\n<li>\n<p><code class=\"orange\">洪泛式查询（Query flooding）</code> ：完全分布式架构，每个节点对它共享的文件进行索引，且只对它共享的文件进行索引。</p>\n<ul>\n<li>\n<p>覆盖网络 (overlay network): Graph</p>\n<ol>\n<li>节点 X 与 Y 之间如果有 TCP 连接，那么构成一个边（虚拟链路）</li>\n<li>所有的活动节点和边构成覆盖网络。</li>\n</ol>\n<p>查询消息通过已有的 TCP 连接发送，节点转发查询消息。</p>\n<p>如果查询命中，则利用反向路径发回查询节点，最后请求查询的主机和命中主机建立 TCP 连接。</p>\n<div class=\"note info no-icon\">\n<p>像洪水一般在网络中 “泛滥”，会给网络带来负担。</p>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p><code class=\"red\">层次式覆盖网络</code> ：介于集中式索引和洪泛查询之间的方法</p>\n<ul>\n<li>每个节点或者是一个 <code class=\"blue\">超级节点</code> ，或者被分配一个超级节点（普通结点），超级节点负责跟踪子节点的内容（提供索引）\n<ol>\n<li>节点和超级节点间维持 TCP 连接（分层式）</li>\n<li>某些超级节点对之间维持 TCP 连接（洪泛式、分布式）</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note success no-icon\">\n<p>P2P 网络应用的通信过程的实质：C/S 进程之间的通信。</p>\n<ul>\n<li>P2P 应用程序结构：部分实现 server/cilent 功能：多线程，多进程等</li>\n<li>P2P 网络应用是否适合基于 DNS 实现 peer 寻址？<br />\n 不适合。动态 IP 地址影响时刻更新 DNS，需要 DNS 处理能力很强。</li>\n</ul>\n</div>\n<h1 id=\"socket-编程\"><a class=\"anchor\" href=\"#socket-编程\">#</a> socket 编程</h1>\n<p>socket 是一种 <code class=\"purple\">操作系统</code> 提供的 <code class=\"aqua\">进程间通信机制</code></p>\n<p>在操作系统中，通常会为 <code class=\"blue\">应用程序</code> 提供一组 <code class=\"red\">应用程序接口（API）</code> ，称为套接字接口（英语：socket API）。</p>\n<ul>\n<li>最初设计：socket API 来源于 Unix-Berkley 的项目，是面向 TCP/IP 协议栈的接口（当前可以面向多个协议栈）。</li>\n<li>目前：事实上的工业标准，绝大多数 OS 均支持，是 Internet 网络应用最典型的 API 接口。</li>\n<li>通信模型：客户机 / 服务器模型（C/S），是应用进程间通信的抽象机制。<div class=\"note success no-icon\">\n<p>socket 一词的来历：就像一个 <code>“插座”</code> ，两者之间一插就可以通信。</p>\n</div>\n</li>\n</ul>\n<h2 id=\"应用编程接口-api\"><a class=\"anchor\" href=\"#应用编程接口-api\">#</a> 应用编程接口 API</h2>\n<p><span class=\"blue\">应用进程</span>的控制权和<span class=\"pink\">操作系统</span>的控制权进行转换的一个 <code class=\"aqua\">系统调用</code> 接口。</p>\n<ul>\n<li>\n<p>应用进程将 <code class=\"red\">控制权</code> 交给操作系统（系统调用），操作系统执行相应的过程，并将结果返回给应用进程。</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_25.png\" alt=\"Untitled\" /></p>\n</li>\n</ul>\n<h2 id=\"三种典型的-api\"><a class=\"anchor\" href=\"#三种典型的-api\">#</a> 三种典型的 API</h2>\n<ul>\n<li>\n<p>Berkeley  <code>UNIX 操作系统</code> 定义的一种 API，称为套接字接口（socket interface），简称套接字（socket）。</p>\n<div class=\"note primary\">\n<p>最具有代表性，应用最广泛的标准的伯克利套接字。</p>\n</div>\n</li>\n<li>\n<p>微软在 socket 的基础上扩展形成的一个稍有不同的 API，称为  <code>WINSOCK</code> （Windows Socket Interface）。</p>\n<div class=\"note success\">\n<p><code class=\"orange\">Unix / Linux</code>  使用的是标准的伯克利套接字，而  <code class=\"blue\">windows</code>  使用的是  <code class=\"purple\">WINSOCK</code> ，两者之间有很大部分重叠。</p>\n</div>\n</li>\n<li>\n<p><code>AT&amp;T</code>  为其  <code>UNIX V</code>  定义了一种 API，简写为  <code>TLI</code> （Transport Layer Interface）传输层接口。</p>\n</li>\n</ul>\n<h2 id=\"应用进程通信的寻址问题\"><a class=\"anchor\" href=\"#应用进程通信的寻址问题\">#</a> 应用进程通信的寻址问题</h2>\n<ul>\n<li><span class=\"blue\">标识通信端点</span>（对外）\n<ul>\n<li><code class=\"orange\">IP 地址 + 端口号</code> （又称 “端点地址”）</li>\n</ul>\n</li>\n<li><span class=\"red\">操作系统</span>如何管理套接字（对内）\n<ul>\n<li><span class=\"aqua\">套接字描述符 (socket descriptor)</span>：小整数</li>\n<li><span class=\"pink\">socket 抽象</span>：当应用进程 <code class=\"blue\">创建套接字</code> 时，操作系统分配一个 <code class=\"red\">数据结构</code> 存储该套接字相关信息，并返回套接字描述符</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"socket-api-函数\"><a class=\"anchor\" href=\"#socket-api-函数\">#</a> socket API 函数</h2>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>函数功能</th>\n<th>适用条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"grey\">WSAStartup()</code></td>\n<td>初始化 socket 库</td>\n<td>仅对 WinSock</td>\n</tr>\n<tr>\n<td><code class=\"grey\">WSACleanup()</code></td>\n<td>清除 / 终止 socket 库的使用</td>\n<td>仅对 WinSock</td>\n</tr>\n<tr>\n<td><code class=\"purple\">socket()</code></td>\n<td>创建套接字</td>\n</tr>\n<tr>\n<td><code class=\"purple\">closesocket()</code></td>\n<td>释放 / 关闭套接字</td>\n<td>在 Unix / Linux 中为  <code class=\"orange\">close()</code> ，与关闭文件相同</td>\n</tr>\n<tr>\n<td><code class=\"red\">bind()</code></td>\n<td>绑定套接字的<span class=\"red\">本地 IP 地址和端口号</span></td>\n<td>通常<span class=\"blue\">客户端不需要</span>，由<span class=\"purple\">操作系统</span>自动完成</td>\n</tr>\n<tr>\n<td><code class=\"blue\">listen()</code></td>\n<td>置服务器端 TCP 套接字为<span class=\"aqua\">监听模式</span>，并<span class=\"orange\">设置队列大小</span></td>\n<td>仅用于<span class=\"red\">服务器端 TCP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"orange\">connect()</code></td>\n<td><span class=\"purple\">“连接” 远端服务器</span>（UDP 实际上没有连接）</td>\n<td>仅用于<span class=\"aqua\">客户端</span></td>\n</tr>\n<tr>\n<td><code class=\"orange\">accept()</code></td>\n<td>接受 / 提取一个 <span class=\"blue\">TCP 连接请求</span>，创建<span class=\"red\">新套接字</span>，通过新套接字通信</td>\n<td>仅用于<span class=\"red\">服务器端 TCP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"green\">send()</code></td>\n<td>发送数据</td>\n<td>用于<span class=\"aqua\"> TCP 套接字</span> 或 连接模式的<span class=\"purple\">客户端 UDP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"green\">sendto()</code></td>\n<td>发送数据报</td>\n<td>用于<span class=\"blue\">非连接模式的 UDP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"pink\">recv()</code></td>\n<td>接收数据</td>\n<td>用于<span class=\"aqua\"> TCP 套接字</span> 或 连接模式的<span class=\"purple\">客户端 UDP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"pink\">recvfrom()</code></td>\n<td>接收数据报</td>\n<td>用于<span class=\"blue\">非连接模式的 UDP 套接字</span></td>\n</tr>\n<tr>\n<td><code class=\"grey\">setsockopt()</code></td>\n<td>设置套接字选项参数</td>\n</tr>\n<tr>\n<td><code class=\"grey\">getsockopt()</code></td>\n<td>获取套接字选项参数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"socket-编程示例\"><a class=\"anchor\" href=\"#socket-编程示例\">#</a> socket 编程示例</h2>\n<div class=\"note info no-icon\">\n<p>We’ll use the following simple  <code>client-server application</code>  to demonstrate socket programming for both  <code>UDP</code>  and  <code>TCP</code> :</p>\n<ol>\n<li>The client reads a line of characters (data) from its keyboard and sends the data to the server.</li>\n<li>The server receives the data and converts the characters to uppercase.</li>\n<li>The server sends the modified data to the client.</li>\n<li>The client receives the modified data and displays the line on its screen.</li>\n</ol>\n</div>\n<h3 id=\"socket-programming-with-udp\"><a class=\"anchor\" href=\"#socket-programming-with-udp\">#</a> Socket Programming with UDP</h3>\n<ol>\n<li>\n<p>The client-server application using  <code>UDP</code> :</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_26.png\" alt=\"Untitled\" width=\"600px\" /></p>\n<div class=\"tab\" data-id=\"id1\" data-title=\"UDPClient.py\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># UDPClient.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serverName <span class=\"token operator\">=</span> <span class=\"token string\">'hostname'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>serverPort <span class=\"token operator\">=</span> <span class=\"token number\">12000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>clientSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>message <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input lowercase sentence:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">,</span> serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>modifiedMessage<span class=\"token punctuation\">,</span> serverAddress <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>modifiedMessage<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id1\" data-title=\"UDPServer.py\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># UDPServer.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serverPort <span class=\"token operator\">=</span> <span class=\"token number\">12000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>serverSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>serverSocket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The server is ready to receive\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    message<span class=\"token punctuation\">,</span> clientAddress <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    modifiedMessage <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    serverSocket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>modifiedMessage<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clientAddress<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h3 id=\"socket-programming-with-tcp\"><a class=\"anchor\" href=\"#socket-programming-with-tcp\">#</a> Socket Programming with TCP</h3>\n<ol>\n<li>\n<p>TCP Server  <code>欢迎套接字(welcome socket)</code>  与 <code>连接套接字(connection socket)</code> ：</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_27.png\" alt=\"Untitled\" width=\"500px\" /></p>\n</li>\n<li>\n<p>The client-server application using  <code>TCP</code> :</p>\n<p><img data-src=\"/assets/computer-science/computer-network/application-layer/Untitled_28.png\" alt=\"Untitled\" width=\"600px\" /></p>\n<div class=\"tab\" data-id=\"id2\" data-title=\"TCPClient.py\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># TCPClient.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serverName <span class=\"token operator\">=</span> <span class=\"token string\">'servername'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>serverPort <span class=\"token operator\">=</span> <span class=\"token number\">12000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>clientSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">,</span>serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sentence <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input lowercase sentence:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>sentence<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>modifiedSentence <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'From Server: '</span><span class=\"token punctuation\">,</span> modifiedSentence<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>clientSocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"id2\" data-title=\"TCPServer.py\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># TCPServer.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>serverPort <span class=\"token operator\">=</span> <span class=\"token number\">12000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>serverSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>serverSocket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>serverSocket<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The server is ready to receive'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    connectionSocket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    sentence <span class=\"token operator\">=</span> connectionSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    capitalizedSentence <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    connectionSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>capitalizedSentence<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    connectionSocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "计算机网络",
                "计算机网络",
                "应用层"
            ]
        }
    ]
}